<?php

namespace s9e\TextFormatter\Tests\Configurator\Helpers;

use s9e\TextFormatter\Tests\Test;
use s9e\TextFormatter\Configurator\Items\Tag;
use s9e\TextFormatter\Configurator\Helpers\TemplateChecker;
use s9e\TextFormatter\Configurator\Helpers\TemplateOptimizer;

/**
* @covers s9e\TextFormatter\Configurator\Helpers\TemplateChecker
*/
class TemplateCheckerTest extends Test
{
	/**
	* @testdox checkUnsafe() throws an exception on invalid XML
	* @expectedException s9e\TextFormatter\Configurator\Exceptions\InvalidXslException
	* @expectedExceptionMessage Premature end of data in tag
	*/
	public function testUnsafeInvalidXML()
	{
		TemplateChecker::checkUnsafe('<xsl:copy>');
	}

	/**
	* @testdox checkUnsafe() throws an exception if the template contains a <?php instruction
	* @expectedException s9e\TextFormatter\Configurator\Exceptions\UnsafeTemplateException
	* @expectedExceptionMessage PHP tags are not allowed
	*/
	public function testPHPTag()
	{
		TemplateChecker::checkUnsafe('<x><?php ?></x>');
	}

	/**
	* @testdox checkUnsafe() throws an exception if the template contains a <?PHP instruction
	* @expectedException s9e\TextFormatter\Configurator\Exceptions\UnsafeTemplateException
	* @expectedExceptionMessage PHP tags are not allowed
	*/
	public function testPHPTagCaseInsensitive()
	{
		TemplateChecker::checkUnsafe('<x><?PHP ?></x>');
	}

	/**
	* @testdox checkUnsafe() throws an exception if an element has an "use-attribute-sets" attribute
	* @expectedException s9e\TextFormatter\Configurator\Exceptions\UnsafeTemplateException
	* @expectedExceptionMessage Cannot assess the safety of attribute sets
	*/
	public function testAttributeSet()
	{
		TemplateChecker::checkUnsafe('<b use-attribute-sets="foo"/>');
	}

	/**
	* @testdox Not safe: <x:element name="script" xmlns:x="http://www.w3.org/1999/XSL/Transform"><xsl:apply-templates/></x:element>
	* @expectedException s9e\TextFormatter\Configurator\Exceptions\UnsafeTemplateException
	* @expectedExceptionMessage A dynamically generated 'script' element lets unfiltered data through
	*/
	public function testCustomNamespacePrefix()
	{
		TemplateChecker::checkUnsafe('<x:element name="script" xmlns:x="http://www.w3.org/1999/XSL/Transform"><xsl:apply-templates/></x:element>');
	}

	/**
	* @testdox Not safe: <element name="script" xmlns="http://www.w3.org/1999/XSL/Transform"><apply-templates/></element>
	* @expectedException s9e\TextFormatter\Configurator\Exceptions\UnsafeTemplateException
	* @expectedExceptionMessage A dynamically generated 'script' element lets unfiltered data through
	*/
	public function testDefaultNamespace()
	{
		TemplateChecker::checkUnsafe('<element name="script" xmlns="http://www.w3.org/1999/XSL/Transform"><apply-templates/></element>');
	}

	/**
	* @testdox Safe if attribute 'email' has filter '#email': <a href="mailto:{@email}"/>
	*/
	public function testMailto()
	{
		$this->checkUnsafe(
			'<a href="mailto:{@email}"/>',
			NULL,
			array('attributes' => array('email' => array('filterChain' => array('#email'))))
		);
	}

	/**
	* @testdox Safe if attribute 'email' has filter '#email': <a href="mailto:{@email}?subject=foo"/>
	*/
	public function testMailtoSubject()
	{
		$this->checkUnsafe(
			'<a href="mailto:{@email}?subject=foo"/>',
			NULL,
			array('attributes' => array('email' => array('filterChain' => array('#email'))))
		);
	}

	/**
	* @testdox Unsafe even if attribute 'email' has filter '#email': <a href="http://{@email}"/>
	* @expectedException s9e\TextFormatter\Configurator\Exceptions\UnsafeTemplateException
	* @expectedExceptionMessage Attribute 'email' is not properly filtered to be used in URL
	*/
	public function testMailtoUnsafe()
	{
		$this->checkUnsafe(
			'<a href="http://{@email}"/>',
			NULL,
			array('attributes' => array('email' => array('filterChain' => array('#email'))))
		);
	}

	// Start of content generated by ../../../scripts/patchTemplateCheckerTest.php
	/**
	* @testdox Not safe: <embed src="{@url}"/>
	*/
	public function testCheckUnsafeFFEA6CBF()
	{
		$this->checkUnsafe(
			'<embed src="{@url}"/>',
			"The template contains a 'embed' element with a non-fixed URL"
		);
	}

	/**
	* @testdox Not safe: <iframe src="{@url}"/>
	*/
	public function testCheckUnsafeA56D0DBC()
	{
		$this->checkUnsafe(
			'<iframe src="{@url}"/>',
			"The template contains a 'iframe' element with a non-fixed URL"
		);
	}

	/**
	* @testdox Not safe: <object data="{@url}"/>
	*/
	public function testCheckUnsafe200651EB()
	{
		$this->checkUnsafe(
			'<object data="{@url}"/>',
			"The template contains a 'object' element with a non-fixed URL"
		);
	}

	/**
	* @testdox Not safe: <script src="{@url}"/>
	*/
	public function testCheckUnsafeFDDAD6DB()
	{
		$this->checkUnsafe(
			'<script src="{@url}"/>',
			"The template contains a 'script' element with a non-fixed URL"
		);
	}

	/**
	* @testdox Not safe if attribute 'src' has filter '#url': <script src="{@url}"/>
	*/
	public function testCheckUnsafeD8BB6D82()
	{
		$this->checkUnsafe(
			'<script src="{@url}"/>',
			"The template contains a 'script' element with a non-fixed URL",
			array('attributes' => array('src' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Not safe: <script src="http://{@foo}"/>
	*/
	public function testCheckUnsafe4B4CB598()
	{
		$this->checkUnsafe(
			'<script src="http://{@foo}"/>',
			"The template contains a 'script' element with a non-fixed URL"
		);
	}

	/**
	* @testdox Safe if attribute 'id' has filter '#number': <script src="https://gist.github.com/{@id}.js"/>
	*/
	public function testCheckUnsafe6C30CE54()
	{
		$this->checkUnsafe(
			'<script src="https://gist.github.com/{@id}.js"/>',
			NULL,
			array('attributes' => array('id' => array('filterChain' => array('#number'))))
		);
	}

	/**
	* @testdox Not safe: <SCRIPT src="{@url}"/>
	*/
	public function testCheckUnsafe22C6B53D()
	{
		$this->checkUnsafe(
			'<SCRIPT src="{@url}"/>',
			"The template contains a 'script' element with a non-fixed URL attribute 'src'"
		);
	}

	/**
	* @testdox Not safe: <script SRC="{@url}"/>
	*/
	public function testCheckUnsafe4C83A1C2()
	{
		$this->checkUnsafe(
			'<script SRC="{@url}"/>',
			"The template contains a 'script' element with a non-fixed URL attribute 'src'"
		);
	}

	/**
	* @testdox Not safe: <script><xsl:attribute name="src"><xsl:value-of select="@url"/><?dont-optimize?></xsl:attribute></script>
	*/
	public function testCheckUnsafe959E6486()
	{
		$this->checkUnsafe(
			'<script><xsl:attribute name="src"><xsl:value-of select="@url"/><?dont-optimize?></xsl:attribute></script>',
			"The template contains a 'script' element with a dynamically generated 'src' attribute that does not use a fixed URL"
		);
	}

	/**
	* @testdox Not safe: <script><xsl:attribute name="SRC"><xsl:value-of select="@url"/><?dont-optimize?></xsl:attribute></script>
	*/
	public function testCheckUnsafeB8B19B4E()
	{
		$this->checkUnsafe(
			'<script><xsl:attribute name="SRC"><xsl:value-of select="@url"/><?dont-optimize?></xsl:attribute></script>',
			"The template contains a 'script' element with a dynamically generated 'src' attribute that does not use a fixed URL"
		);
	}

	/**
	* @testdox Safe: <script><xsl:attribute name="src">http://example.org/legit.js<?dont-optimize?></xsl:attribute></script>
	*/
	public function testCheckUnsafe9C1DD25F()
	{
		$this->checkUnsafe(
			'<script><xsl:attribute name="src">http://example.org/legit.js<?dont-optimize?></xsl:attribute></script>'
		);
	}

	/**
	* @testdox Safe: <script src="http://example.org/legit.js"><xsl:attribute name="id"><xsl:value-of select="foo"/><?dont-optimize?></xsl:attribute></script>
	*/
	public function testCheckUnsafeF8806A69()
	{
		$this->checkUnsafe(
			'<script src="http://example.org/legit.js"><xsl:attribute name="id"><xsl:value-of select="foo"/><?dont-optimize?></xsl:attribute></script>'
		);
	}

	/**
	* @testdox Not safe: <script src="http://example.org/legit.js"><xsl:attribute name="src"><xsl:value-of select="@hax"/><?dont-optimize?></xsl:attribute></script>
	*/
	public function testCheckUnsafe1A457E75()
	{
		$this->checkUnsafe(
			'<script src="http://example.org/legit.js"><xsl:attribute name="src"><xsl:value-of select="@hax"/><?dont-optimize?></xsl:attribute></script>',
			"The template contains a 'script' element with a dynamically generated 'src' attribute that does not use a fixed URL"
		);
	}

	/**
	* @testdox Not safe: <xsl:element name="script"><xsl:attribute name="src"><xsl:value-of select="@url"/><?dont-optimize?></xsl:attribute></xsl:element>
	*/
	public function testCheckUnsafeF6856A91()
	{
		$this->checkUnsafe(
			'<xsl:element name="script"><xsl:attribute name="src"><xsl:value-of select="@url"/><?dont-optimize?></xsl:attribute></xsl:element>',
			"The template contains a 'script' element with a dynamically generated 'src' attribute that does not use a fixed URL"
		);
	}

	/**
	* @testdox Not safe: <xsl:element name="SCRIPT"><xsl:attribute name="src"><xsl:value-of select="@url"/><?dont-optimize?></xsl:attribute></xsl:element>
	*/
	public function testCheckUnsafe5C2DA78D()
	{
		$this->checkUnsafe(
			'<xsl:element name="SCRIPT"><xsl:attribute name="src"><xsl:value-of select="@url"/><?dont-optimize?></xsl:attribute></xsl:element>',
			"The template contains a 'script' element with a dynamically generated 'src' attribute that does not use a fixed URL"
		);
	}

	/**
	* @testdox Not safe: <object><param name="movie" value="{@url}"/></object>
	*/
	public function testCheckUnsafe75997FF6()
	{
		$this->checkUnsafe(
			'<object><param name="movie" value="{@url}"/></object>',
			"The template contains a 'param' element with a non-fixed URL attribute 'value'"
		);
	}

	/**
	* @testdox Not safe: <OBJECT><PARAM NAME="MOVIE" VALUE="{@url}"/></OBJECT>
	*/
	public function testCheckUnsafe87C8D460()
	{
		$this->checkUnsafe(
			'<OBJECT><PARAM NAME="MOVIE" VALUE="{@url}"/></OBJECT>',
			"The template contains a 'param' element with a non-fixed URL attribute 'value'"
		);
	}

	/**
	* @testdox Not safe: <b disable-output-escaping="1"/>
	*/
	public function testCheckUnsafeCCAC3746()
	{
		$this->checkUnsafe(
			'<b disable-output-escaping="1"/>',
			"The template contains a 'disable-output-escaping' attribute"
		);
	}

	/**
	* @testdox Not safe: <xsl:copy/>
	*/
	public function testCheckUnsafe60753852()
	{
		$this->checkUnsafe(
			'<xsl:copy/>',
			"Cannot assess the safety of an 'xsl:copy' element"
		);
	}

	/**
	* @testdox Not safe: <b><xsl:copy-of select="@onclick"/></b>
	*/
	public function testCheckUnsafeC19FCB6D()
	{
		$this->checkUnsafe(
			'<b><xsl:copy-of select="@onclick"/></b>',
			"Undefined attribute 'onclick'"
		);
	}

	/**
	* @testdox Not safe: <b><xsl:copy-of select=" @ onclick "/></b>
	*/
	public function testCheckUnsafeE26527B5()
	{
		$this->checkUnsafe(
			'<b><xsl:copy-of select=" @ onclick "/></b>',
			"Undefined attribute 'onclick'"
		);
	}

	/**
	* @testdox Safe: <b><xsl:copy-of select="@title"/></b>
	*/
	public function testCheckUnsafe990F4294()
	{
		$this->checkUnsafe(
			'<b><xsl:copy-of select="@title"/></b>'
		);
	}

	/**
	* @testdox Safe: <b><xsl:copy-of select=" @ title "/></b>
	*/
	public function testCheckUnsafe358E72E5()
	{
		$this->checkUnsafe(
			'<b><xsl:copy-of select=" @ title "/></b>'
		);
	}

	/**
	* @testdox Not safe if attribute 'href' has no filter: <a><xsl:copy-of select="@href"/></a>
	*/
	public function testCheckUnsafeE6B9D02C()
	{
		$this->checkUnsafe(
			'<a><xsl:copy-of select="@href"/></a>',
			"Attribute 'href' is not properly filtered to be used in URL",
			array('attributes' => array('href' => array()))
		);
	}

	/**
	* @testdox Safe if attribute 'href' has filter '#url': <a><xsl:copy-of select="@href"/></a>
	*/
	public function testCheckUnsafeFE9871D1()
	{
		$this->checkUnsafe(
			'<a><xsl:copy-of select="@href"/></a>',
			NULL,
			array('attributes' => array('href' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Not safe: <xsl:copy-of select="script"/>
	*/
	public function testCheckUnsafeC8E8CC43()
	{
		$this->checkUnsafe(
			'<xsl:copy-of select="script"/>',
			"Cannot assess 'xsl:copy-of' select expression 'script' to be safe"
		);
	}

	/**
	* @testdox Not safe: <xsl:copy-of select=" script "/>
	*/
	public function testCheckUnsafe10D2139E()
	{
		$this->checkUnsafe(
			'<xsl:copy-of select=" script "/>',
			"Cannot assess 'xsl:copy-of' select expression 'script' to be safe"
		);
	}

	/**
	* @testdox Not safe: <xsl:copy-of select="parent::*"/>
	*/
	public function testCheckUnsafe1BDDD975()
	{
		$this->checkUnsafe(
			'<xsl:copy-of select="parent::*"/>',
			"Cannot assess 'xsl:copy-of' select expression 'parent::*' to be safe"
		);
	}

	/**
	* @testdox Not safe: <script><xsl:apply-templates/></script>
	*/
	public function testCheckUnsafe87044075()
	{
		$this->checkUnsafe(
			'<script><xsl:apply-templates/></script>',
			"A 'script' element lets unfiltered data through"
		);
	}

	/**
	* @testdox Not safe: <script><xsl:apply-templates select="st"/></script>
	*/
	public function testCheckUnsafeC968EED0()
	{
		$this->checkUnsafe(
			'<script><xsl:apply-templates select="st"/></script>',
			"Cannot assess the safety of 'xsl:apply-templates' select expression 'st'"
		);
	}

	/**
	* @testdox Not safe: <script><xsl:if test="1"><xsl:apply-templates/></xsl:if></script>
	*/
	public function testCheckUnsafeCC87BEB3()
	{
		$this->checkUnsafe(
			'<script><xsl:if test="1"><xsl:apply-templates/></xsl:if></script>',
			"A 'script' element lets unfiltered data through"
		);
	}

	/**
	* @testdox Not safe: <script><xsl:value-of select="st"/></script>
	*/
	public function testCheckUnsafe5D562F28()
	{
		$this->checkUnsafe(
			'<script><xsl:value-of select="st"/></script>',
			"Cannot assess the safety of XPath expression 'st'"
		);
	}

	/**
	* @testdox Not safe: <script><xsl:value-of select="@foo"/></script>
	*/
	public function testCheckUnsafeAA242A38()
	{
		$this->checkUnsafe(
			'<script><xsl:value-of select="@foo"/></script>',
			"Undefined attribute 'foo'"
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <script><xsl:value-of select="@foo"/></script>
	*/
	public function testCheckUnsafeBD7323B9()
	{
		$this->checkUnsafe(
			'<script><xsl:value-of select="@foo"/></script>',
			"Attribute 'foo' is not properly filtered to be used in JS",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <script><xsl:if test="1"><xsl:value-of select="@foo"/></xsl:if></script>
	*/
	public function testCheckUnsafe648A7C72()
	{
		$this->checkUnsafe(
			'<script><xsl:if test="1"><xsl:value-of select="@foo"/></xsl:if></script>',
			"Attribute 'foo' is not properly filtered to be used in JS",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <xsl:element name="script"><xsl:value-of select="@foo"/></xsl:element>
	*/
	public function testCheckUnsafeD7E78277()
	{
		$this->checkUnsafe(
			'<xsl:element name="script"><xsl:value-of select="@foo"/></xsl:element>',
			"Attribute 'foo' is not properly filtered to be used in JS",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <xsl:element name="SCRIPT"><xsl:value-of select="@foo"/></xsl:element>
	*/
	public function testCheckUnsafeF7D14089()
	{
		$this->checkUnsafe(
			'<xsl:element name="SCRIPT"><xsl:value-of select="@foo"/></xsl:element>',
			"Attribute 'foo' is not properly filtered to be used in JS",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has filter 'json_encode': <script><xsl:for-each select="/*"><xsl:value-of select="@foo"/></xsl:for-each></script>
	*/
	public function testCheckUnsafeA9307816()
	{
		$this->checkUnsafe(
			'<script><xsl:for-each select="/*"><xsl:value-of select="@foo"/></xsl:for-each></script>',
			"Cannot evaluate context node due to 'xsl:for-each'",
			array('attributes' => array('foo' => array('filterChain' => array('json_encode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'json_encode': <script><xsl:value-of select="@foo"/></script>
	*/
	public function testCheckUnsafe6638EC01()
	{
		$this->checkUnsafe(
			'<script><xsl:value-of select="@foo"/></script>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('json_encode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'rawurlencode': <script><xsl:value-of select="@foo"/></script>
	*/
	public function testCheckUnsafe80E31E96()
	{
		$this->checkUnsafe(
			'<script><xsl:value-of select="@foo"/></script>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('rawurlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'strtotime': <script><xsl:value-of select="@foo"/></script>
	*/
	public function testCheckUnsafe3684D9D3()
	{
		$this->checkUnsafe(
			'<script><xsl:value-of select="@foo"/></script>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('strtotime'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'urlencode': <script><xsl:value-of select="@foo"/></script>
	*/
	public function testCheckUnsafe3E82294D()
	{
		$this->checkUnsafe(
			'<script><xsl:value-of select="@foo"/></script>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('urlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#url': <script><xsl:value-of select="@foo"/></script>
	*/
	public function testCheckUnsafe66FA78F6()
	{
		$this->checkUnsafe(
			'<script><xsl:value-of select="@foo"/></script>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#int': <script><xsl:value-of select="@foo"/></script>
	*/
	public function testCheckUnsafeBEC2826B()
	{
		$this->checkUnsafe(
			'<script><xsl:value-of select="@foo"/></script>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#int'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#uint': <script><xsl:value-of select="@foo"/></script>
	*/
	public function testCheckUnsafe58430C01()
	{
		$this->checkUnsafe(
			'<script><xsl:value-of select="@foo"/></script>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#uint'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#float': <script><xsl:value-of select="@foo"/></script>
	*/
	public function testCheckUnsafe196B1007()
	{
		$this->checkUnsafe(
			'<script><xsl:value-of select="@foo"/></script>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#float'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#range': <script><xsl:value-of select="@foo"/></script>
	*/
	public function testCheckUnsafeF128A882()
	{
		$this->checkUnsafe(
			'<script><xsl:value-of select="@foo"/></script>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#range'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#number': <script><xsl:value-of select="@foo"/></script>
	*/
	public function testCheckUnsafe585E44A6()
	{
		$this->checkUnsafe(
			'<script><xsl:value-of select="@foo"/></script>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#number'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#simpletext': <script><xsl:value-of select="@foo"/></script>
	*/
	public function testCheckUnsafe61A72488()
	{
		$this->checkUnsafe(
			'<script><xsl:value-of select="@foo"/></script>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#simpletext'))))
		);
	}

	/**
	* @testdox Not safe: <style><xsl:apply-templates/></style>
	*/
	public function testCheckUnsafe9332F4DA()
	{
		$this->checkUnsafe(
			'<style><xsl:apply-templates/></style>',
			"A 'style' element lets unfiltered data through"
		);
	}

	/**
	* @testdox Not safe: <style><xsl:apply-templates select="st"/></style>
	*/
	public function testCheckUnsafeE7A11344()
	{
		$this->checkUnsafe(
			'<style><xsl:apply-templates select="st"/></style>',
			"Cannot assess the safety of 'xsl:apply-templates' select expression 'st'"
		);
	}

	/**
	* @testdox Not safe: <style><xsl:if test="1"><xsl:apply-templates/></xsl:if></style>
	*/
	public function testCheckUnsafe0F7C3E8F()
	{
		$this->checkUnsafe(
			'<style><xsl:if test="1"><xsl:apply-templates/></xsl:if></style>',
			"A 'style' element lets unfiltered data through"
		);
	}

	/**
	* @testdox Not safe: <style><xsl:value-of select="st"/></style>
	*/
	public function testCheckUnsafeF4114812()
	{
		$this->checkUnsafe(
			'<style><xsl:value-of select="st"/></style>',
			"Cannot assess the safety of XPath expression 'st'"
		);
	}

	/**
	* @testdox Not safe: <style><xsl:value-of select="@foo"/></style>
	*/
	public function testCheckUnsafeFD7FAE5C()
	{
		$this->checkUnsafe(
			'<style><xsl:value-of select="@foo"/></style>',
			"Undefined attribute 'foo'"
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <style><xsl:value-of select="@foo"/></style>
	*/
	public function testCheckUnsafe2BEA39BA()
	{
		$this->checkUnsafe(
			'<style><xsl:value-of select="@foo"/></style>',
			"Attribute 'foo' is not properly filtered to be used in CSS",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <style><xsl:if test="1"><xsl:value-of select="@foo"/></xsl:if></style>
	*/
	public function testCheckUnsafe489BADA7()
	{
		$this->checkUnsafe(
			'<style><xsl:if test="1"><xsl:value-of select="@foo"/></xsl:if></style>',
			"Attribute 'foo' is not properly filtered to be used in CSS",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <xsl:element name="style"><xsl:value-of select="@foo"/></xsl:element>
	*/
	public function testCheckUnsafeFC0D6B8F()
	{
		$this->checkUnsafe(
			'<xsl:element name="style"><xsl:value-of select="@foo"/></xsl:element>',
			"Attribute 'foo' is not properly filtered to be used in CSS",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <xsl:element name="STYLE"><xsl:value-of select="@foo"/></xsl:element>
	*/
	public function testCheckUnsafe9092B290()
	{
		$this->checkUnsafe(
			'<xsl:element name="STYLE"><xsl:value-of select="@foo"/></xsl:element>',
			"Attribute 'foo' is not properly filtered to be used in CSS",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has filter '#url': <style><xsl:for-each select="/*"><xsl:value-of select="@foo"/></xsl:for-each></style>
	*/
	public function testCheckUnsafeD5AD8427()
	{
		$this->checkUnsafe(
			'<style><xsl:for-each select="/*"><xsl:value-of select="@foo"/></xsl:for-each></style>',
			"Cannot evaluate context node due to 'xsl:for-each'",
			array('attributes' => array('foo' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#url': <style><xsl:value-of select="@foo"/></style>
	*/
	public function testCheckUnsafeA85C9010()
	{
		$this->checkUnsafe(
			'<style><xsl:value-of select="@foo"/></style>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#int': <style><xsl:value-of select="@foo"/></style>
	*/
	public function testCheckUnsafe70646A8D()
	{
		$this->checkUnsafe(
			'<style><xsl:value-of select="@foo"/></style>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#int'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#uint': <style><xsl:value-of select="@foo"/></style>
	*/
	public function testCheckUnsafe11E4EDA4()
	{
		$this->checkUnsafe(
			'<style><xsl:value-of select="@foo"/></style>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#uint'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#float': <style><xsl:value-of select="@foo"/></style>
	*/
	public function testCheckUnsafeBF9EE081()
	{
		$this->checkUnsafe(
			'<style><xsl:value-of select="@foo"/></style>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#float'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#color': <style><xsl:value-of select="@foo"/></style>
	*/
	public function testCheckUnsafe5B459886()
	{
		$this->checkUnsafe(
			'<style><xsl:value-of select="@foo"/></style>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#color'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#range': <style><xsl:value-of select="@foo"/></style>
	*/
	public function testCheckUnsafe57DD5804()
	{
		$this->checkUnsafe(
			'<style><xsl:value-of select="@foo"/></style>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#range'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#number': <style><xsl:value-of select="@foo"/></style>
	*/
	public function testCheckUnsafe5C239743()
	{
		$this->checkUnsafe(
			'<style><xsl:value-of select="@foo"/></style>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#number'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#simpletext': <style><xsl:value-of select="@foo"/></style>
	*/
	public function testCheckUnsafe8D374457()
	{
		$this->checkUnsafe(
			'<style><xsl:value-of select="@foo"/></style>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#simpletext'))))
		);
	}

	/**
	* @testdox Not safe: <xsl:element name="{FOO}"><xsl:apply-templates/></xsl:element>
	*/
	public function testCheckUnsafe95E78AB4()
	{
		$this->checkUnsafe(
			'<xsl:element name="{FOO}"><xsl:apply-templates/></xsl:element>',
			"Cannot assess 'xsl:element' name '{FOO}'"
		);
	}

	/**
	* @testdox Not safe: <b><xsl:attribute name="onclick"><xsl:apply-templates/></xsl:attribute></b>
	*/
	public function testCheckUnsafeCC20E4F6()
	{
		$this->checkUnsafe(
			'<b><xsl:attribute name="onclick"><xsl:apply-templates/></xsl:attribute></b>',
			"A dynamically generated 'onclick' attribute lets unfiltered data through"
		);
	}

	/**
	* @testdox Not safe: <b><xsl:attribute name="ONCLICK"><xsl:apply-templates/></xsl:attribute></b>
	*/
	public function testCheckUnsafe31C90A06()
	{
		$this->checkUnsafe(
			'<b><xsl:attribute name="ONCLICK"><xsl:apply-templates/></xsl:attribute></b>',
			"A dynamically generated 'ONCLICK' attribute lets unfiltered data through"
		);
	}

	/**
	* @testdox Not safe: <b onclick=""><xsl:attribute name="onclick"><xsl:apply-templates/></xsl:attribute></b>
	*/
	public function testCheckUnsafe6519C7B2()
	{
		$this->checkUnsafe(
			'<b onclick=""><xsl:attribute name="onclick"><xsl:apply-templates/></xsl:attribute></b>',
			"A dynamically generated 'onclick' attribute lets unfiltered data through"
		);
	}

	/**
	* @testdox Not safe: <b><xsl:if test="1"><xsl:attribute name="onclick"><xsl:value-of select="@foo"/></xsl:attribute></xsl:if></b>
	*/
	public function testCheckUnsafeF4D2CDD1()
	{
		$this->checkUnsafe(
			'<b><xsl:if test="1"><xsl:attribute name="onclick"><xsl:value-of select="@foo"/></xsl:attribute></xsl:if></b>',
			"Undefined attribute 'foo'"
		);
	}

	/**
	* @testdox Not safe: <b><xsl:attribute name="onclick"><xsl:if test="1"><xsl:value-of select="@foo"/></xsl:if></xsl:attribute></b>
	*/
	public function testCheckUnsafeCF6CEF14()
	{
		$this->checkUnsafe(
			'<b><xsl:attribute name="onclick"><xsl:if test="1"><xsl:value-of select="@foo"/></xsl:if></xsl:attribute></b>',
			"Undefined attribute 'foo'"
		);
	}

	/**
	* @testdox Not safe: <b onclick="{@foo}"/>
	*/
	public function testCheckUnsafe7A1C2C9E()
	{
		$this->checkUnsafe(
			'<b onclick="{@foo}"/>',
			"Undefined attribute 'foo'"
		);
	}

	/**
	* @testdox Not safe: <b ONCLICK="{@foo}"/>
	*/
	public function testCheckUnsafe3DB3E070()
	{
		$this->checkUnsafe(
			'<b ONCLICK="{@foo}"/>',
			"Undefined attribute 'foo'"
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <b style="{@foo}"/>
	*/
	public function testCheckUnsafeCFE3D31C()
	{
		$this->checkUnsafe(
			'<b style="{@foo}"/>',
			"Attribute 'foo' is not properly filtered to be used in CSS",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#url': <b style="{@foo}"/>
	*/
	public function testCheckUnsafe0A9E5F7B()
	{
		$this->checkUnsafe(
			'<b style="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#int': <b style="{@foo}"/>
	*/
	public function testCheckUnsafeD2A6A5E6()
	{
		$this->checkUnsafe(
			'<b style="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#int'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#uint': <b style="{@foo}"/>
	*/
	public function testCheckUnsafeCB2697BB()
	{
		$this->checkUnsafe(
			'<b style="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#uint'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#float': <b style="{@foo}"/>
	*/
	public function testCheckUnsafe324C2F0E()
	{
		$this->checkUnsafe(
			'<b style="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#float'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#color': <b style="{@foo}"/>
	*/
	public function testCheckUnsafeD6975709()
	{
		$this->checkUnsafe(
			'<b style="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#color'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#range': <b style="{@foo}"/>
	*/
	public function testCheckUnsafeDA0F978B()
	{
		$this->checkUnsafe(
			'<b style="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#range'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#number': <b style="{@foo}"/>
	*/
	public function testCheckUnsafe21A9DB3D()
	{
		$this->checkUnsafe(
			'<b style="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#number'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#simpletext': <b style="{@foo}"/>
	*/
	public function testCheckUnsafe6C246491()
	{
		$this->checkUnsafe(
			'<b style="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#simpletext'))))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <b onclick="{@foo}"/>
	*/
	public function testCheckUnsafeF82217B5()
	{
		$this->checkUnsafe(
			'<b onclick="{@foo}"/>',
			"Attribute 'foo' is not properly filtered to be used in JS",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'json_encode': <b onclick="{@foo}"/>
	*/
	public function testCheckUnsafeDAE45009()
	{
		$this->checkUnsafe(
			'<b onclick="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('json_encode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'rawurlencode': <b onclick="{@foo}"/>
	*/
	public function testCheckUnsafe8E844A18()
	{
		$this->checkUnsafe(
			'<b onclick="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('rawurlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'strtotime': <b onclick="{@foo}"/>
	*/
	public function testCheckUnsafeC7200790()
	{
		$this->checkUnsafe(
			'<b onclick="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('strtotime'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'urlencode': <b onclick="{@foo}"/>
	*/
	public function testCheckUnsafeCF26F70E()
	{
		$this->checkUnsafe(
			'<b onclick="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('urlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#url': <b onclick="{@foo}"/>
	*/
	public function testCheckUnsafe47C79FE4()
	{
		$this->checkUnsafe(
			'<b onclick="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#int': <b onclick="{@foo}"/>
	*/
	public function testCheckUnsafe9FFF6579()
	{
		$this->checkUnsafe(
			'<b onclick="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#int'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#uint': <b onclick="{@foo}"/>
	*/
	public function testCheckUnsafeABDB40AE()
	{
		$this->checkUnsafe(
			'<b onclick="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#uint'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#float': <b onclick="{@foo}"/>
	*/
	public function testCheckUnsafe5FF13632()
	{
		$this->checkUnsafe(
			'<b onclick="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#float'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#range': <b onclick="{@foo}"/>
	*/
	public function testCheckUnsafeB7B28EB7()
	{
		$this->checkUnsafe(
			'<b onclick="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#range'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#number': <b onclick="{@foo}"/>
	*/
	public function testCheckUnsafe0EAB1AA3()
	{
		$this->checkUnsafe(
			'<b onclick="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#number'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#simpletext': <b onclick="{@foo}"/>
	*/
	public function testCheckUnsafeDD7B9880()
	{
		$this->checkUnsafe(
			'<b onclick="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#simpletext'))))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <b onanything="{@foo}"/>
	*/
	public function testCheckUnsafe55C38875()
	{
		$this->checkUnsafe(
			'<b onanything="{@foo}"/>',
			"Attribute 'foo' is not properly filtered to be used in JS",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'json_encode': <b onanything="{@foo}"/>
	*/
	public function testCheckUnsafe613418C4()
	{
		$this->checkUnsafe(
			'<b onanything="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('json_encode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'rawurlencode': <b onanything="{@foo}"/>
	*/
	public function testCheckUnsafe6BEA245D()
	{
		$this->checkUnsafe(
			'<b onanything="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('rawurlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'strtotime': <b onanything="{@foo}"/>
	*/
	public function testCheckUnsafeCBFD1A6C()
	{
		$this->checkUnsafe(
			'<b onanything="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('strtotime'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'urlencode': <b onanything="{@foo}"/>
	*/
	public function testCheckUnsafeC3FBEAF2()
	{
		$this->checkUnsafe(
			'<b onanything="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('urlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#url': <b onanything="{@foo}"/>
	*/
	public function testCheckUnsafeCC5BC677()
	{
		$this->checkUnsafe(
			'<b onanything="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#int': <b onanything="{@foo}"/>
	*/
	public function testCheckUnsafe14633CEA()
	{
		$this->checkUnsafe(
			'<b onanything="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#int'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#uint': <b onanything="{@foo}"/>
	*/
	public function testCheckUnsafeC2561E09()
	{
		$this->checkUnsafe(
			'<b onanything="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#uint'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#float': <b onanything="{@foo}"/>
	*/
	public function testCheckUnsafe172A8D27()
	{
		$this->checkUnsafe(
			'<b onanything="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#float'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#range': <b onanything="{@foo}"/>
	*/
	public function testCheckUnsafeFF6935A2()
	{
		$this->checkUnsafe(
			'<b onanything="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#range'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#number': <b onanything="{@foo}"/>
	*/
	public function testCheckUnsafe633E25F3()
	{
		$this->checkUnsafe(
			'<b onanything="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#number'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#simpletext': <b onanything="{@foo}"/>
	*/
	public function testCheckUnsafe66ABD04D()
	{
		$this->checkUnsafe(
			'<b onanything="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#simpletext'))))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <form action="{@foo}"/>
	*/
	public function testCheckUnsafe4545A54D()
	{
		$this->checkUnsafe(
			'<form action="{@foo}"/>',
			"Attribute 'foo' is not properly filtered to be used in URL",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'urlencode': <form action="{@foo}"/>
	*/
	public function testCheckUnsafeD213C6F9()
	{
		$this->checkUnsafe(
			'<form action="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('urlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'rawurlencode': <form action="{@foo}"/>
	*/
	public function testCheckUnsafe71AB45CE()
	{
		$this->checkUnsafe(
			'<form action="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('rawurlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#url': <form action="{@foo}"/>
	*/
	public function testCheckUnsafeF536BBFC()
	{
		$this->checkUnsafe(
			'<form action="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#id': <form action="{@foo}"/>
	*/
	public function testCheckUnsafe5C18A403()
	{
		$this->checkUnsafe(
			'<form action="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#id'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#int': <form action="{@foo}"/>
	*/
	public function testCheckUnsafe2D0E4161()
	{
		$this->checkUnsafe(
			'<form action="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#int'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#uint': <form action="{@foo}"/>
	*/
	public function testCheckUnsafeB80529DC()
	{
		$this->checkUnsafe(
			'<form action="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#uint'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#float': <form action="{@foo}"/>
	*/
	public function testCheckUnsafeE1E9F84B()
	{
		$this->checkUnsafe(
			'<form action="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#float'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#range': <form action="{@foo}"/>
	*/
	public function testCheckUnsafe09AA40CE()
	{
		$this->checkUnsafe(
			'<form action="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#range'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#number': <form action="{@foo}"/>
	*/
	public function testCheckUnsafe27CCCBF5()
	{
		$this->checkUnsafe(
			'<form action="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#number'))))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <q cite="{@foo}"/>
	*/
	public function testCheckUnsafe4BB1ACC7()
	{
		$this->checkUnsafe(
			'<q cite="{@foo}"/>',
			"Attribute 'foo' is not properly filtered to be used in URL",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'urlencode': <q cite="{@foo}"/>
	*/
	public function testCheckUnsafeE946770E()
	{
		$this->checkUnsafe(
			'<q cite="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('urlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'rawurlencode': <q cite="{@foo}"/>
	*/
	public function testCheckUnsafeD841BFC2()
	{
		$this->checkUnsafe(
			'<q cite="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('rawurlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#url': <q cite="{@foo}"/>
	*/
	public function testCheckUnsafeB7F930C1()
	{
		$this->checkUnsafe(
			'<q cite="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#id': <q cite="{@foo}"/>
	*/
	public function testCheckUnsafe210BF52A()
	{
		$this->checkUnsafe(
			'<q cite="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#id'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#int': <q cite="{@foo}"/>
	*/
	public function testCheckUnsafe6FC1CA5C()
	{
		$this->checkUnsafe(
			'<q cite="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#int'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#uint': <q cite="{@foo}"/>
	*/
	public function testCheckUnsafeE02FAA46()
	{
		$this->checkUnsafe(
			'<q cite="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#uint'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#float': <q cite="{@foo}"/>
	*/
	public function testCheckUnsafeF16BA892()
	{
		$this->checkUnsafe(
			'<q cite="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#float'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#range': <q cite="{@foo}"/>
	*/
	public function testCheckUnsafe19281017()
	{
		$this->checkUnsafe(
			'<q cite="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#range'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#number': <q cite="{@foo}"/>
	*/
	public function testCheckUnsafeD8D323D5()
	{
		$this->checkUnsafe(
			'<q cite="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#number'))))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <xbject data="{@foo}"/>
	*/
	public function testCheckUnsafe37A16260()
	{
		$this->checkUnsafe(
			'<xbject data="{@foo}"/>',
			"Attribute 'foo' is not properly filtered to be used in URL",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'urlencode': <xbject data="{@foo}"/>
	*/
	public function testCheckUnsafe52EEA27B()
	{
		$this->checkUnsafe(
			'<xbject data="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('urlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'rawurlencode': <xbject data="{@foo}"/>
	*/
	public function testCheckUnsafe358F4452()
	{
		$this->checkUnsafe(
			'<xbject data="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('rawurlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#url': <xbject data="{@foo}"/>
	*/
	public function testCheckUnsafeAA86F794()
	{
		$this->checkUnsafe(
			'<xbject data="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#id': <xbject data="{@foo}"/>
	*/
	public function testCheckUnsafeE9DCC43A()
	{
		$this->checkUnsafe(
			'<xbject data="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#id'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#int': <xbject data="{@foo}"/>
	*/
	public function testCheckUnsafe72BE0D09()
	{
		$this->checkUnsafe(
			'<xbject data="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#int'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#uint': <xbject data="{@foo}"/>
	*/
	public function testCheckUnsafeFB3370FA()
	{
		$this->checkUnsafe(
			'<xbject data="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#uint'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#float': <xbject data="{@foo}"/>
	*/
	public function testCheckUnsafe33A74BEF()
	{
		$this->checkUnsafe(
			'<xbject data="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#float'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#range': <xbject data="{@foo}"/>
	*/
	public function testCheckUnsafeDBE4F36A()
	{
		$this->checkUnsafe(
			'<xbject data="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#range'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#number': <xbject data="{@foo}"/>
	*/
	public function testCheckUnsafeF6A5E2B7()
	{
		$this->checkUnsafe(
			'<xbject data="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#number'))))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <input formaction="{@foo}"/>
	*/
	public function testCheckUnsafe8822BDBC()
	{
		$this->checkUnsafe(
			'<input formaction="{@foo}"/>',
			"Attribute 'foo' is not properly filtered to be used in URL",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'urlencode': <input formaction="{@foo}"/>
	*/
	public function testCheckUnsafe5CD442A0()
	{
		$this->checkUnsafe(
			'<input formaction="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('urlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'rawurlencode': <input formaction="{@foo}"/>
	*/
	public function testCheckUnsafeAF295914()
	{
		$this->checkUnsafe(
			'<input formaction="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('rawurlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#url': <input formaction="{@foo}"/>
	*/
	public function testCheckUnsafeC2547D2A()
	{
		$this->checkUnsafe(
			'<input formaction="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#id': <input formaction="{@foo}"/>
	*/
	public function testCheckUnsafeE6E582E8()
	{
		$this->checkUnsafe(
			'<input formaction="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#id'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#int': <input formaction="{@foo}"/>
	*/
	public function testCheckUnsafe1A6C87B7()
	{
		$this->checkUnsafe(
			'<input formaction="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#int'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#uint': <input formaction="{@foo}"/>
	*/
	public function testCheckUnsafeD7823CFB()
	{
		$this->checkUnsafe(
			'<input formaction="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#uint'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#float': <input formaction="{@foo}"/>
	*/
	public function testCheckUnsafe448CCA35()
	{
		$this->checkUnsafe(
			'<input formaction="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#float'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#range': <input formaction="{@foo}"/>
	*/
	public function testCheckUnsafeACCF72B0()
	{
		$this->checkUnsafe(
			'<input formaction="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#range'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#number': <input formaction="{@foo}"/>
	*/
	public function testCheckUnsafe90D4F2FC()
	{
		$this->checkUnsafe(
			'<input formaction="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#number'))))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <a href="{@foo}"/>
	*/
	public function testCheckUnsafeFF6EB164()
	{
		$this->checkUnsafe(
			'<a href="{@foo}"/>',
			"Attribute 'foo' is not properly filtered to be used in URL",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'urlencode': <a href="{@foo}"/>
	*/
	public function testCheckUnsafe56410B36()
	{
		$this->checkUnsafe(
			'<a href="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('urlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'rawurlencode': <a href="{@foo}"/>
	*/
	public function testCheckUnsafeA4AAC662()
	{
		$this->checkUnsafe(
			'<a href="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('rawurlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#url': <a href="{@foo}"/>
	*/
	public function testCheckUnsafe8DB3BDCC()
	{
		$this->checkUnsafe(
			'<a href="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#id': <a href="{@foo}"/>
	*/
	public function testCheckUnsafeDED7364B()
	{
		$this->checkUnsafe(
			'<a href="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#id'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#int': <a href="{@foo}"/>
	*/
	public function testCheckUnsafe558B4751()
	{
		$this->checkUnsafe(
			'<a href="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#int'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#uint': <a href="{@foo}"/>
	*/
	public function testCheckUnsafe9EA49C76()
	{
		$this->checkUnsafe(
			'<a href="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#uint'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#float': <a href="{@foo}"/>
	*/
	public function testCheckUnsafeD7CC1308()
	{
		$this->checkUnsafe(
			'<a href="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#float'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#range': <a href="{@foo}"/>
	*/
	public function testCheckUnsafe3F8FAB8D()
	{
		$this->checkUnsafe(
			'<a href="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#range'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#number': <a href="{@foo}"/>
	*/
	public function testCheckUnsafeC82FFE34()
	{
		$this->checkUnsafe(
			'<a href="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#number'))))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <html manifest="{@foo}"/>
	*/
	public function testCheckUnsafeF2542B4A()
	{
		$this->checkUnsafe(
			'<html manifest="{@foo}"/>',
			"Attribute 'foo' is not properly filtered to be used in URL",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'urlencode': <html manifest="{@foo}"/>
	*/
	public function testCheckUnsafe264FD1D8()
	{
		$this->checkUnsafe(
			'<html manifest="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('urlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'rawurlencode': <html manifest="{@foo}"/>
	*/
	public function testCheckUnsafeDC921C3D()
	{
		$this->checkUnsafe(
			'<html manifest="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('rawurlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#url': <html manifest="{@foo}"/>
	*/
	public function testCheckUnsafe211F359B()
	{
		$this->checkUnsafe(
			'<html manifest="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#id': <html manifest="{@foo}"/>
	*/
	public function testCheckUnsafeCEA62160()
	{
		$this->checkUnsafe(
			'<html manifest="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#id'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#int': <html manifest="{@foo}"/>
	*/
	public function testCheckUnsafeF927CF06()
	{
		$this->checkUnsafe(
			'<html manifest="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#int'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#uint': <html manifest="{@foo}"/>
	*/
	public function testCheckUnsafe6B07F4A9()
	{
		$this->checkUnsafe(
			'<html manifest="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#uint'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#float': <html manifest="{@foo}"/>
	*/
	public function testCheckUnsafeC1557F25()
	{
		$this->checkUnsafe(
			'<html manifest="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#float'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#range': <html manifest="{@foo}"/>
	*/
	public function testCheckUnsafe2916C7A0()
	{
		$this->checkUnsafe(
			'<html manifest="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#range'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#number': <html manifest="{@foo}"/>
	*/
	public function testCheckUnsafe8DE63B2D()
	{
		$this->checkUnsafe(
			'<html manifest="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#number'))))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <video poster="{@foo}"/>
	*/
	public function testCheckUnsafe90D5A413()
	{
		$this->checkUnsafe(
			'<video poster="{@foo}"/>',
			"Attribute 'foo' is not properly filtered to be used in URL",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'urlencode': <video poster="{@foo}"/>
	*/
	public function testCheckUnsafe3120DE12()
	{
		$this->checkUnsafe(
			'<video poster="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('urlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'rawurlencode': <video poster="{@foo}"/>
	*/
	public function testCheckUnsafeAF88A7CD()
	{
		$this->checkUnsafe(
			'<video poster="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('rawurlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#url': <video poster="{@foo}"/>
	*/
	public function testCheckUnsafe6541AB3E()
	{
		$this->checkUnsafe(
			'<video poster="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#id': <video poster="{@foo}"/>
	*/
	public function testCheckUnsafe9415F70C()
	{
		$this->checkUnsafe(
			'<video poster="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#id'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#int': <video poster="{@foo}"/>
	*/
	public function testCheckUnsafeBD7951A3()
	{
		$this->checkUnsafe(
			'<video poster="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#int'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#uint': <video poster="{@foo}"/>
	*/
	public function testCheckUnsafeCDFFFD50()
	{
		$this->checkUnsafe(
			'<video poster="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#uint'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#float': <video poster="{@foo}"/>
	*/
	public function testCheckUnsafe0592CD94()
	{
		$this->checkUnsafe(
			'<video poster="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#float'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#range': <video poster="{@foo}"/>
	*/
	public function testCheckUnsafeEDD17511()
	{
		$this->checkUnsafe(
			'<video poster="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#range'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#number': <video poster="{@foo}"/>
	*/
	public function testCheckUnsafe31447F85()
	{
		$this->checkUnsafe(
			'<video poster="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#number'))))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <img src="{@foo}"/>
	*/
	public function testCheckUnsafeF39CC4CF()
	{
		$this->checkUnsafe(
			'<img src="{@foo}"/>',
			"Attribute 'foo' is not properly filtered to be used in URL",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'urlencode': <img src="{@foo}"/>
	*/
	public function testCheckUnsafe4F706364()
	{
		$this->checkUnsafe(
			'<img src="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('urlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'rawurlencode': <img src="{@foo}"/>
	*/
	public function testCheckUnsafe215C34A1()
	{
		$this->checkUnsafe(
			'<img src="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('rawurlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#url': <img src="{@foo}"/>
	*/
	public function testCheckUnsafe7149BFB6()
	{
		$this->checkUnsafe(
			'<img src="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#id': <img src="{@foo}"/>
	*/
	public function testCheckUnsafe9D5D3010()
	{
		$this->checkUnsafe(
			'<img src="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#id'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#int': <img src="{@foo}"/>
	*/
	public function testCheckUnsafeA971452B()
	{
		$this->checkUnsafe(
			'<img src="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#int'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#uint': <img src="{@foo}"/>
	*/
	public function testCheckUnsafe2E88FE56()
	{
		$this->checkUnsafe(
			'<img src="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#uint'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#float': <img src="{@foo}"/>
	*/
	public function testCheckUnsafeEC121FA2()
	{
		$this->checkUnsafe(
			'<img src="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#float'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#range': <img src="{@foo}"/>
	*/
	public function testCheckUnsafe0451A727()
	{
		$this->checkUnsafe(
			'<img src="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#range'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#number': <img src="{@foo}"/>
	*/
	public function testCheckUnsafeFE176ACE()
	{
		$this->checkUnsafe(
			'<img src="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#number'))))
		);
	}

	/**
	* @testdox Not safe if attribute 'foo' has no filter: <img lowsrc="{@foo}"/>
	*/
	public function testCheckUnsafe2A2871AB()
	{
		$this->checkUnsafe(
			'<img lowsrc="{@foo}"/>',
			"Attribute 'foo' is not properly filtered to be used in URL",
			array('attributes' => array('foo' => array()))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'urlencode': <img lowsrc="{@foo}"/>
	*/
	public function testCheckUnsafe22EF91DE()
	{
		$this->checkUnsafe(
			'<img lowsrc="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('urlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter 'rawurlencode': <img lowsrc="{@foo}"/>
	*/
	public function testCheckUnsafe2009B6D1()
	{
		$this->checkUnsafe(
			'<img lowsrc="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('rawurlencode'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#url': <img lowsrc="{@foo}"/>
	*/
	public function testCheckUnsafe72F64F38()
	{
		$this->checkUnsafe(
			'<img lowsrc="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#id': <img lowsrc="{@foo}"/>
	*/
	public function testCheckUnsafe944FB292()
	{
		$this->checkUnsafe(
			'<img lowsrc="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#id'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#int': <img lowsrc="{@foo}"/>
	*/
	public function testCheckUnsafeAACEB5A5()
	{
		$this->checkUnsafe(
			'<img lowsrc="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#int'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#uint': <img lowsrc="{@foo}"/>
	*/
	public function testCheckUnsafe248BEF81()
	{
		$this->checkUnsafe(
			'<img lowsrc="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#uint'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#float': <img lowsrc="{@foo}"/>
	*/
	public function testCheckUnsafeF4AF5BC4()
	{
		$this->checkUnsafe(
			'<img lowsrc="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#float'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#range': <img lowsrc="{@foo}"/>
	*/
	public function testCheckUnsafe1CECE341()
	{
		$this->checkUnsafe(
			'<img lowsrc="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#range'))))
		);
	}

	/**
	* @testdox Safe if attribute 'foo' has filter '#number': <img lowsrc="{@foo}"/>
	*/
	public function testCheckUnsafe5ADE13E7()
	{
		$this->checkUnsafe(
			'<img lowsrc="{@foo}"/>',
			NULL,
			array('attributes' => array('foo' => array('filterChain' => array('#number'))))
		);
	}

	/**
	* @testdox Not safe: <b><xsl:attribute name="{FOO}"><xsl:apply-templates/></xsl:attribute></b>
	*/
	public function testCheckUnsafeA0040D8C()
	{
		$this->checkUnsafe(
			'<b><xsl:attribute name="{FOO}"><xsl:apply-templates/></xsl:attribute></b>',
			"Cannot assess 'xsl:attribute' name '{FOO}'"
		);
	}
	// End of content generated by ../../../scripts/patchTemplateCheckerTest.php

	protected function checkUnsafe($template, $exceptionMsg = null, array $tagOptions = array())
	{
		if (isset($exceptionMsg))
		{
			$this->setExpectedException(
				's9e\\TextFormatter\\Configurator\\Exceptions\\UnsafeTemplateException',
				$exceptionMsg
			);
		}

		TemplateChecker::checkUnsafe(
			TemplateOptimizer::optimize($template),
			new Tag($tagOptions)
		);
	}

	public function getUnsafeTemplatesTests()
	{
		return array_merge(
			$this->getUnsafeFixedUrlTests(),
			$this->getUnsafeDisableOutputEscapingTests(),
			$this->getUnsafeCopyNodesTests(),
			$this->getUnsafeContentTests()
		);
	}

	public function getUnsafeFixedUrlTests()
	{
		return array(
			array(
				'<embed src="{@url}"/>',
				"The template contains a 'embed' element with a non-fixed URL"
			),
			array(
				'<iframe src="{@url}"/>',
				"The template contains a 'iframe' element with a non-fixed URL"
			),
			array(
				'<object data="{@url}"/>',
				"The template contains a 'object' element with a non-fixed URL"
			),
			array(
				'<script src="{@url}"/>',
				"The template contains a 'script' element with a non-fixed URL"
			),
			// Redundant but produces a nicer entry in testdox
			array(
				'<script src="{@url}"/>',
				"The template contains a 'script' element with a non-fixed URL",
				array(
					'attributes' => array(
						'src' => array(
							'filterChain' => array('#url')
						)
					)
				)
			),
			array(
				'<script src="http://{@foo}"/>',
				"The template contains a 'script' element with a non-fixed URL"
			),
			array(
				'<script src="https://gist.github.com/{@id}.js"/>',
				null,
				array(
					'attributes' => array(
						'id' => array(
							'filterChain' => array('#number')
						)
					)
				)
			),
			// Try working around the safeguards
			array(
				'<SCRIPT src="{@url}"/>',
				"The template contains a 'script' element with a non-fixed URL attribute 'src'"
			),
			array(
				'<script SRC="{@url}"/>',
				"The template contains a 'script' element with a non-fixed URL attribute 'src'"
			),
			array(
				'<script><xsl:attribute name="src"><xsl:value-of select="@url"/><?dont-optimize?></xsl:attribute></script>',
				"The template contains a 'script' element with a dynamically generated 'src' attribute that does not use a fixed URL"
			),
			array(
				'<script><xsl:attribute name="SRC"><xsl:value-of select="@url"/><?dont-optimize?></xsl:attribute></script>',
				"The template contains a 'script' element with a dynamically generated 'src' attribute that does not use a fixed URL"
			),
			array(
				'<script><xsl:attribute name="src">http://example.org/legit.js<?dont-optimize?></xsl:attribute></script>'
			),
			array(
				'<script src="http://example.org/legit.js"><xsl:attribute name="id"><xsl:value-of select="foo"/><?dont-optimize?></xsl:attribute></script>'
			),
			array(
				'<script src="http://example.org/legit.js"><xsl:attribute name="src"><xsl:value-of select="@hax"/><?dont-optimize?></xsl:attribute></script>',
				"The template contains a 'script' element with a dynamically generated 'src' attribute that does not use a fixed URL"
			),
			array(
				'<xsl:element name="script"><xsl:attribute name="src"><xsl:value-of select="@url"/><?dont-optimize?></xsl:attribute></xsl:element>',
				"The template contains a 'script' element with a dynamically generated 'src' attribute that does not use a fixed URL"
			),
			array(
				'<xsl:element name="SCRIPT"><xsl:attribute name="src"><xsl:value-of select="@url"/><?dont-optimize?></xsl:attribute></xsl:element>',
				"The template contains a 'script' element with a dynamically generated 'src' attribute that does not use a fixed URL"
			),
			array(
				'<object><param name="movie" value="{@url}"/></object>',
				"The template contains a 'param' element with a non-fixed URL attribute 'value'"
			),
			array(
				'<OBJECT><PARAM NAME="MOVIE" VALUE="{@url}"/></OBJECT>',
				"The template contains a 'param' element with a non-fixed URL attribute 'value'"
			)
		);
	}

	public function getUnsafeDisableOutputEscapingTests()
	{
		return array(
			array(
				'<b disable-output-escaping="1"/>',
				"The template contains a 'disable-output-escaping' attribute"
			)
		);
	}

	public function getUnsafeCopyNodesTests()
	{
		return array(
			array(
				'<xsl:copy/>',
				"Cannot assess the safety of an 'xsl:copy' element"
			)
		);
	}

	public function getUnsafeContentTests()
	{
		return array_merge(
			$this->getUnsafeCopyOfNodesTests(),
			$this->getUnsafeElementsTests(),
			$this->getUnsafeAttributesTests()
		);
	}

	public function getUnsafeCopyOfNodesTests()
	{
		return array(
			array(
				'<b><xsl:copy-of select="@onclick"/></b>',
				"Undefined attribute 'onclick'"
			),
			array(
				'<b><xsl:copy-of select=" @ onclick "/></b>',
				"Undefined attribute 'onclick'"
			),
			array(
				'<b><xsl:copy-of select="@title"/></b>'
			),
			array(
				'<b><xsl:copy-of select=" @ title "/></b>'
			),
			array(
				'<a><xsl:copy-of select="@href"/></a>',
				"Attribute 'href' is not properly filtered to be used in URL",
				array(
					'attributes' => array(
						'href' => array()
					)
				)
			),
			array(
				'<a><xsl:copy-of select="@href"/></a>',
				null,
				array(
					'attributes' => array(
						'href' => array(
							'filterChain' => array('#url')
						)
					)
				)
			),
			array(
				'<xsl:copy-of select="script"/>',
				"Cannot assess 'xsl:copy-of' select expression 'script' to be safe"
			),
			array(
				'<xsl:copy-of select=" script "/>',
				"Cannot assess 'xsl:copy-of' select expression 'script' to be safe"
			),
			array(
				'<xsl:copy-of select="parent::*"/>',
				"Cannot assess 'xsl:copy-of' select expression 'parent::*' to be safe"
			),
		);
	}

	protected function getSafeFilters($type)
	{
		$filters = array(
			'CSS' => array(
				'#url',
				'#int',
				'#uint',
				'#float',
				'#color',
				'#range',
				'#number',
				'#simpletext'
			),
			'JS' => array(
				'json_encode',
				'rawurlencode',
				'strtotime',
				'urlencode',
				'#url',
				'#int',
				'#uint',
				'#float',
				'#range',
				'#number',
				'#simpletext'
			),
			'URL' => array(
				'urlencode',
				'rawurlencode',
				'#url',
				'#id',
				'#int',
				'#uint',
				'#float',
				'#range',
				'#number'
			)
		);

		return $filters[$type];
	}

	public function getUnsafeElementsTests()
	{
		$elements = array(
			'script' => 'JS',
			'style'  => 'CSS'
		);

		$tests = array();

		foreach ($elements as $elName => $type)
		{
			$filters = $this->getSafeFilters($type);

			$tests[] = array(
				'<' . $elName . '><xsl:apply-templates/></' . $elName . '>',
				"A '" . $elName . "' element lets unfiltered data through"
			);

			$tests[] = array(
				'<' . $elName . '><xsl:apply-templates select="st"/></' . $elName . '>',
				"Cannot assess the safety of 'xsl:apply-templates' select expression 'st'"
			);

			$tests[] = array(
				'<' . $elName . '><xsl:if test="1"><xsl:apply-templates/></xsl:if></' . $elName . '>',
				"A '" . $elName . "' element lets unfiltered data through"
			);

			$tests[] = array(
				'<' . $elName . '><xsl:value-of select="st"/></' . $elName . '>',
				"Cannot assess the safety of XPath expression 'st'"
			);

			$tests[] = array(
				'<' . $elName . '><xsl:value-of select="@foo"/></' . $elName . '>',
				"Undefined attribute 'foo'"
			);

			// Try some variations to get around basic checks
			$tagOptions = array(
				'attributes' => array(
					'foo' => array()
				)
			);

			$tests[] = array(
				'<' . $elName . '><xsl:value-of select="@foo"/></' . $elName . '>',
				"Attribute 'foo' is not properly filtered to be used in " . $type,
				$tagOptions
			);

			$tests[] = array(
				'<' . $elName . '><xsl:if test="1"><xsl:value-of select="@foo"/></xsl:if></' . $elName . '>',
				"Attribute 'foo' is not properly filtered to be used in " . $type,
				$tagOptions
			);

			$tests[] = array(
				'<xsl:element name="' . $elName . '"><xsl:value-of select="@foo"/></xsl:element>',
				"Attribute 'foo' is not properly filtered to be used in " . $type,
				$tagOptions
			);

			$tests[] = array(
				'<xsl:element name="' . strtoupper($elName) . '"><xsl:value-of select="@foo"/></xsl:element>',
				"Attribute 'foo' is not properly filtered to be used in " . $type,
				$tagOptions
			);

			// Using xsl:for-each to subvert the context
			$tests[] = array(
				'<' . $elName . '><xsl:for-each select="/*"><xsl:value-of select="@foo"/></xsl:for-each></' . $elName . '>',
				"Cannot evaluate context node due to 'xsl:for-each'",
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array($filters[0])
						)
					)
				)
			);

			// Test safe filters
			foreach ($filters as $filter)
			{
				$tests[] = array(
					'<' . $elName . '><xsl:value-of select="@foo"/></' . $elName . '>',
					null,
					array(
						'attributes' => array(
							'foo' => array(
								'filterChain' => array($filter)
							)
						)
					)
				);
			}
		}

		// Dynamic element names are too hard to assess
		$tests[] = array(
			'<xsl:element name="{FOO}"><xsl:apply-templates/></xsl:element>',
			"Cannot assess 'xsl:element' name '{FOO}'"
		);

		return $tests;
	}

	public function getUnsafeAttributesTests()
	{
		$attributes = array(
			'b:style'          => 'CSS',
			'b:onclick'        => 'JS',
			'b:onanything'     => 'JS',
			'form:action'      => 'URL',
			'q:cite'           => 'URL',
			// Should really be <object> but it would require a more complicated test to avoid
			// triggering the "fixed-src" checks
			'xbject:data'      => 'URL',
			'input:formaction' => 'URL',
			'a:href'           => 'URL',
			'html:manifest'    => 'URL',
			'video:poster'     => 'URL',
			'img:src'          => 'URL',
			'img:lowsrc'       => 'URL'
		);

		$tests = array();

		// Those tests don't really need to be repeated for every attribute
		$tests[] = array(
			'<b><xsl:attribute name="onclick"><xsl:apply-templates/></xsl:attribute></b>',
			"A dynamically generated 'onclick' attribute lets unfiltered data through"
		);

		$tests[] = array(
			'<b><xsl:attribute name="ONCLICK"><xsl:apply-templates/></xsl:attribute></b>',
			"A dynamically generated 'ONCLICK' attribute lets unfiltered data through"
		);

		$tests[] = array(
			'<b onclick=""><xsl:attribute name="onclick"><xsl:apply-templates/></xsl:attribute></b>',
			"A dynamically generated 'onclick' attribute lets unfiltered data through"
		);

		$tests[] = array(
			'<b><xsl:if test="1"><xsl:attribute name="onclick"><xsl:value-of select="@foo"/></xsl:attribute></xsl:if></b>',
			"Undefined attribute 'foo'"
		);

		$tests[] = array(
			'<b><xsl:attribute name="onclick"><xsl:if test="1"><xsl:value-of select="@foo"/></xsl:if></xsl:attribute></b>',
			"Undefined attribute 'foo'"
		);

		$tests[] = array(
			'<b onclick="{@foo}"/>',
			"Undefined attribute 'foo'"
		);

		$tests[] = array(
			'<b ONCLICK="{@foo}"/>',
			"Undefined attribute 'foo'"
		);

		foreach ($attributes as $attribute => $type)
		{
			list($elName, $attrName) = explode(':', $attribute);
			$filters = $this->getSafeFilters($type);

			$tests[] = array(
				'<' . $elName . ' ' . $attrName . '="{@foo}"/>',
				"Attribute 'foo' is not properly filtered to be used in " . $type,
				array(
					'attributes' => array(
						'foo' => array()
					)
				)
			);

			// Test safe filters
			foreach ($filters as $filter)
			{
				$tests[] = array(
					'<' . $elName . ' ' . $attrName . '="{@foo}"/>',
					null,
					array(
						'attributes' => array(
							'foo' => array(
								'filterChain' => array($filter)
							)
						)
					)
				);
			}
		}

		// Dynamic attribute names are too hard to assess
		$tests[] = array(
			'<b><xsl:attribute name="{FOO}"><xsl:apply-templates/></xsl:attribute></b>',
			"Cannot assess 'xsl:attribute' name '{FOO}'"
		);

		return $tests;
	}
}