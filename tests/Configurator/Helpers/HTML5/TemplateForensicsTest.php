<?php

namespace s9e\TextFormatter\Tests\Configurator\Helpers\HTML5;

use s9e\TextFormatter\Tests\Test;
use s9e\TextFormatter\Configurator\Helpers\HTML5\TemplateForensics;

/**
* @covers s9e\TextFormatter\Configurator\Helpers\HTML5\TemplateForensics
*/
class TemplateForensicsTest extends Test
{
	public function runCase($title, $xslSrc, $rule, $xslTrg = null)
	{
		$src = new TemplateForensics($xslSrc);
		$trg = new TemplateForensics($xslTrg);

		$assert = ($rule[0] === '!') ? 'assertFalse' : 'assertTrue';
		$method = ltrim($rule, '!');

		$this->$assert($src->$method($trg), $title);
	}

	// Start of content generated by ../../../../scripts/patchTemplateForensicsTest.php
	/**
	* @testdox <span> does not allow <div> as child
	*/
	public function test2CBBE8A9()
	{
		$this->runCase(
			'<span> does not allow <div> as child',
			'<span><xsl:apply-templates/></span>',
			'!allowsChild',
			'<div><xsl:apply-templates/></div>'
		);
	}

	/**
	* @testdox <span> does not allow <div> as child even with a <span> sibling
	*/
	public function test650ADBD4()
	{
		$this->runCase(
			'<span> does not allow <div> as child even with a <span> sibling',
			'<span><xsl:apply-templates/></span>',
			'!allowsChild',
			'<span>xxx</span><div><xsl:apply-templates/></div>'
		);
	}

	/**
	* @testdox <span> and <div> does not allow <span> and <div> as child
	*/
	public function test1806C2AF()
	{
		$this->runCase(
			'<span> and <div> does not allow <span> and <div> as child',
			'<span><xsl:apply-templates/></span><div><xsl:apply-templates/></div>',
			'!allowsChild',
			'<span/><div/>'
		);
	}

	/**
	* @testdox <li> closes parent <li>
	*/
	public function test55335E88()
	{
		$this->runCase(
			'<li> closes parent <li>',
			'<li/>',
			'closesParent',
			'<li><xsl:apply-templates/></li>'
		);
	}

	/**
	* @testdox <div> closes parent <p>
	*/
	public function test4405B696()
	{
		$this->runCase(
			'<div> closes parent <p>',
			'<div/>',
			'closesParent',
			'<p><xsl:apply-templates/></p>'
		);
	}

	/**
	* @testdox <p> closes parent <p>
	*/
	public function testA3342EC1()
	{
		$this->runCase(
			'<p> closes parent <p>',
			'<p/>',
			'closesParent',
			'<p><xsl:apply-templates/></p>'
		);
	}

	/**
	* @testdox <div> does not close parent <div>
	*/
	public function test95ADC105()
	{
		$this->runCase(
			'<div> does not close parent <div>',
			'<div/>',
			'!closesParent',
			'<div><xsl:apply-templates/></div>'
		);
	}

	/**
	* @testdox <span> does not close parent <span>
	*/
	public function test78511A05()
	{
		$this->runCase(
			'<span> does not close parent <span>',
			'<span/>',
			'!closesParent',
			'<span><xsl:apply-templates/></span>'
		);
	}

	/**
	* @testdox <a> denies <a> as descendant
	*/
	public function testD33EA39A()
	{
		$this->runCase(
			'<a> denies <a> as descendant',
			'<a><xsl:apply-templates/></a>',
			'!allowsDescendant',
			'<a/>'
		);
	}

	/**
	* @testdox <a> allows <img> with no usemap attribute as child
	*/
	public function testD351929A()
	{
		$this->runCase(
			'<a> allows <img> with no usemap attribute as child',
			'<a><xsl:apply-templates/></a>',
			'allowsChild',
			'<img/>'
		);
	}

	/**
	* @testdox <a> denies <img usemap="#foo"> as child
	*/
	public function testA40F2EB6()
	{
		$this->runCase(
			'<a> denies <img usemap="#foo"> as child',
			'<a><xsl:apply-templates/></a>',
			'!allowsChild',
			'<img usemap="#foo"/>'
		);
	}

	/**
	* @testdox <div><a> allows <div> as child
	*/
	public function test21CE8315()
	{
		$this->runCase(
			'<div><a> allows <div> as child',
			'<div><a><xsl:apply-templates/></a></div>',
			'allowsChild',
			'<div/>'
		);
	}

	/**
	* @testdox <span><a> denies <div> as child
	*/
	public function test041F623B()
	{
		$this->runCase(
			'<span><a> denies <div> as child',
			'<span><a><xsl:apply-templates/></a></span>',
			'!allowsChild',
			'<div/>'
		);
	}

	/**
	* @testdox <audio> with no src attribute allows <source> as child
	*/
	public function test8B0A9455()
	{
		$this->runCase(
			'<audio> with no src attribute allows <source> as child',
			'<audio><xsl:apply-templates/></audio>',
			'allowsChild',
			'<source/>'
		);
	}

	/**
	* @testdox <audio src="..."> denies <source> as child
	*/
	public function test2E32CC58()
	{
		$this->runCase(
			'<audio src="..."> denies <source> as child',
			'<audio src="{@src}"><xsl:apply-templates/></audio>',
			'!allowsChild',
			'<source/>'
		);
	}

	/**
	* @testdox <a> is considered transparent
	*/
	public function test922375F7()
	{
		$this->runCase(
			'<a> is considered transparent',
			'<a><xsl:apply-templates/></a>',
			'isTransparent'
		);
	}

	/**
	* @testdox <a><span> is not considered transparent
	*/
	public function test314E8100()
	{
		$this->runCase(
			'<a><span> is not considered transparent',
			'<a><span><xsl:apply-templates/></span></a>',
			'!isTransparent'
		);
	}

	/**
	* @testdox <span><a> is not considered transparent
	*/
	public function test444B39F8()
	{
		$this->runCase(
			'<span><a> is not considered transparent',
			'<span><a><xsl:apply-templates/></a></span>',
			'!isTransparent'
		);
	}

	/**
	* @testdox A template composed entirely of a single <xsl:apply-templates/> is considered transparent
	*/
	public function test70793519()
	{
		$this->runCase(
			'A template composed entirely of a single <xsl:apply-templates/> is considered transparent',
			'<xsl:apply-templates/>',
			'isTransparent'
		);
	}

	/**
	* @testdox <span> allows <unknownElement> as child
	*/
	public function test655D9122()
	{
		$this->runCase(
			'<span> allows <unknownElement> as child',
			'<span><xsl:apply-templates/></span>',
			'allowsChild',
			'<unknownElement/>'
		);
	}

	/**
	* @testdox <unknownElement> allows <span> as child
	*/
	public function testEE29F1FF()
	{
		$this->runCase(
			'<unknownElement> allows <span> as child',
			'<unknownElement><xsl:apply-templates/></unknownElement>',
			'allowsChild',
			'<span/>'
		);
	}

	/**
	* @testdox <textarea> allows text nodes
	*/
	public function test2E7367FF()
	{
		$this->runCase(
			'<textarea> allows text nodes',
			'<textarea><xsl:apply-templates/></textarea>',
			'allowsText'
		);
	}

	/**
	* @testdox <style> allows text nodes
	*/
	public function test19B9DD8B()
	{
		$this->runCase(
			'<style> allows text nodes',
			'<style><xsl:apply-templates/></style>',
			'allowsText'
		);
	}

	/**
	* @testdox <xsl:apply-templates/> allows text nodes
	*/
	public function test1457EEC0()
	{
		$this->runCase(
			'<xsl:apply-templates/> allows text nodes',
			'<xsl:apply-templates/>',
			'allowsText'
		);
	}

	/**
	* @testdox <table> disallows text nodes
	*/
	public function test6107CF00()
	{
		$this->runCase(
			'<table> disallows text nodes',
			'<table><xsl:apply-templates/></table>',
			'!allowsText'
		);
	}

	/**
	* @testdox <table><tr><td> allows "Hi"
	*/
	public function test5ED10B0C()
	{
		$this->runCase(
			'<table><tr><td> allows "Hi"',
			'<table><tr><td><xsl:apply-templates/></td></tr></table>',
			'allowsChild',
			'Hi'
		);
	}

	/**
	* @testdox <div><table> disallows "Hi"
	*/
	public function test55D2B228()
	{
		$this->runCase(
			'<div><table> disallows "Hi"',
			'<div><table><xsl:apply-templates/></table></div>',
			'!allowsChild',
			'Hi'
		);
	}

	/**
	* @testdox <table> disallows <xsl:value-of/>
	*/
	public function testAF701A06()
	{
		$this->runCase(
			'<table> disallows <xsl:value-of/>',
			'<table><xsl:apply-templates/></table>',
			'!allowsChild',
			'<xsl:value-of select="@foo"/>'
		);
	}

	/**
	* @testdox <table> disallows <xsl:text>Hi</xsl:text>
	*/
	public function test069CFF2A()
	{
		$this->runCase(
			'<table> disallows <xsl:text>Hi</xsl:text>',
			'<table><xsl:apply-templates/></table>',
			'!allowsChild',
			'<xsl:text>Hi</xsl:text>'
		);
	}

	/**
	* @testdox <table> allows <xsl:text>  </xsl:text>
	*/
	public function test9F935BDA()
	{
		$this->runCase(
			'<table> allows <xsl:text>  </xsl:text>',
			'<table><xsl:apply-templates/></table>',
			'allowsChild',
			'<xsl:text>  </xsl:text>'
		);
	}

	/**
	* @testdox <b> is a formatting element
	*/
	public function test0FEB502E()
	{
		$this->runCase(
			'<b> is a formatting element',
			'<b><xsl:apply-templates/></b>',
			'isFormattingElement'
		);
	}

	/**
	* @testdox <b><u> is a formatting element
	*/
	public function test845660E9()
	{
		$this->runCase(
			'<b><u> is a formatting element',
			'<b><u><xsl:apply-templates/></u></b>',
			'isFormattingElement'
		);
	}

	/**
	* @testdox <div> is not a formatting element
	*/
	public function testA5F32A8C()
	{
		$this->runCase(
			'<div> is not a formatting element',
			'<div><xsl:apply-templates/></div>',
			'!isFormattingElement'
		);
	}

	/**
	* @testdox <div><u> is not a formatting element
	*/
	public function test2EF441C1()
	{
		$this->runCase(
			'<div><u> is not a formatting element',
			'<div><u><xsl:apply-templates/></u></div>',
			'!isFormattingElement'
		);
	}

	/**
	* @testdox "Hi" is not a formatting element
	*/
	public function test14421B19()
	{
		$this->runCase(
			'"Hi" is not a formatting element',
			'Hi',
			'!isFormattingElement'
		);
	}

	/**
	* @testdox A template composed entirely of a single <xsl:apply-templates/> is not a formatting element
	*/
	public function testE1E4F3F4()
	{
		$this->runCase(
			'A template composed entirely of a single <xsl:apply-templates/> is not a formatting element',
			'<xsl:apply-templates/>',
			'!isFormattingElement'
		);
	}

	/**
	* @testdox <img> uses the "empty" content model
	*/
	public function test26941BF9()
	{
		$this->runCase(
			'<img> uses the "empty" content model',
			'<img/>',
			'isEmpty'
		);
	}

	/**
	* @testdox <hr><xsl:apply-templates/></hr> uses the "empty" content model
	*/
	public function test11094568()
	{
		$this->runCase(
			'<hr><xsl:apply-templates/></hr> uses the "empty" content model',
			'<hr><xsl:apply-templates/></hr>',
			'isEmpty'
		);
	}

	/**
	* @testdox <div><hr><xsl:apply-templates/></hr></div> uses the "empty" content model
	*/
	public function testACE6126C()
	{
		$this->runCase(
			'<div><hr><xsl:apply-templates/></hr></div> uses the "empty" content model',
			'<div><hr><xsl:apply-templates/></hr></div>',
			'isEmpty'
		);
	}

	/**
	* @testdox <span> is not empty
	*/
	public function testBF70FDFF()
	{
		$this->runCase(
			'<span> is not empty',
			'<span><xsl:apply-templates/></span>',
			'!isEmpty'
		);
	}

	/**
	* @testdox <colgroup span="2"> uses the "empty" content model
	*/
	public function testAA6266BB()
	{
		$this->runCase(
			'<colgroup span="2"> uses the "empty" content model',
			'<colgroup span="2"><xsl:apply-templates/></colgroup>',
			'isEmpty'
		);
	}

	/**
	* @testdox <colgroup> does not use the "empty" content model
	*/
	public function test62BCC022()
	{
		$this->runCase(
			'<colgroup> does not use the "empty" content model',
			'<colgroup><xsl:apply-templates/></colgroup>',
			'!isEmpty'
		);
	}

	/**
	* @testdox <span> allows elements
	*/
	public function testB0AA2D8C()
	{
		$this->runCase(
			'<span> allows elements',
			'<span><xsl:apply-templates/></span>',
			'allowsElements'
		);
	}

	/**
	* @testdox <script> does not allow elements even if it has an <xsl:apply-templates/> child
	*/
	public function test029EA650()
	{
		$this->runCase(
			'<script> does not allow elements even if it has an <xsl:apply-templates/> child',
			'<script><xsl:apply-templates/></script>',
			'!allowsElements'
		);
	}

	/**
	* @testdox <script> does not allow <span> as a child, even if it has an <xsl:apply-templates/> child
	*/
	public function testCAAEE63E()
	{
		$this->runCase(
			'<script> does not allow <span> as a child, even if it has an <xsl:apply-templates/> child',
			'<script><xsl:apply-templates/></script>',
			'!allowsChild',
			'<span/>'
		);
	}

	/**
	* @testdox <script> does not allow <span> as a descendant, even if it has an <xsl:apply-templates/> child
	*/
	public function testC2B440E5()
	{
		$this->runCase(
			'<script> does not allow <span> as a descendant, even if it has an <xsl:apply-templates/> child',
			'<script><xsl:apply-templates/></script>',
			'!allowsDescendant',
			'<span/>'
		);
	}

	/**
	* @testdox <pre> preserves whitespace
	*/
	public function test3A51B52B()
	{
		$this->runCase(
			'<pre> preserves whitespace',
			'<pre><xsl:apply-templates/></pre>',
			'preservesWhitespace'
		);
	}

	/**
	* @testdox <pre><code> preserves whitespace
	*/
	public function test8F524772()
	{
		$this->runCase(
			'<pre><code> preserves whitespace',
			'<pre><code><xsl:apply-templates/></code></pre>',
			'preservesWhitespace'
		);
	}

	/**
	* @testdox <span> does not preserve whitespace
	*/
	public function test9EE485B2()
	{
		$this->runCase(
			'<span> does not preserve whitespace',
			'<span><xsl:apply-templates/></span>',
			'!preservesWhitespace'
		);
	}

	/**
	* @testdox <img/> is void
	*/
	public function test5D210713()
	{
		$this->runCase(
			'<img/> is void',
			'<img><xsl:apply-templates/></img>',
			'isVoid'
		);
	}

	/**
	* @testdox <img> is void even with a <xsl:apply-templates/> child
	*/
	public function test53CD3F08()
	{
		$this->runCase(
			'<img> is void even with a <xsl:apply-templates/> child',
			'<img><xsl:apply-templates/></img>',
			'isVoid'
		);
	}

	/**
	* @testdox <span> is not void
	*/
	public function test2218364A()
	{
		$this->runCase(
			'<span> is not void',
			'<span><xsl:apply-templates/></span>',
			'!isVoid'
		);
	}

	/**
	* @testdox <xsl:apply-templates/> is not void
	*/
	public function test517E8D2B()
	{
		$this->runCase(
			'<xsl:apply-templates/> is not void',
			'<xsl:apply-templates/>',
			'!isVoid'
		);
	}

	/**
	* @testdox <blockquote> is a block-level element
	*/
	public function test602395E3()
	{
		$this->runCase(
			'<blockquote> is a block-level element',
			'<blockquote><xsl:apply-templates/></blockquote>',
			'isBlock'
		);
	}

	/**
	* @testdox <span> is not a block-level element
	*/
	public function testE222869D()
	{
		$this->runCase(
			'<span> is not a block-level element',
			'<span><xsl:apply-templates/></span>',
			'!isBlock'
		);
	}
	// End of content generated by ../../../../scripts/patchTemplateForensicsTest.php

	public function getData()
	{
		return [
			[
				'<span> does not allow <div> as child',
				'<span><xsl:apply-templates/></span>',
				'!allowsChild',
				'<div><xsl:apply-templates/></div>'
			],
			[
				'<span> does not allow <div> as child even with a <span> sibling',
				'<span><xsl:apply-templates/></span>',
				'!allowsChild',
				'<span>xxx</span><div><xsl:apply-templates/></div>'
			],
			[
				'<span> and <div> does not allow <span> and <div> as child',
				'<span><xsl:apply-templates/></span><div><xsl:apply-templates/></div>',
				'!allowsChild',
				'<span/><div/>'
			],
			[
				'<li> closes parent <li>',
				'<li/>',
				'closesParent',
				'<li><xsl:apply-templates/></li>'
			],
			[
				'<div> closes parent <p>',
				'<div/>',
				'closesParent',
				'<p><xsl:apply-templates/></p>'
			],
			[
				'<p> closes parent <p>',
				'<p/>',
				'closesParent',
				'<p><xsl:apply-templates/></p>'
			],
			[
				'<div> does not close parent <div>',
				'<div/>',
				'!closesParent',
				'<div><xsl:apply-templates/></div>'
			],
			[
				// This test mainly exist to ensure nothing bad happens with HTML tags that don't
				// have a "cp" value in TemplateForensics::$htmlElements
				'<span> does not close parent <span>',
				'<span/>',
				'!closesParent',
				'<span><xsl:apply-templates/></span>'
			],
			[
				'<a> denies <a> as descendant',
				'<a><xsl:apply-templates/></a>',
				'!allowsDescendant',
				'<a/>'
			],
			[
				'<a> allows <img> with no usemap attribute as child',
				'<a><xsl:apply-templates/></a>',
				'allowsChild',
				'<img/>'
			],
			[
				'<a> denies <img usemap="#foo"> as child',
				'<a><xsl:apply-templates/></a>',
				'!allowsChild',
				'<img usemap="#foo"/>'
			],
			[
				'<div><a> allows <div> as child',
				'<div><a><xsl:apply-templates/></a></div>',
				'allowsChild',
				'<div/>'
			],
			[
				'<span><a> denies <div> as child',
				'<span><a><xsl:apply-templates/></a></span>',
				'!allowsChild',
				'<div/>'
			],
			[
				'<audio> with no src attribute allows <source> as child',
				'<audio><xsl:apply-templates/></audio>',
				'allowsChild',
				'<source/>'
			],
			[
				'<audio src="..."> denies <source> as child',
				'<audio src="{@src}"><xsl:apply-templates/></audio>',
				'!allowsChild',
				'<source/>'
			],
			[
				'<a> is considered transparent',
				'<a><xsl:apply-templates/></a>',
				'isTransparent'
			],
			[
				'<a><span> is not considered transparent',
				'<a><span><xsl:apply-templates/></span></a>',
				'!isTransparent'
			],
			[
				'<span><a> is not considered transparent',
				'<span><a><xsl:apply-templates/></a></span>',
				'!isTransparent'
			],
			[
				'A template composed entirely of a single <xsl:apply-templates/> is considered transparent',
				'<xsl:apply-templates/>',
				'isTransparent'
			],
			[
				'<span> allows <unknownElement> as child',
				'<span><xsl:apply-templates/></span>',
				'allowsChild',
				'<unknownElement/>'
			],
			[
				'<unknownElement> allows <span> as child',
				'<unknownElement><xsl:apply-templates/></unknownElement>',
				'allowsChild',
				'<span/>'
			],
			[
				'<textarea> allows text nodes',
				'<textarea><xsl:apply-templates/></textarea>',
				'allowsText'
			],
			[
				'<style> allows text nodes',
				'<style><xsl:apply-templates/></style>',
				'allowsText'
			],
			[
				'<xsl:apply-templates/> allows text nodes',
				'<xsl:apply-templates/>',
				'allowsText'
			],
			[
				'<table> disallows text nodes',
				'<table><xsl:apply-templates/></table>',
				'!allowsText'
			],
			[
				'<table><tr><td> allows "Hi"',
				'<table><tr><td><xsl:apply-templates/></td></tr></table>',
				'allowsChild',
				'Hi'
			],
			[
				'<div><table> disallows "Hi"',
				'<div><table><xsl:apply-templates/></table></div>',
				'!allowsChild',
				'Hi'
			],
			[
				'<table> disallows <xsl:value-of/>',
				'<table><xsl:apply-templates/></table>',
				'!allowsChild',
				'<xsl:value-of select="@foo"/>'
			],
			[
				'<table> disallows <xsl:text>Hi</xsl:text>',
				'<table><xsl:apply-templates/></table>',
				'!allowsChild',
				'<xsl:text>Hi</xsl:text>'
			],
			[
				'<table> allows <xsl:text>  </xsl:text>',
				'<table><xsl:apply-templates/></table>',
				'allowsChild',
				'<xsl:text>  </xsl:text>'
			],
			[
				'<b> is a formatting element',
				'<b><xsl:apply-templates/></b>',
				'isFormattingElement'
			],
			[
				'<b><u> is a formatting element',
				'<b><u><xsl:apply-templates/></u></b>',
				'isFormattingElement'
			],
			[
				'<div> is not a formatting element',
				'<div><xsl:apply-templates/></div>',
				'!isFormattingElement'
			],
			[
				'<div><u> is not a formatting element',
				'<div><u><xsl:apply-templates/></u></div>',
				'!isFormattingElement'
			],
			[
				'"Hi" is not a formatting element',
				'Hi',
				'!isFormattingElement'
			],
			[
				'A template composed entirely of a single <xsl:apply-templates/> is not a formatting element',
				'<xsl:apply-templates/>',
				'!isFormattingElement'
			],
			[
				'<img> uses the "empty" content model',
				'<img/>',
				'isEmpty'
			],
			[
				'<hr><xsl:apply-templates/></hr> uses the "empty" content model',
				'<hr><xsl:apply-templates/></hr>',
				'isEmpty'
			],
			[
				'<div><hr><xsl:apply-templates/></hr></div> uses the "empty" content model',
				'<div><hr><xsl:apply-templates/></hr></div>',
				'isEmpty'
			],
			[
				'<span> is not empty',
				'<span><xsl:apply-templates/></span>',
				'!isEmpty'
			],
			[
				'<colgroup span="2"> uses the "empty" content model',
				'<colgroup span="2"><xsl:apply-templates/></colgroup>',
				'isEmpty'
			],
			[
				'<colgroup> does not use the "empty" content model',
				'<colgroup><xsl:apply-templates/></colgroup>',
				'!isEmpty'
			],
			[
				'<span> allows elements',
				'<span><xsl:apply-templates/></span>',
				'allowsElements'
			],
			[
				'<script> does not allow elements even if it has an <xsl:apply-templates/> child',
				'<script><xsl:apply-templates/></script>',
				'!allowsElements'
			],
			[
				'<script> does not allow <span> as a child, even if it has an <xsl:apply-templates/> child',
				'<script><xsl:apply-templates/></script>',
				'!allowsChild',
				'<span/>'
			],
			[
				'<script> does not allow <span> as a descendant, even if it has an <xsl:apply-templates/> child',
				'<script><xsl:apply-templates/></script>',
				'!allowsDescendant',
				'<span/>'
			],
			[
				'<pre> preserves whitespace',
				'<pre><xsl:apply-templates/></pre>',
				'preservesWhitespace'
			],
			[
				'<pre><code> preserves whitespace',
				'<pre><code><xsl:apply-templates/></code></pre>',
				'preservesWhitespace'
			],
			[
				'<span> does not preserve whitespace',
				'<span><xsl:apply-templates/></span>',
				'!preservesWhitespace'
			],
			[
				'<img/> is void',
				'<img><xsl:apply-templates/></img>',
				'isVoid'
			],
			[
				'<img> is void even with a <xsl:apply-templates/> child',
				'<img><xsl:apply-templates/></img>',
				'isVoid'
			],
			[
				'<span> is not void',
				'<span><xsl:apply-templates/></span>',
				'!isVoid'
			],
			[
				'<xsl:apply-templates/> is not void',
				'<xsl:apply-templates/>',
				'!isVoid'
			],
			[
				'<blockquote> is a block-level element',
				'<blockquote><xsl:apply-templates/></blockquote>',
				'isBlock'
			],
			[
				'<span> is not a block-level element',
				'<span><xsl:apply-templates/></span>',
				'!isBlock'
			],
		];
	}
}