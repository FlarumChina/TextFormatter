<?php

namespace s9e\TextFormatter\Tests\ConfigBuilder\Helpers;

use s9e\TextFormatter\Tests\Test;
use s9e\TextFormatter\ConfigBuilder\Helpers\RegexpBuilder;

/**
* @covers s9e\TextFormatter\ConfigBuilder\Helpers\RegexpBuilder
*/
class RegexpBuilderTest extends Test
{
	// Start of content generated by ../../../scripts/patchRegexpBuilderTest.php
	/**
	* @testdox fromList(['foo']) returns 'foo'
	*/
	public function test_2E6B327F()
	{
		$this->assertSame(
			'foo',
			RegexpBuilder::fromList(array('foo'))
		);
	}

	/**
	* @testdox fromList(['foo', 'foo']) returns 'foo'
	*/
	public function test_EFC21F10()
	{
		$this->assertSame(
			'foo',
			RegexpBuilder::fromList(array('foo', 'foo'))
		);
	}

	/**
	* @testdox fromList(['a']) returns 'a'
	*/
	public function test_37E7519F()
	{
		$this->assertSame(
			'a',
			RegexpBuilder::fromList(array('a'))
		);
	}

	/**
	* @testdox fromList(['a', 'a']) returns 'a'
	*/
	public function test_46ECDB38()
	{
		$this->assertSame(
			'a',
			RegexpBuilder::fromList(array('a', 'a'))
		);
	}

	/**
	* @testdox fromList(['/']) returns '\\/'
	*/
	public function test_E2479414()
	{
		$this->assertSame(
			'\\/',
			RegexpBuilder::fromList(array('/'))
		);
	}

	/**
	* @testdox fromList(['/'], ["delimiter" => "#"]) returns '/'
	*/
	public function test_B3EEE700()
	{
		$this->assertSame(
			'/',
			RegexpBuilder::fromList(
				array('/'),
				array('delimiter' => '#')
			)
		);
	}

	/**
	* @testdox fromList(['#'], ["delimiter" => "#"]) returns '\\#'
	*/
	public function test_A1D05928()
	{
		$this->assertSame(
			'\\#',
			RegexpBuilder::fromList(
				array('#'),
				array('delimiter' => '#')
			)
		);
	}

	/**
	* @testdox fromList(['apple', 'april']) returns 'ap(?:ple|ril)'
	*/
	public function test_8B59A499()
	{
		$this->assertSame(
			'ap(?:ple|ril)',
			RegexpBuilder::fromList(array('apple', 'april'))
		);
	}

	/**
	* @testdox fromList(['bar', 'baz']) returns 'ba[rz]'
	*/
	public function test_E7FFB86F()
	{
		$this->assertSame(
			'ba[rz]',
			RegexpBuilder::fromList(array('bar', 'baz'))
		);
	}

	/**
	* @testdox fromList(['foo', 'fool']) returns 'fool?'
	*/
	public function test_1DFF1AB5()
	{
		$this->assertSame(
			'fool?',
			RegexpBuilder::fromList(array('foo', 'fool'))
		);
	}

	/**
	* @testdox fromList(['ax', 'axed']) returns 'ax(?:ed)?'
	*/
	public function test_B4F156BE()
	{
		$this->assertSame(
			'ax(?:ed)?',
			RegexpBuilder::fromList(array('ax', 'axed'))
		);
	}

	/**
	* @testdox fromList(['!', '#', '$', '(', ')', '*', '+', '-', '.', ':', '<', '=', '>', '?', '[', '\\', ']', '^', '{', '|', '}']) returns '[-!#$()*+.:<=>?[\\\\\\]{|}^]'
	*/
	public function test_C7373394()
	{
		$this->assertSame(
			'[-!#$()*+.:<=>?[\\\\\\]{|}^]',
			RegexpBuilder::fromList(array('!', '#', '$', '(', ')', '*', '+', '-', '.', ':', '<', '=', '>', '?', '[', '\\', ']', '^', '{', '|', '}'))
		);
	}

	/**
	* @testdox fromList(['xy', '^y'], ["specialChars" => ["^" => "^"]]) returns '(?:x|^)y'
	*/
	public function test_8A71E271()
	{
		$this->assertSame(
			'(?:x|^)y',
			RegexpBuilder::fromList(
				array('xy', '^y'),
				array('specialChars' => array('^' => '^'))
			)
		);
	}

	/**
	* @testdox fromList(['xy', 'x$'], ["specialChars" => ["$" => "$"]]) returns 'x(?:y|$)'
	*/
	public function test_13BA1BFA()
	{
		$this->assertSame(
			'x(?:y|$)',
			RegexpBuilder::fromList(
				array('xy', 'x$'),
				array('specialChars' => array('$' => '$'))
			)
		);
	}

	/**
	* @testdox fromList(['foo', 'bar']) returns '(?:bar|foo)'
	*/
	public function test_A3302107()
	{
		$this->assertSame(
			'(?:bar|foo)',
			RegexpBuilder::fromList(array('foo', 'bar'))
		);
	}

	/**
	* @testdox fromList(['*foo', '\\bar'], ["useLookahead" => true]) returns '(?=[*\\\\])(?:\\*foo|\\\\bar)'
	*/
	public function test_3CCC7313()
	{
		$this->assertSame(
			'(?=[*\\\\])(?:\\*foo|\\\\bar)',
			RegexpBuilder::fromList(
				array('*foo', '\\bar'),
				array('useLookahead' => true)
			)
		);
	}

	/**
	* @testdox fromList(['?', 'bar'], ["specialChars" => ["?" => "."], "useLookahead" => true]) returns '(?:.|bar)'
	*/
	public function test_7FFB138D()
	{
		$this->assertSame(
			'(?:.|bar)',
			RegexpBuilder::fromList(
				array('?', 'bar'),
				array('specialChars' => array('?' => '.'), 'useLookahead' => true)
			)
		);
	}

	/**
	* @testdox fromList(['a', 'b']) returns '[ab]'
	*/
	public function test_C90B2457()
	{
		$this->assertSame(
			'[ab]',
			RegexpBuilder::fromList(array('a', 'b'))
		);
	}

	/**
	* @testdox fromList(['♠', '♣', '♥', '♦']) returns '[♠♣♥♦]'
	*/
	public function test_6335367B()
	{
		$this->assertSame(
			'[♠♣♥♦]',
			RegexpBuilder::fromList(array('♠', '♣', '♥', '♦'))
		);
	}

	/**
	* @testdox fromList(['lock', 'sock']) returns '[ls]ock'
	*/
	public function test_A3CF0B4D()
	{
		$this->assertSame(
			'[ls]ock',
			RegexpBuilder::fromList(array('lock', 'sock'))
		);
	}

	/**
	* @testdox fromList(['foo', 'afoo'], ["useLookahead" => true]) returns '(?=[af])a?foo'
	*/
	public function test_8613531B()
	{
		$this->assertSame(
			'(?=[af])a?foo',
			RegexpBuilder::fromList(
				array('foo', 'afoo'),
				array('useLookahead' => true)
			)
		);
	}

	/**
	* @testdox fromList(['boast', 'boost']) returns 'bo[ao]st'
	*/
	public function test_4BBAD47D()
	{
		$this->assertSame(
			'bo[ao]st',
			RegexpBuilder::fromList(array('boast', 'boost'))
		);
	}

	/**
	* @testdox fromList(['pest', 'pst']) returns 'pe?st'
	*/
	public function test_596D7420()
	{
		$this->assertSame(
			'pe?st',
			RegexpBuilder::fromList(array('pest', 'pst'))
		);
	}

	/**
	* @testdox fromList(['boast', 'boost', 'bost']) returns 'bo[ao]?st'
	*/
	public function test_E644DCEB()
	{
		$this->assertSame(
			'bo[ao]?st',
			RegexpBuilder::fromList(array('boast', 'boost', 'bost'))
		);
	}

	/**
	* @testdox fromList(['boost', 'best']) returns 'b(?:e|oo)st'
	*/
	public function test_AEB9F217()
	{
		$this->assertSame(
			'b(?:e|oo)st',
			RegexpBuilder::fromList(array('boost', 'best'))
		);
	}

	/**
	* @testdox fromList(['boost', 'bst']) returns 'b(?:oo)?st'
	*/
	public function test_BE3CCBA2()
	{
		$this->assertSame(
			'b(?:oo)?st',
			RegexpBuilder::fromList(array('boost', 'bst'))
		);
	}

	/**
	* @testdox fromList(['best', 'boost', 'bust']) returns 'b(?:[eu]|oo)st'
	*/
	public function test_9753E32D()
	{
		$this->assertSame(
			'b(?:[eu]|oo)st',
			RegexpBuilder::fromList(array('best', 'boost', 'bust'))
		);
	}

	/**
	* @testdox fromList(['boost', 'bst', 'cool']) returns '(?:b(?:oo)?st|cool)'
	*/
	public function test_9A764069()
	{
		$this->assertSame(
			'(?:b(?:oo)?st|cool)',
			RegexpBuilder::fromList(array('boost', 'bst', 'cool'))
		);
	}

	/**
	* @testdox fromList(['boost', 'bst', 'cost']) returns '(?:b(?:oo)?|co)st'
	*/
	public function test_53994AB6()
	{
		$this->assertSame(
			'(?:b(?:oo)?|co)st',
			RegexpBuilder::fromList(array('boost', 'bst', 'cost'))
		);
	}

	/**
	* @testdox fromList(['aax', 'aay', 'aax', 'aay']) returns 'aa[xy]'
	*/
	public function test_560C8444()
	{
		$this->assertSame(
			'aa[xy]',
			RegexpBuilder::fromList(array('aax', 'aay', 'aax', 'aay'))
		);
	}

	/**
	* @testdox fromList(['aaax', 'aaay', 'baax', 'baay']) returns '[ab]aa[xy]'
	*/
	public function test_F3709BEF()
	{
		$this->assertSame(
			'[ab]aa[xy]',
			RegexpBuilder::fromList(array('aaax', 'aaay', 'baax', 'baay'))
		);
	}

	/**
	* @testdox fromList(['aaax', 'aaay', 'bbaax', 'bbaay']) returns '(?:a|bb)aa[xy]'
	*/
	public function test_7C889532()
	{
		$this->assertSame(
			'(?:a|bb)aa[xy]',
			RegexpBuilder::fromList(array('aaax', 'aaay', 'bbaax', 'bbaay'))
		);
	}

	/**
	* @testdox fromList(['aaax', 'aaay', 'aax', 'aay']) returns 'aaa?[xy]'
	*/
	public function test_77F7FECB()
	{
		$this->assertSame(
			'aaa?[xy]',
			RegexpBuilder::fromList(array('aaax', 'aaay', 'aax', 'aay'))
		);
	}

	/**
	* @testdox fromList(['abx', 'aby', 'cdx', 'cdy']) returns '(?:ab|cd)[xy]'
	*/
	public function test_62E02B3A()
	{
		$this->assertSame(
			'(?:ab|cd)[xy]',
			RegexpBuilder::fromList(array('abx', 'aby', 'cdx', 'cdy'))
		);
	}

	/**
	* @testdox fromList(['axx', 'ayy', 'bbxx', 'bbyy']) returns '(?:a|bb)(?:xx|yy)'
	*/
	public function test_8A86C707()
	{
		$this->assertSame(
			'(?:a|bb)(?:xx|yy)',
			RegexpBuilder::fromList(array('axx', 'ayy', 'bbxx', 'bbyy'))
		);
	}

	/**
	* @testdox fromList(['axx', 'ayy', 'bbxx', 'bbyy', 'c']) returns '(?:c|(?:a|bb)(?:xx|yy))'
	*/
	public function test_59FB8E0()
	{
		$this->assertSame(
			'(?:c|(?:a|bb)(?:xx|yy))',
			RegexpBuilder::fromList(array('axx', 'ayy', 'bbxx', 'bbyy', 'c'))
		);
	}

	/**
	* @testdox fromList(['axx', 'ayy', 'azz', 'bbxx', 'bbyy', 'c']) returns '(?:c|a(?:xx|yy|zz)|bb(?:xx|yy))'
	*/
	public function test_EA302659()
	{
		$this->assertSame(
			'(?:c|a(?:xx|yy|zz)|bb(?:xx|yy))',
			RegexpBuilder::fromList(array('axx', 'ayy', 'azz', 'bbxx', 'bbyy', 'c'))
		);
	}

	/**
	* @testdox fromList(['ac', 'af', 'bbc', 'bbf', 'c']) returns '(?:c|a[cf]|bb[cf])'
	*/
	public function test_1CC75402()
	{
		$this->assertSame(
			'(?:c|a[cf]|bb[cf])',
			RegexpBuilder::fromList(array('ac', 'af', 'bbc', 'bbf', 'c'))
		);
	}

	/**
	* @testdox fromList(['^example.org$', '.example.org$', '^localhost$', '.localhost$'], ["specialChars" => ["^" => "^", "$" => "$"]]) returns '(?:\\.|^)(?:example\\.org|localhost)$'
	*/
	public function test_D463A304()
	{
		$this->assertSame(
			'(?:\\.|^)(?:example\\.org|localhost)$',
			RegexpBuilder::fromList(
				array('^example.org$', '.example.org$', '^localhost$', '.localhost$'),
				array('specialChars' => array('^' => '^', '$' => '$'))
			)
		);
	}

	/**
	* @testdox fromList(['xixix', 'xoxox']) returns 'x(?:ixi|oxo)x'
	*/
	public function test_B33646C2()
	{
		$this->assertSame(
			'x(?:ixi|oxo)x',
			RegexpBuilder::fromList(array('xixix', 'xoxox'))
		);
	}

	/**
	* @testdox fromList(['xixix', 'xixox', 'xoxox', 'xoxix']) returns 'x[io]x[io]x'
	*/
	public function test_C7D616C2()
	{
		$this->assertSame(
			'x[io]x[io]x',
			RegexpBuilder::fromList(array('xixix', 'xixox', 'xoxox', 'xoxix'))
		);
	}

	/**
	* @testdox fromList(['afoo', 'abar', 'bbfoo', 'bbbar', 'a', 'bb']) returns '(?:a|bb)(?:bar|foo)?'
	*/
	public function test_B02E083B()
	{
		$this->assertSame(
			'(?:a|bb)(?:bar|foo)?',
			RegexpBuilder::fromList(array('afoo', 'abar', 'bbfoo', 'bbbar', 'a', 'bb'))
		);
	}

	/**
	* @testdox fromList(['ax', 'ay', 'bx', 'by']) returns '[ab][xy]'
	*/
	public function test_4619FD0F()
	{
		$this->assertSame(
			'[ab][xy]',
			RegexpBuilder::fromList(array('ax', 'ay', 'bx', 'by'))
		);
	}

	/**
	* @testdox fromList(['ax', 'ay', 'bx', 'by', 'c']) returns '(?:c|[ab][xy])'
	*/
	public function test_F7523978()
	{
		$this->assertSame(
			'(?:c|[ab][xy])',
			RegexpBuilder::fromList(array('ax', 'ay', 'bx', 'by', 'c'))
		);
	}

	/**
	* @testdox fromList(['ax', 'ay', 'bx', 'by', 'x', 'y']) returns '[ab]?[xy]'
	*/
	public function test_660FC1A9()
	{
		$this->assertSame(
			'[ab]?[xy]',
			RegexpBuilder::fromList(array('ax', 'ay', 'bx', 'by', 'x', 'y'))
		);
	}

	/**
	* @testdox fromList(['ax', 'ay', 'bbx', 'bby', 'c']) returns '(?:c|a[xy]|bb[xy])'
	*/
	public function test_58A1B850()
	{
		$this->assertSame(
			'(?:c|a[xy]|bb[xy])',
			RegexpBuilder::fromList(array('ax', 'ay', 'bbx', 'bby', 'c'))
		);
	}

	/**
	* @testdox fromList(['ax', 'ay', 'bx', 'by', 'c', 'ddx', 'ddy']) returns '(?:c|dd[xy]|[ab][xy])'
	*/
	public function test_23C1BD26()
	{
		$this->assertSame(
			'(?:c|dd[xy]|[ab][xy])',
			RegexpBuilder::fromList(array('ax', 'ay', 'bx', 'by', 'c', 'ddx', 'ddy'))
		);
	}

	/**
	* @testdox fromList(['']) returns ''
	*/
	public function test_5CBF14D3()
	{
		$this->assertSame(
			'',
			RegexpBuilder::fromList(array(''))
		);
	}

	/**
	* @testdox fromList(['', '']) returns ''
	*/
	public function test_418D8F44()
	{
		$this->assertSame(
			'',
			RegexpBuilder::fromList(array('', ''))
		);
	}

	/**
	* @testdox fromList(['ad', 'bd'], ["specialChars" => ["d" => "\\d"]]) returns '[ab]\\d'
	*/
	public function test_5B18C2D1()
	{
		$this->assertSame(
			'[ab]\\d',
			RegexpBuilder::fromList(
				array('ad', 'bd'),
				array('specialChars' => array('d' => '\\d'))
			)
		);
	}

	/**
	* @testdox fromList(['a', 'ax', 'ad', 'd', 'dx', 'dd'], ["specialChars" => ["d" => "\\d"]]) returns '[\\da][\\dx]?'
	*/
	public function test_4032006C()
	{
		$this->assertSame(
			'[\\da][\\dx]?',
			RegexpBuilder::fromList(
				array('a', 'ax', 'ad', 'd', 'dx', 'dd'),
				array('specialChars' => array('d' => '\\d'))
			)
		);
	}

	/**
	* @testdox fromList(['foo', 'bar', 'y', 'z']) returns '(?:[yz]|bar|foo)'
	*/
	public function test_561FE181()
	{
		$this->assertSame(
			'(?:[yz]|bar|foo)',
			RegexpBuilder::fromList(array('foo', 'bar', 'y', 'z'))
		);
	}

	/**
	* @testdox fromList(['foo', 'bar', 'baz', 'y', 'z']) returns '(?:[yz]|ba[rz]|foo)'
	*/
	public function test_C80C5A7F()
	{
		$this->assertSame(
			'(?:[yz]|ba[rz]|foo)',
			RegexpBuilder::fromList(array('foo', 'bar', 'baz', 'y', 'z'))
		);
	}

	/**
	* @testdox fromList(['a', 'aacc', 'aadd', 'bbcc', 'bbdd']) returns '(?:a(?:a(?:cc|dd))?|bb(?:cc|dd))'
	*/
	public function test_140F192A()
	{
		$this->assertSame(
			'(?:a(?:a(?:cc|dd))?|bb(?:cc|dd))',
			RegexpBuilder::fromList(array('a', 'aacc', 'aadd', 'bbcc', 'bbdd'))
		);
	}

	/**
	* @testdox fromList(['aa', 'bb', 'aacc', 'aadd', 'bbcc', 'bbdd']) returns '(?:aa|bb)(?:cc|dd)?'
	*/
	public function test_FA3816E9()
	{
		$this->assertSame(
			'(?:aa|bb)(?:cc|dd)?',
			RegexpBuilder::fromList(array('aa', 'bb', 'aacc', 'aadd', 'bbcc', 'bbdd'))
		);
	}

	/**
	* @testdox fromList(['aa', 'bb', 'aaccxx', 'aaddxx', 'bbccxx', 'bbddxx', 'aaccyy', 'aaddyy', 'bbccyy', 'bbddyy']) returns '(?:aa|bb)(?:(?:cc|dd)(?:xx|yy))?'
	*/
	public function test_4EEB6994()
	{
		$this->assertSame(
			'(?:aa|bb)(?:(?:cc|dd)(?:xx|yy))?',
			RegexpBuilder::fromList(array('aa', 'bb', 'aaccxx', 'aaddxx', 'bbccxx', 'bbddxx', 'aaccyy', 'aaddyy', 'bbccyy', 'bbddyy'))
		);
	}

	/**
	* @testdox fromList(['^foo$', '^foo'], ["specialChars" => ["^" => "^", "$" => "$"]]) returns '^foo'
	*/
	public function test_CDAEB9BF()
	{
		$this->assertSame(
			'^foo',
			RegexpBuilder::fromList(
				array('^foo$', '^foo'),
				array('specialChars' => array('^' => '^', '$' => '$'))
			)
		);
	}

	/**
	* @testdox fromList(['^foo$', 'foo$'], ["specialChars" => ["^" => "^", "$" => "$"]]) returns 'foo$'
	*/
	public function test_58B353C0()
	{
		$this->assertSame(
			'foo$',
			RegexpBuilder::fromList(
				array('^foo$', 'foo$'),
				array('specialChars' => array('^' => '^', '$' => '$'))
			)
		);
	}

	/**
	* @testdox fromList(['bfoo', 'bfoob'], ["specialChars" => ["b" => "\\b"]]) returns '\\bfoo'
	*/
	public function test_6985D5F9()
	{
		$this->assertSame(
			'\\bfoo',
			RegexpBuilder::fromList(
				array('bfoo', 'bfoob'),
				array('specialChars' => array('b' => '\\b'))
			)
		);
	}

	/**
	* @testdox fromList(['apple', 'apple*'], ["specialChars" => ["*" => ".*?"]]) returns 'apple.*?'
	*/
	public function test_C73BB118()
	{
		$this->assertSame(
			'apple.*?',
			RegexpBuilder::fromList(
				array('apple', 'apple*'),
				array('specialChars' => array('*' => '.*?'))
			)
		);
	}

	/**
	* @testdox fromList(['apple*', 'applepie'], ["specialChars" => ["*" => ".*?"]]) returns 'apple.*?'
	*/
	public function test_BC8587F9()
	{
		$this->assertSame(
			'apple.*?',
			RegexpBuilder::fromList(
				array('apple*', 'applepie'),
				array('specialChars' => array('*' => '.*?'))
			)
		);
	}

	/**
	* @testdox fromList(['apple*', 'applepie'], ["specialChars" => ["*" => ".+?"]]) returns 'apple.+?'
	*/
	public function test_C445AC48()
	{
		$this->assertSame(
			'apple.+?',
			RegexpBuilder::fromList(
				array('apple*', 'applepie'),
				array('specialChars' => array('*' => '.+?'))
			)
		);
	}

	/**
	* @testdox fromList(['apple*', 'apple'], ["specialChars" => ["*" => ".*?"]]) returns 'apple.*?'
	*/
	public function test_3CD709C9()
	{
		$this->assertSame(
			'apple.*?',
			RegexpBuilder::fromList(
				array('apple*', 'apple'),
				array('specialChars' => array('*' => '.*?'))
			)
		);
	}

	/**
	* @testdox fromList(['apple*', 'apple+'], ["specialChars" => ["*" => ".*?", "+" => ".*"]]) returns 'apple.*'
	*/
	public function test_E13691C4()
	{
		$this->assertSame(
			'apple.*',
			RegexpBuilder::fromList(
				array('apple*', 'apple+'),
				array('specialChars' => array('*' => '.*?', '+' => '.*'))
			)
		);
	}

	/**
	* @testdox fromList(['apple*', 'apple+'], ["specialChars" => ["*" => ".+?", "+" => ".+"]]) returns 'apple.+'
	*/
	public function test_C1CD7108()
	{
		$this->assertSame(
			'apple.+',
			RegexpBuilder::fromList(
				array('apple*', 'apple+'),
				array('specialChars' => array('*' => '.+?', '+' => '.+'))
			)
		);
	}

	/**
	* @testdox fromList(['apple*', 'apple+'], ["specialChars" => ["*" => ".*", "+" => ".+"]]) returns 'apple.*'
	*/
	public function test_9C89464A()
	{
		$this->assertSame(
			'apple.*',
			RegexpBuilder::fromList(
				array('apple*', 'apple+'),
				array('specialChars' => array('*' => '.*', '+' => '.+'))
			)
		);
	}

	/**
	* @testdox fromList(['applepie', 'lemonpie', 'pie', '*pie'], ["specialChars" => ["*" => ".*"]]) returns '.*pie'
	*/
	public function test_C7A9B0A5()
	{
		$this->assertSame(
			'.*pie',
			RegexpBuilder::fromList(
				array('applepie', 'lemonpie', 'pie', '*pie'),
				array('specialChars' => array('*' => '.*'))
			)
		);
	}

	/**
	* @testdox fromList(['*pie*', 'lemonpie'], ["specialChars" => ["*" => ".*"]]) returns '.*pie.*'
	*/
	public function test_C54CFAF6()
	{
		$this->assertSame(
			'.*pie.*',
			RegexpBuilder::fromList(
				array('*pie*', 'lemonpie'),
				array('specialChars' => array('*' => '.*'))
			)
		);
	}

	/**
	* @testdox fromList(['*pie*', 'lemonpie', 'banana'], ["specialChars" => ["*" => ".*"]]) returns '(?:.*pie.*|banana)'
	*/
	public function test_34EFDA6F()
	{
		$this->assertSame(
			'(?:.*pie.*|banana)',
			RegexpBuilder::fromList(
				array('*pie*', 'lemonpie', 'banana'),
				array('specialChars' => array('*' => '.*'))
			)
		);
	}

	/**
	* @testdox fromList(['^foo$', '^foo+'], ["specialChars" => ["^" => "^", "$" => "$", "+" => ".+"]]) returns '^foo(?:$|.+)'
	*/
	public function test_F3C52183()
	{
		$this->assertSame(
			'^foo(?:$|.+)',
			RegexpBuilder::fromList(
				array('^foo$', '^foo+'),
				array('specialChars' => array('^' => '^', '$' => '$', '+' => '.+'))
			)
		);
	}

	/**
	* @testdox fromList(['^foo$', '^foo*'], ["specialChars" => ["^" => "^", "$" => "$", "*" => ".*"]]) returns '^foo.*'
	*/
	public function test_57BBBDB4()
	{
		$this->assertSame(
			'^foo.*',
			RegexpBuilder::fromList(
				array('^foo$', '^foo*'),
				array('specialChars' => array('^' => '^', '$' => '$', '*' => '.*'))
			)
		);
	}

	/**
	* @testdox fromList(['food', 'foo+'], ["specialChars" => ["d" => "\\d", "+" => ".+"]]) returns 'foo.+'
	*/
	public function test_3C407EB8()
	{
		$this->assertSame(
			'foo.+',
			RegexpBuilder::fromList(
				array('food', 'foo+'),
				array('specialChars' => array('d' => '\\d', '+' => '.+'))
			)
		);
	}

	/**
	* @testdox fromList(['fooB', 'foo+'], ["specialChars" => ["B" => "\\B", "+" => ".+"]]) returns 'foo(?:.+|\\B)'
	*/
	public function test_16E28B20()
	{
		$this->assertSame(
			'foo(?:.+|\\B)',
			RegexpBuilder::fromList(
				array('fooB', 'foo+'),
				array('specialChars' => array('B' => '\\B', '+' => '.+'))
			)
		);
	}

	/**
	* @testdox fromList(['+foo+', 'fooB'], ["specialChars" => ["B" => "\\B", "+" => ".+"]]) returns '(?:.+foo.+|foo\\B)'
	*/
	public function test_94F12345()
	{
		$this->assertSame(
			'(?:.+foo.+|foo\\B)',
			RegexpBuilder::fromList(
				array('+foo+', 'fooB'),
				array('specialChars' => array('B' => '\\B', '+' => '.+'))
			)
		);
	}

	/**
	* @testdox fromList(['+foo+', 'foo', 'bar'], ["specialChars" => ["+" => ".+"]]) returns '(?:.+foo.+|bar|foo)'
	*/
	public function test_C55ADFEF()
	{
		$this->assertSame(
			'(?:.+foo.+|bar|foo)',
			RegexpBuilder::fromList(
				array('+foo+', 'foo', 'bar'),
				array('specialChars' => array('+' => '.+'))
			)
		);
	}

	/**
	* @testdox fromList(['+foo+', '+foo', 'bar'], ["specialChars" => ["+" => ".+"]]) returns '(?:.+foo.*|bar)'
	*/
	public function test_69C9F3E0()
	{
		$this->assertSame(
			'(?:.+foo.*|bar)',
			RegexpBuilder::fromList(
				array('+foo+', '+foo', 'bar'),
				array('specialChars' => array('+' => '.+'))
			)
		);
	}

	/**
	* @testdox fromList(['+foo+', '+foo'], ["specialChars" => ["+" => ".+"]]) returns '.+foo.*'
	*/
	public function test_6AA5ABFC()
	{
		$this->assertSame(
			'.+foo.*',
			RegexpBuilder::fromList(
				array('+foo+', '+foo'),
				array('specialChars' => array('+' => '.+'))
			)
		);
	}

	/**
	* @testdox fromList(['++', 'a'], ["specialChars" => ["+" => ".+"]]) returns '(?:a|.+.+)'
	*/
	public function test_51B52D9E()
	{
		$this->assertSame(
			'(?:a|.+.+)',
			RegexpBuilder::fromList(
				array('++', 'a'),
				array('specialChars' => array('+' => '.+'))
			)
		);
	}

	/**
	* @testdox fromList(['a', '.'], ["specialChars" => ["." => "."]]) returns '.'
	*/
	public function test_C29CED5()
	{
		$this->assertSame(
			'.',
			RegexpBuilder::fromList(
				array('a', '.'),
				array('specialChars' => array('.' => '.'))
			)
		);
	}

	/**
	* @testdox fromList(['hip', 'hop', 'h.p'], ["specialChars" => ["." => "."]]) returns 'h.p'
	*/
	public function test_6AB3A485()
	{
		$this->assertSame(
			'h.p',
			RegexpBuilder::fromList(
				array('hip', 'hop', 'h.p'),
				array('specialChars' => array('.' => '.'))
			)
		);
	}

	/**
	* @testdox fromList(['hi', 'hop', 'h.p'], ["specialChars" => ["." => "."]]) returns 'h(?:i|.p)'
	*/
	public function test_8FC43CB0()
	{
		$this->assertSame(
			'h(?:i|.p)',
			RegexpBuilder::fromList(
				array('hi', 'hop', 'h.p'),
				array('specialChars' => array('.' => '.'))
			)
		);
	}

	/**
	* @testdox fromList(['h', 'h.'], ["specialChars" => ["." => "."]]) returns 'h.?'
	*/
	public function test_9BA9174B()
	{
		$this->assertSame(
			'h.?',
			RegexpBuilder::fromList(
				array('h', 'h.'),
				array('specialChars' => array('.' => '.'))
			)
		);
	}

	/**
	* @testdox fromList(['h.', 'hd'], ["specialChars" => ["." => ".", "d" => "\\d\\d"]]) returns 'h(?:.|\\d\\d)'
	*/
	public function test_A1628B44()
	{
		$this->assertSame(
			'h(?:.|\\d\\d)',
			RegexpBuilder::fromList(
				array('h.', 'hd'),
				array('specialChars' => array('.' => '.', 'd' => '\\d\\d'))
			)
		);
	}

	/**
	* @testdox fromList(['hXXXXXXXXXXX', 'h\\^$.[]()+*?', 'hotel'], ["specialChars" => ["X" => "."]]) returns 'h(?:...........|otel)'
	*/
	public function test_71D6E963()
	{
		$this->assertSame(
			'h(?:...........|otel)',
			RegexpBuilder::fromList(
				array('hXXXXXXXXXXX', 'h\\^$.[]()+*?', 'hotel'),
				array('specialChars' => array('X' => '.'))
			)
		);
	}

	/**
	* @testdox fromList(['zdDhHsSvVwW', 'z..........', 'zebra'], ["specialChars" => ["d" => "\\d", "D" => "D", "h" => "\\h", "H" => "\\H", "s" => "\\s", "S" => "S", "v" => "\\v", "V" => "\\V", "w" => "\\w", "W" => "W", "." => "."]]) returns 'z(?:..........|ebra)'
	*/
	public function test_4C2C4778()
	{
		$this->assertSame(
			'z(?:..........|ebra)',
			RegexpBuilder::fromList(
				array('zdDhHsSvVwW', 'z..........', 'zebra'),
				array('specialChars' => array('d' => '\\d', 'D' => 'D', 'h' => '\\h', 'H' => '\\H', 's' => '\\s', 'S' => 'S', 'v' => '\\v', 'V' => '\\V', 'w' => '\\w', 'W' => 'W', '.' => '.'))
			)
		);
	}

	/**
	* @testdox fromList(['m.', 'mb'], ["specialChars" => ["." => ".", "b" => "\\b"]]) returns 'm(?:.|\\b)'
	*/
	public function test_B05A865()
	{
		$this->assertSame(
			'm(?:.|\\b)',
			RegexpBuilder::fromList(
				array('m.', 'mb'),
				array('specialChars' => array('.' => '.', 'b' => '\\b'))
			)
		);
	}

	/**
	* @testdox fromList(['m.', 'mB'], ["specialChars" => ["." => ".", "B" => "\\B"]]) returns 'm(?:.|\\B)'
	*/
	public function test_823A9663()
	{
		$this->assertSame(
			'm(?:.|\\B)',
			RegexpBuilder::fromList(
				array('m.', 'mB'),
				array('specialChars' => array('.' => '.', 'B' => '\\B'))
			)
		);
	}

	/**
	* @testdox fromList(['m.', 'mA'], ["specialChars" => ["." => ".", "A" => "\\A"]]) returns 'm(?:.|\\A)'
	*/
	public function test_E58BCD87()
	{
		$this->assertSame(
			'm(?:.|\\A)',
			RegexpBuilder::fromList(
				array('m.', 'mA'),
				array('specialChars' => array('.' => '.', 'A' => '\\A'))
			)
		);
	}

	/**
	* @testdox fromList(['m.', 'mZ'], ["specialChars" => ["." => ".", "Z" => "\\Z"]]) returns 'm(?:.|\\Z)'
	*/
	public function test_95245C1()
	{
		$this->assertSame(
			'm(?:.|\\Z)',
			RegexpBuilder::fromList(
				array('m.', 'mZ'),
				array('specialChars' => array('.' => '.', 'Z' => '\\Z'))
			)
		);
	}

	/**
	* @testdox fromList(['m.', 'mz'], ["specialChars" => ["." => ".", "z" => "\\z"]]) returns 'm(?:.|\\z)'
	*/
	public function test_806D7BC7()
	{
		$this->assertSame(
			'm(?:.|\\z)',
			RegexpBuilder::fromList(
				array('m.', 'mz'),
				array('specialChars' => array('.' => '.', 'z' => '\\z'))
			)
		);
	}

	/**
	* @testdox fromList(['m.', 'mG'], ["specialChars" => ["." => ".", "G" => "\\G"]]) returns 'm(?:.|\\G)'
	*/
	public function test_2AE97A4F()
	{
		$this->assertSame(
			'm(?:.|\\G)',
			RegexpBuilder::fromList(
				array('m.', 'mG'),
				array('specialChars' => array('.' => '.', 'G' => '\\G'))
			)
		);
	}

	/**
	* @testdox fromList(['m.', 'mQ'], ["specialChars" => ["." => ".", "Q" => "\\Q"]]) returns 'm(?:.|\\Q)'
	*/
	public function test_A1145284()
	{
		$this->assertSame(
			'm(?:.|\\Q)',
			RegexpBuilder::fromList(
				array('m.', 'mQ'),
				array('specialChars' => array('.' => '.', 'Q' => '\\Q'))
			)
		);
	}

	/**
	* @testdox fromList(['m.', 'mE'], ["specialChars" => ["." => ".", "E" => "\\E"]]) returns 'm(?:.|\\E)'
	*/
	public function test_6FC8E8F7()
	{
		$this->assertSame(
			'm(?:.|\\E)',
			RegexpBuilder::fromList(
				array('m.', 'mE'),
				array('specialChars' => array('.' => '.', 'E' => '\\E'))
			)
		);
	}

	/**
	* @testdox fromList(['m.', 'mK'], ["specialChars" => ["." => ".", "K" => "\\K"]]) returns 'm(?:.|\\K)'
	*/
	public function test_6F5D139E()
	{
		$this->assertSame(
			'm(?:.|\\K)',
			RegexpBuilder::fromList(
				array('m.', 'mK'),
				array('specialChars' => array('.' => '.', 'K' => '\\K'))
			)
		);
	}

	/**
	* @testdox fromList(['h$', 'h.'], ["specialChars" => ["." => ".", "$" => "$"]]) returns 'h(?:$|.)'
	*/
	public function test_34005F32()
	{
		$this->assertSame(
			'h(?:$|.)',
			RegexpBuilder::fromList(
				array('h$', 'h.'),
				array('specialChars' => array('.' => '.', '$' => '$'))
			)
		);
	}

	/**
	* @testdox fromList(['h?', 'ha'], ["specialChars" => ["?" => ".?"]]) returns 'h.?'
	*/
	public function test_8DB4D1E0()
	{
		$this->assertSame(
			'h.?',
			RegexpBuilder::fromList(
				array('h?', 'ha'),
				array('specialChars' => array('?' => '.?'))
			)
		);
	}

	/**
	* @testdox fromList(['h.', 'hi', 'hit'], ["specialChars" => ["." => ".?"]]) returns 'h(?:.|it)?'
	*/
	public function test_2ABBC9E3()
	{
		$this->assertSame(
			'h(?:.|it)?',
			RegexpBuilder::fromList(
				array('h.', 'hi', 'hit'),
				array('specialChars' => array('.' => '.?'))
			)
		);
	}

	/**
	* @testdox fromList(['a.c.e', 'a.ce', 'ac.e', 'ace', 'acde', 'abce', 'abcde'], ["specialChars" => ["." => ".?"]]) returns 'a.?c.?e'
	*/
	public function test_8E336686()
	{
		$this->assertSame(
			'a.?c.?e',
			RegexpBuilder::fromList(
				array('a.c.e', 'a.ce', 'ac.e', 'ace', 'acde', 'abce', 'abcde'),
				array('specialChars' => array('.' => '.?'))
			)
		);
	}

	/**
	* @testdox fromList(['h????', 'hello', 'heart'], ["specialChars" => ["?" => ".?"]]) returns 'h.?.?.?.?'
	*/
	public function test_8E765F3B()
	{
		$this->assertSame(
			'h.?.?.?.?',
			RegexpBuilder::fromList(
				array('h????', 'hello', 'heart'),
				array('specialChars' => array('?' => '.?'))
			)
		);
	}

	/**
	* @testdox fromList(['x', 'xx', 'xxx']) returns 'xx?x?'
	*/
	public function test_A55EF35C()
	{
		$this->assertSame(
			'xx?x?',
			RegexpBuilder::fromList(array('x', 'xx', 'xxx'))
		);
	}

	/**
	* @testdox fromList(['d', 'dd', 'ddd'], ["specialChars" => ["d" => "\\d"]]) returns '\\d\\d?\\d?'
	*/
	public function test_69AB5342()
	{
		$this->assertSame(
			'\\d\\d?\\d?',
			RegexpBuilder::fromList(
				array('d', 'dd', 'ddd'),
				array('specialChars' => array('d' => '\\d'))
			)
		);
	}
	// End of content generated by ../../../scripts/patchRegexpBuilderTest.php

	/**
	* @expectedException RuntimeException
	* @expectedExceptionMessage Invalid UTF-8 string
	* @testdox fromList() throws a RuntimeException if any word is not legal UTF-8
	*/
	public function testUTF8Exception()
	{
		RegexpBuilder::fromList(array("\xff\xff"));
	}

	public function getWordsLists()
	{
		return array(
			array(
				'foo',
				array('foo')
			),
			array(
				'foo',
				array('foo', 'foo')
			),
			array(
				'a',
				array('a')
			),
			array(
				'a',
				array('a', 'a')
			),
			array(
				'\\/',
				array('/'),
			),
			array(
				'/',
				array('/'),
				array('delimiter' => '#')
			),
			array(
				'\\#',
				array('#'),
				array('delimiter' => '#')
			),
			array(
				'ap(?:ple|ril)',
				array('apple', 'april')
			),
			array(
				'ba[rz]',
				array('bar', 'baz')
			),
			array(
				'fool?',
				array('foo', 'fool')
			),
			array(
				'ax(?:ed)?',
				array('ax', 'axed')
			),
			array(
				'[-!#$()*+.:<=>?[\\\\\\]{|}^]',
				str_split('!#$()*+-.:<=>?[\\]^{|}', 1)
			),
			array(
				'(?:x|^)y',
				array('xy', '^y'),
				array('specialChars' => array('^' => '^'))
			),
			array(
				'x(?:y|$)',
				array('xy', 'x$'),
				array('specialChars' => array('$' => '$'))
			),
			array(
				'(?:bar|foo)',
				array('foo', 'bar')
			),
			array(
				'(?=[*\\\\])(?:\\*foo|\\\\bar)',
				array('*foo', '\\bar'),
				array('useLookahead' => true)
			),
			array(
				'(?:.|bar)',
				// Here, we build a regexp that matches one single character or the word "bar"
				// The joker ? is replaced by the special character .
				array('?', 'bar'),
				array('specialChars' => array('?' => '.'), 'useLookahead' => true)
			),
			array(
				'[ab]',
				array('a', 'b')
			),
			array(
				'[♠♣♥♦]',
				array('♠', '♣', '♥', '♦')
			),
			array(
				'[ls]ock',
				array('lock', 'sock')
			),
			array(
				'(?=[af])a?foo',
				array('foo', 'afoo'),
				array('useLookahead' => true)
			),
			array(
				'bo[ao]st',
				array('boast', 'boost')
			),
			array(
				'pe?st',
				array('pest', 'pst')
			),
			array(
				'bo[ao]?st',
				array('boast', 'boost', 'bost')
			),
			array(
				'b(?:e|oo)st',
				array('boost', 'best')
			),
			array(
				'b(?:oo)?st',
				array('boost', 'bst')
			),
			array(
				'b(?:[eu]|oo)st',
				array('best', 'boost', 'bust')
			),
			array(
				'(?:b(?:oo)?st|cool)',
				array('boost', 'bst', 'cool')
			),
			array(
				'(?:b(?:oo)?|co)st',
				array('boost', 'bst', 'cost')
			),
			array(
				'aa[xy]',
				array('aax', 'aay', 'aax', 'aay')
			),
			array(
				'[ab]aa[xy]',
				array('aaax', 'aaay', 'baax', 'baay')
			),
			array(
				'(?:a|bb)aa[xy]',
				array('aaax', 'aaay', 'bbaax', 'bbaay')
			),
			array(
				'aaa?[xy]',
				array('aaax', 'aaay', 'aax', 'aay')
			),
			array(
				'(?:ab|cd)[xy]',
				array('abx', 'aby', 'cdx', 'cdy')
			),
			array(
				'(?:a|bb)(?:xx|yy)',
				array('axx', 'ayy', 'bbxx', 'bbyy')
			),
			array(
				'(?:c|(?:a|bb)(?:xx|yy))',
				array('axx', 'ayy', 'bbxx', 'bbyy', 'c')
			),
			array(
				// Ensure it doesn't become (?:c|(?:a|bb)(?:xx|yy)|azz) even though it would be
				// shorter, because having fewer alternations at the top level is more important
				'(?:c|a(?:xx|yy|zz)|bb(?:xx|yy))',
				array('axx', 'ayy', 'azz', 'bbxx', 'bbyy', 'c')
			),
			array(
				// We don't merge "ac", "af", "bbc" and "bbf" tails because the result
				// (?:c|(?:a|bb)[cf]) is neither more performant nor shorter
				'(?:c|a[cf]|bb[cf])',
				array('ac', 'af', 'bbc', 'bbf', 'c')
			),
			array(
				// Typical regexp used in UrlConfig for matching hostnames and subdomains
				'(?:\.|^)(?:example\\.org|localhost)$',
				array('^example.org$', '.example.org$', '^localhost$', '.localhost$'),
				array('specialChars' => array('^' => '^', '$' => '$'))
			),
			array(
				'x(?:ixi|oxo)x',
				array('xixix', 'xoxox')
			),
			array(
				'x[io]x[io]x',
				array('xixix', 'xixox', 'xoxox', 'xoxix')
			),
			array(
				'(?:a|bb)(?:bar|foo)?',
				array('afoo', 'abar', 'bbfoo', 'bbbar', 'a', 'bb')
			),
			array(
				'[ab][xy]',
				array('ax', 'ay', 'bx', 'by')
			),
			array(
				'(?:c|[ab][xy])',
				array('ax', 'ay', 'bx', 'by', 'c')
			),
			array(
				'[ab]?[xy]',
				array('ax', 'ay', 'bx', 'by', 'x', 'y')
			),
			// Ensure that merging tails does not create subpatterns
			array(
				'(?:c|a[xy]|bb[xy])',
				array('ax', 'ay', 'bbx', 'bby', 'c')
			),
			array(
				'(?:c|dd[xy]|[ab][xy])',
				array('ax', 'ay', 'bx', 'by', 'c', 'ddx', 'ddy')
			),
			// Those two only exist to make sure nothing bad happens (e.g. no infinite loop)
			array(
				'',
				array('')
			),
			array(
				'',
				array('', '')
			),
			array(
				'[ab]\\d',
				array('ad', 'bd'),
				array('specialChars' => array('d' => '\\d'))
			),
			array(
				'[\\da][\\dx]?',
				array('a', 'ax', 'ad', 'd', 'dx', 'dd'),
				array('specialChars' => array('d' => '\\d'))
			),
			// Ensure that character classes made from single characters appear first in alternation
			array(
				'(?:[yz]|bar|foo)',
				array('foo', 'bar', 'y', 'z')
			),
			array(
				'(?:[yz]|ba[rz]|foo)',
				array('foo', 'bar', 'baz', 'y', 'z')
			),
			array(
				'(?:a(?:a(?:cc|dd))?|bb(?:cc|dd))',
				array('a', 'aacc', 'aadd', 'bbcc', 'bbdd')
			),
			array(
				'(?:aa|bb)(?:cc|dd)?',
				array('aa', 'bb', 'aacc', 'aadd', 'bbcc', 'bbdd')
			),
			array(
				'(?:aa|bb)(?:(?:cc|dd)(?:xx|yy))?',
				array(
					'aa', 'bb',
					'aaccxx', 'aaddxx', 'bbccxx', 'bbddxx',
					'aaccyy', 'aaddyy', 'bbccyy', 'bbddyy'
				)
			),
			array(
				'^foo',
				array('^foo$', '^foo'),
				array('specialChars' => array('^' => '^', '$' => '$'))
			),
			array(
				'foo$',
				array('^foo$', 'foo$'),
				array('specialChars' => array('^' => '^', '$' => '$'))
			),
			array(
				'\\bfoo',
				array('bfoo', 'bfoob'),
				array('specialChars' => array('b' => '\\b'))
			),
			array(
				'apple.*?',
				array('apple', 'apple*'),
				array('specialChars' => array('*' => '.*?'))
			),
			array(
				'apple.*?',
				array('apple*', 'applepie'),
				array('specialChars' => array('*' => '.*?'))
			),
			array(
				'apple.+?',
				array('apple*', 'applepie'),
				array('specialChars' => array('*' => '.+?'))
			),
			array(
				'apple.*?',
				array('apple*', 'apple'),
				array('specialChars' => array('*' => '.*?'))
			),
			array(
				'apple.*',
				array('apple*', 'apple+'),
				array('specialChars' => array('*' => '.*?', '+' => '.*'))
			),
			array(
				'apple.+',
				array('apple*', 'apple+'),
				array('specialChars' => array('*' => '.+?', '+' => '.+'))
			),
			array(
				'apple.*',
				array('apple*', 'apple+'),
				array('specialChars' => array('*' => '.*', '+' => '.+'))
			),
			array(
				'.*pie',
				array('applepie', 'lemonpie', 'pie', '*pie'),
				array('specialChars' => array('*' => '.*'))
			),
			array(
				'.*pie.*',
				array('*pie*', 'lemonpie'),
				array('specialChars' => array('*' => '.*'))
			),
			array(
				'(?:.*pie.*|banana)',
				array('*pie*', 'lemonpie', 'banana'),
				array('specialChars' => array('*' => '.*'))
			),
			array(
				'^foo(?:$|.+)',
				array('^foo$', '^foo+'),
				array('specialChars' => array('^' => '^', '$' => '$', '+' => '.+'))
			),
			array(
				'^foo.*',
				array('^foo$', '^foo*'),
				array('specialChars' => array('^' => '^', '$' => '$', '*' => '.*'))
			),
			array(
				'foo.+',
				array('food', 'foo+'),
				array('specialChars' => array('d' => '\\d', '+' => '.+'))
			),
			array(
				'foo(?:.+|\\B)',
				array('fooB', 'foo+'),
				array('specialChars' => array('B' => '\\B', '+' => '.+'))
			),
			array(
				'(?:.+foo.+|foo\\B)',
				array('+foo+', 'fooB'),
				array('specialChars' => array('B' => '\\B', '+' => '.+'))
			),
			array(
				'(?:.+foo.+|bar|foo)',
				array('+foo+', 'foo', 'bar'),
				array('specialChars' => array('+' => '.+'))
			),
			array(
				'(?:.+foo.*|bar)',
				array('+foo+', '+foo', 'bar'),
				array('specialChars' => array('+' => '.+'))
			),
			array(
				'.+foo.*',
				array('+foo+', '+foo'),
				array('specialChars' => array('+' => '.+'))
			),
			array(
				'(?:a|.+.+)',
				array('++', 'a'),
				array('specialChars' => array('+' => '.+'))
			),
			array(
				'.',
				array('a', '.'),
				array('specialChars' => array('.' => '.'))
			),
			array(
				'h.p',
				array('hip', 'hop', 'h.p'),
				array('specialChars' => array('.' => '.'))
			),
			array(
				'h(?:i|.p)',
				array('hi', 'hop', 'h.p'),
				array('specialChars' => array('.' => '.'))
			),
			array(
				'h.?',
				array('h', 'h.'),
				array('specialChars' => array('.' => '.'))
			),
			array(
				'h(?:.|\\d\\d)',
				array('h.', 'hd'),
				array('specialChars' => array('.' => '.', 'd' => '\\d\\d'))
			),
			array(
				'h(?:...........|otel)',
				array('hXXXXXXXXXXX', 'h\\^$.[]()+*?', 'hotel'),
				array('specialChars' => array('X' => '.'))
			),
			/**
			* @link http://docs.php.net/manual/en/regexp.reference.escape.php
			*/
			array(
				'z(?:..........|ebra)',
				array('zdDhHsSvVwW', 'z..........', 'zebra'),
				array('specialChars' => array(
					'd' => '\\d', 'D' => 'D', 'h' => '\\h', 'H' => '\\H',
					's' => '\\s', 'S' => 'S', 'v' => '\\v', 'V' => '\\V',
					'w' => '\\w', 'W' => 'W', '.' => '.'
				))
			),
			array(
				'm(?:.|\\b)',
				array('m.', 'mb'),
				array('specialChars' => array('.' => '.', 'b' => '\\b'))
			),
			array(
				'm(?:.|\\B)',
				array('m.', 'mB'),
				array('specialChars' => array('.' => '.', 'B' => '\\B'))
			),
			array(
				'm(?:.|\\A)',
				array('m.', 'mA'),
				array('specialChars' => array('.' => '.', 'A' => '\\A'))
			),
			array(
				'm(?:.|\\Z)',
				array('m.', 'mZ'),
				array('specialChars' => array('.' => '.', 'Z' => '\\Z'))
			),
			array(
				'm(?:.|\\z)',
				array('m.', 'mz'),
				array('specialChars' => array('.' => '.', 'z' => '\\z'))
			),
			array(
				'm(?:.|\\G)',
				array('m.', 'mG'),
				array('specialChars' => array('.' => '.', 'G' => '\\G'))
			),
			array(
				'm(?:.|\\Q)',
				array('m.', 'mQ'),
				array('specialChars' => array('.' => '.', 'Q' => '\\Q'))
			),
			array(
				'm(?:.|\\E)',
				array('m.', 'mE'),
				array('specialChars' => array('.' => '.', 'E' => '\\E'))
			),
			array(
				'm(?:.|\\K)',
				array('m.', 'mK'),
				array('specialChars' => array('.' => '.', 'K' => '\\K'))
			),
			array(
				'h(?:$|.)',
				array('h$', 'h.'),
				array('specialChars' => array('.' => '.', '$' => '$'))
			),
			array(
				'h.?',
				array('h?', 'ha'),
				array('specialChars' => array('?' => '.?'))
			),
			array(
				'h(?:.|it)?',
				array('h.', 'hi', 'hit'),
				array('specialChars' => array('.' => '.?'))
			),
			array(
				'a.?c.?e',
				array('a.c.e', 'a.ce', 'ac.e', 'ace', 'acde', 'abce', 'abcde'),
				array('specialChars' => array('.' => '.?'))
			),
			array(
				'h.?.?.?.?',
				array('h????', 'hello', 'heart'),
				array('specialChars' => array('?' => '.?'))
			),
			array(
				'xx?x?',
				array('x', 'xx', 'xxx')
			),
			array(
				'\\d\\d?\\d?',
				array('d', 'dd', 'ddd'),
				array('specialChars' => array('d' => '\\d'))
			),
		);
	}
}