<?php

namespace s9e\TextFormatter\Tests\ConfigBuilder\Helpers\HTML5;

use s9e\TextFormatter\Tests\Test;
use s9e\TextFormatter\ConfigBuilder\Helpers\HTML5\TagProxy;

/**
* @covers s9e\TextFormatter\ConfigBuilder\Helpers\HTML5\TagProxy
*/
class TagProxyTest extends Test
{
	public function runCase($title, $xslSrc, $rule, $xslTrg)
	{
		$src = new TagProxy(array($xslSrc));
		$trg = new TagProxy(array($xslSrc));

		$methods = array(
			'allowChild'      => array('assertTrue', 'allowsChild'),
			'allowDescendant' => array('assertTrue', 'allowsDescendant'),
			'denyChild'       => array('assertFalse', 'allowsChild'),
			'denyDescendant'  => array('assertFalse', 'allowsDescendant'),
			'closeParent'     => array('assertTrue', 'closesParent')
		);

		list($assert, $method) = $methods[$rule];

		$this->$assert($src->$method($trg));
	}

	// Start of content generated by ../../../../scripts/patchTagProxyTest.php
	/**
	* @testdox <span> does not allow <div> as child
	*/
	public function testD335F821()
	{
		$this->runCase(
			'<span> does not allow <div> as child',
			'<span><xsl:apply-templates/></span>',
			'denyChild',
			'<div><xsl:apply-templates/></div>'
		);
	}

	/**
	* @testdox <span> does not allow <div> as child even with a <span> sibling
	*/
	public function test114C6685()
	{
		$this->runCase(
			'<span> does not allow <div> as child even with a <span> sibling',
			'<span><xsl:apply-templates/></span>',
			'denyChild',
			'<span>xxx</span><div><xsl:apply-templates/></div>'
		);
	}

	/**
	* @testdox <span> and <div> does not allow <span> and <div> as child
	*/
	public function test23AF0BBF()
	{
		$this->runCase(
			'<span> and <div> does not allow <span> and <div> as child',
			'<span><xsl:apply-templates/></span><div><xsl:apply-templates/></div>',
			'denyChild',
			'<span><xsl:apply-templates/></span><div><xsl:apply-templates/></div>'
		);
	}

	/**
	* @testdox <li> closes parent <li>
	*/
	public function testDD3FD8E7()
	{
		$this->runCase(
			'<li> closes parent <li>',
			'<li><xsl:apply-templates/></li>',
			'closeParent',
			'<li><xsl:apply-templates/></li>'
		);
	}

	/**
	* @testdox <div> closes parent <div>
	*/
	public function test8E182B48()
	{
		$this->runCase(
			'<div> closes parent <div>',
			'<div><xsl:apply-templates/></div>',
			'closeParent',
			'<div><xsl:apply-templates/></div>'
		);
	}

	/**
	* @testdox <div> closes parent <p>
	*/
	public function testC3F676C4()
	{
		$this->runCase(
			'<div> closes parent <p>',
			'<div><xsl:apply-templates/></div>',
			'closeParent',
			'<p><xsl:apply-templates/></p>'
		);
	}

	/**
	* @testdox <p> closes parent <div>
	*/
	public function test6D4D7CD2()
	{
		$this->runCase(
			'<p> closes parent <div>',
			'<p><xsl:apply-templates/></p>',
			'closeParent',
			'<div><xsl:apply-templates/></div>'
		);
	}

	/**
	* @testdox <p> closes parent <p>
	*/
	public function test30981871()
	{
		$this->runCase(
			'<p> closes parent <p>',
			'<p><xsl:apply-templates/></p>',
			'closeParent',
			'<p><xsl:apply-templates/></p>'
		);
	}

	/**
	* @testdox <a> denies <a> as descendant
	*/
	public function test515B99F7()
	{
		$this->runCase(
			'<a> denies <a> as descendant',
			'<a><xsl:apply-templates/></a>',
			'denyDescendant',
			'<a><xsl:apply-templates/></a>'
		);
	}

	/**
	* @testdox <a> allows <img> with no usemap attribute as child
	*/
	public function testFF711579()
	{
		$this->runCase(
			'<a> allows <img> with no usemap attribute as child',
			'<a><xsl:apply-templates/></a>',
			'allowChild',
			'<img/>'
		);
	}

	/**
	* @testdox <a> denies <img usemap="#foo"> as child
	*/
	public function testF13726A8()
	{
		$this->runCase(
			'<a> denies <img usemap="#foo"> as child',
			'<a><xsl:apply-templates/></a>',
			'denyChild',
			'<img usemap="#foo"/>'
		);
	}
	// End of content generated by ../../../../scripts/patchTagProxyTest.php

	public function getData()
	{
		return array(
			array(
				'<span> does not allow <div> as child',
				'<span><xsl:apply-templates/></span>',
				'denyChild',
				'<div><xsl:apply-templates/></div>'
			),
			array(
				'<span> does not allow <div> as child even with a <span> sibling',
				'<span><xsl:apply-templates/></span>',
				'denyChild',
				'<span>xxx</span><div><xsl:apply-templates/></div>'
			),
			array(
				'<span> and <div> does not allow <span> and <div> as child',
				'<span><xsl:apply-templates/></span><div><xsl:apply-templates/></div>',
				'denyChild',
				'<span><xsl:apply-templates/></span><div><xsl:apply-templates/></div>'
			),
			array(
				'<li> closes parent <li>',
				'<li><xsl:apply-templates/></li>',
				'closeParent',
				'<li><xsl:apply-templates/></li>'
			),
			array(
				'<div> closes parent <div>',
				'<div><xsl:apply-templates/></div>',
				'closeParent',
				'<div><xsl:apply-templates/></div>'
			),
			array(
				'<div> closes parent <p>',
				'<div><xsl:apply-templates/></div>',
				'closeParent',
				'<p><xsl:apply-templates/></p>'
			),
			array(
				'<p> closes parent <div>',
				'<p><xsl:apply-templates/></p>',
				'closeParent',
				'<div><xsl:apply-templates/></div>'
			),
			array(
				'<p> closes parent <p>',
				'<p><xsl:apply-templates/></p>',
				'closeParent',
				'<p><xsl:apply-templates/></p>'
			),
			array(
				'<a> denies <a> as descendant',
				'<a><xsl:apply-templates/></a>',
				'denyDescendant',
				'<a><xsl:apply-templates/></a>'
			),
			array(
				'<a> allows <img> with no usemap attribute as child',
				'<a><xsl:apply-templates/></a>',
				'allowChild',
				'<img/>'
			),
			array(
				'<a> denies <img usemap="#foo"> as child',
				'<a><xsl:apply-templates/></a>',
				'denyChild',
				'<img usemap="#foo"/>'
			)
		);
	}
}