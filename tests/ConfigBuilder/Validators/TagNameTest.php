<?php

namespace s9e\TextFormatter\Tests\ConfigBuilder\Validators;

use s9e\TextFormatter\Tests\Test;
use s9e\TextFormatter\ConfigBuilder\Validators\TagName;

/**
* @covers s9e\TextFormatter\ConfigBuilder\Validators\TagName
*/
class TagNameTest extends Test
{
	// Start of content generated by ../scripts/patchValidatorsTests.php
	/**
	* @testdox "b" is valid
	*/
	public function testValid71BEEFF9()
	{
		$this->assertTrue(TagName::isValid("b"));
	}

	/**
	* @testdox "b" is normalized to "B"
	*/
	public function testNormalize71BEEFF9()
	{
		$this->assertSame("B", TagName::normalize("b"));
	}

	/**
	* @testdox "B" is valid
	*/
	public function testValid4AD0CF31()
	{
		$this->assertTrue(TagName::isValid("B"));
	}

	/**
	* @testdox "B" is normalized to "B"
	*/
	public function testNormalize4AD0CF31()
	{
		$this->assertSame("B", TagName::normalize("B"));
	}

	/**
	* @testdox "_b" is valid
	*/
	public function testValidDF465310()
	{
		$this->assertTrue(TagName::isValid("_b"));
	}

	/**
	* @testdox "_b" is normalized to "_B"
	*/
	public function testNormalizeDF465310()
	{
		$this->assertSame("_B", TagName::normalize("_b"));
	}

	/**
	* @testdox "H1" is valid
	*/
	public function testValid28A7D7C8()
	{
		$this->assertTrue(TagName::isValid("H1"));
	}

	/**
	* @testdox "H1" is normalized to "H1"
	*/
	public function testNormalize28A7D7C8()
	{
		$this->assertSame("H1", TagName::normalize("H1"));
	}

	/**
	* @testdox "1H" is invalid (names must start with a letter)
	*/
	public function testValidFF83DCEF()
	{
		$this->assertFalse(TagName::isValid("1H"));
	}

	/**
	* @testdox "foo-bar" is invalid (no dashes allowed)
	*/
	public function testValid4C2CD9E9()
	{
		$this->assertFalse(TagName::isValid("foo-bar"));
	}

	/**
	* @testdox "foo:bar" is valid
	*/
	public function testValid81E2B6CF()
	{
		$this->assertTrue(TagName::isValid("foo:bar"));
	}

	/**
	* @testdox "foo:bar" is normalized to "foo:bar"
	*/
	public function testNormalize81E2B6CF()
	{
		$this->assertSame("foo:bar", TagName::normalize("foo:bar"));
	}

	/**
	* @testdox ":bar" is invalid (empty prefix)
	*/
	public function testValid376C9261()
	{
		$this->assertFalse(TagName::isValid(":bar"));
	}

	/**
	* @testdox "_foo:bar" is valid
	*/
	public function testValidF5AA57B2()
	{
		$this->assertTrue(TagName::isValid("_foo:bar"));
	}

	/**
	* @testdox "_foo:bar" is normalized to "_foo:bar"
	*/
	public function testNormalizeF5AA57B2()
	{
		$this->assertSame("_foo:bar", TagName::normalize("_foo:bar"));
	}

	/**
	* @testdox "Foo:bar" is valid
	*/
	public function testValid4E5F8F53()
	{
		$this->assertTrue(TagName::isValid("Foo:bar"));
	}

	/**
	* @testdox "Foo:bar" is normalized to "Foo:bar"
	*/
	public function testNormalize4E5F8F53()
	{
		$this->assertSame("Foo:bar", TagName::normalize("Foo:bar"));
	}

	/**
	* @testdox "f00:b4r" is valid
	*/
	public function testValid1B5FDE6()
	{
		$this->assertTrue(TagName::isValid("f00:b4r"));
	}

	/**
	* @testdox "f00:b4r" is normalized to "f00:b4r"
	*/
	public function testNormalize1B5FDE6()
	{
		$this->assertSame("f00:b4r", TagName::normalize("f00:b4r"));
	}

	/**
	* @testdox "foo_bar:baz" is valid
	*/
	public function testValidB8B6EAA6()
	{
		$this->assertTrue(TagName::isValid("foo_bar:baz"));
	}

	/**
	* @testdox "foo_bar:baz" is normalized to "foo_bar:baz"
	*/
	public function testNormalizeB8B6EAA6()
	{
		$this->assertSame("foo_bar:baz", TagName::normalize("foo_bar:baz"));
	}

	/**
	* @testdox "7up:foo" is invalid (prefix must start with a letter)
	*/
	public function testValidBE319CE9()
	{
		$this->assertFalse(TagName::isValid("7up:foo"));
	}

	/**
	* @testdox "foo:bar:baz" is invalid (only one colon allowed)
	*/
	public function testValid20BD4479()
	{
		$this->assertFalse(TagName::isValid("foo:bar:baz"));
	}

	/**
	* @testdox "xsl:foo" is invalid ('xsl' prefix is reserved)
	*/
	public function testValid7F3B00E7()
	{
		$this->assertFalse(TagName::isValid("xsl:foo"));
	}

	/**
	* @testdox "s9e:foo" is invalid ('s9e' prefix is reserved)
	*/
	public function testValidDEEF1F66()
	{
		$this->assertFalse(TagName::isValid("s9e:foo"));
	}

	/**
	* @testdox "B\n" is invalid (no newlines allowed)
	*/
	public function testValid6343D666()
	{
		$this->assertFalse(TagName::isValid("B\n"));
	}
	// End of content generated by ../scripts/patchValidatorsTests.php

	public static function getNames()
	{
		return array(
			'b'           => 'B',
			'B'           => 'B',
			'_b'          => '_B',
			'H1'          => 'H1',
			'1H'          => 'Invalid: names must start with a letter',
			'foo-bar'     => 'Invalid: no dashes allowed',
			'foo:bar'     => 'foo:bar',
			':bar'        => 'Invalid: empty prefix',
			'_foo:bar'    => '_foo:bar',
			'Foo:bar'     => 'Foo:bar',
			'f00:b4r'     => 'f00:b4r',
			'foo_bar:baz' => 'foo_bar:baz',
			'7up:foo'     => 'Invalid: prefix must start with a letter',
			'foo:bar:baz' => 'Invalid: only one colon allowed',
			'xsl:foo'     => "Invalid: 'xsl' prefix is reserved",
			's9e:foo'     => "Invalid: 's9e' prefix is reserved",
			"B\n"         => 'Invalid: no newlines allowed'
		);
	}
}