<?php

namespace s9e\TextFormatter\Tests\ConfigBuilder\Validators;

use s9e\TextFormatter\Tests\Test;
use s9e\TextFormatter\ConfigBuilder\Validators\AttributeName;

/**
* @covers s9e\TextFormatter\ConfigBuilder\Validators\AttributeName
*/
class AttributeNameTest extends Test
{
	// Start of content generated by ../scripts/patchValidatorsTests.php
	/**
	* @testdox "url" is valid
	*/
	public function testValidF47645AE()
	{
		$this->assertTrue(AttributeName::isValid("url"));
	}

	/**
	* @testdox "url" is normalized to "url"
	*/
	public function testNormalizeF47645AE()
	{
		$this->assertSame("url", AttributeName::normalize("url"));
	}

	/**
	* @testdox "URL" is valid
	*/
	public function testValid62D10724()
	{
		$this->assertTrue(AttributeName::isValid("URL"));
	}

	/**
	* @testdox "URL" is normalized to "url"
	*/
	public function testNormalize62D10724()
	{
		$this->assertSame("url", AttributeName::normalize("URL"));
	}

	/**
	* @testdox "_url" is valid
	*/
	public function testValidB91D5C54()
	{
		$this->assertTrue(AttributeName::isValid("_url"));
	}

	/**
	* @testdox "_url" is normalized to "_url"
	*/
	public function testNormalizeB91D5C54()
	{
		$this->assertSame("_url", AttributeName::normalize("_url"));
	}

	/**
	* @testdox "md5" is valid
	*/
	public function testValidE86CEBE1()
	{
		$this->assertTrue(AttributeName::isValid("md5"));
	}

	/**
	* @testdox "md5" is normalized to "md5"
	*/
	public function testNormalizeE86CEBE1()
	{
		$this->assertSame("md5", AttributeName::normalize("md5"));
	}

	/**
	* @testdox "5md" is invalid (names must start with a letter)
	*/
	public function testValid476D4EC2()
	{
		$this->assertFalse(AttributeName::isValid("5md"));
	}

	/**
	* @testdox "data-src" is valid
	*/
	public function testValidE5FEAD2F()
	{
		$this->assertTrue(AttributeName::isValid("data-src"));
	}

	/**
	* @testdox "data-src" is normalized to "data-src"
	*/
	public function testNormalizeE5FEAD2F()
	{
		$this->assertSame("data-src", AttributeName::normalize("data-src"));
	}

	/**
	* @testdox "foo:bar" is invalid (no colons allowed)
	*/
	public function testValid81E2B6CF()
	{
		$this->assertFalse(AttributeName::isValid("foo:bar"));
	}

	/**
	* @testdox "foo\n" is invalid (no newlines allowed)
	*/
	public function testValid7E3265A8()
	{
		$this->assertFalse(AttributeName::isValid("foo\n"));
	}
	// End of content generated by ../scripts/patchValidatorsTests.php

	public static function getNames()
	{
		return array(
			'url'      => 'url',
			'URL'      => 'url',
			'_url'     => '_url',
			'md5'      => 'md5',
			'5md'      => 'Invalid: names must start with a letter',
			'data-src' => 'data-src',
			'foo:bar'  => 'Invalid: no colons allowed',
			"foo\n"    => 'Invalid: no newlines allowed'
		);
	}
}