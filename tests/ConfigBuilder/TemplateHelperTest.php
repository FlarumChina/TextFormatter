<?php

namespace s9e\TextFormatter\Tests\ConfigBuilder;

use s9e\TextFormatter\Tests\Test,
    s9e\TextFormatter\ConfigBuilder\Tag,
    s9e\TextFormatter\ConfigBuilder\TemplateHelper;

include_once __DIR__ . '/../../src/autoloader.php';

/**
* @covers s9e\TextFormatter\ConfigBuilder\TemplateHelper
*/
class TemplateHelperTest extends Test
{
	/**
	* @testdox checkUnsafe() throws an exception on invalid XML
	* @expectedException InvalidArgumentException
	* @expectedExceptionMessage Invalid XML in template: Premature end of data in tag template
	*/
	public function testUnsafeInvalidXML()
	{
		TemplateHelper::checkUnsafe('<x>', new Tag);
	}

	// Start of content generated by ../scripts/patchTemplateHelperTest.php
	/**
	* @testdox checkUnsafe() identifies <xsl:element name="script"><xsl:apply-templates/></xsl:element> as unsafe
	*/
	public function testCheckUnsafeDFD7BBDF()
	{
		$this->testUnsafeTags(
			'The template contains a <script> tag that lets unfiltered data through',
			'<xsl:element name="script"><xsl:apply-templates/></xsl:element>'
		);
	}

	/**
	* @testdox checkUnsafe() identifies <script><xsl:apply-templates/></script> as unsafe
	*/
	public function testCheckUnsafe87044075()
	{
		$this->testUnsafeTags(
			'The template contains a <script> tag that lets unfiltered data through',
			'<script><xsl:apply-templates/></script>'
		);
	}

	/**
	* @testdox checkUnsafe() identifies <script src="{@foo}"/> as unsafe
	*/
	public function testCheckUnsafeE2434EF5()
	{
		$this->testUnsafeTags(
			'The template contains a <script> tag with a "src" attribute that uses user-supplied data',
			'<script src="{@foo}"/>'
		);
	}

	/**
	* @testdox checkUnsafe() identifies <script><xsl:attribute name="src"/></script> as unsafe
	*/
	public function testCheckUnsafeEB8D3BBA()
	{
		$this->testUnsafeTags(
			'The template contains a <script> tag with a "src" attribute generated dynamically',
			'<script><xsl:attribute name="src"/></script>'
		);
	}

	/**
	* @testdox checkUnsafe() identifies <xsl:element name="script"><xsl:attribute name="src"/></xsl:element> as unsafe
	*/
	public function testCheckUnsafe3494D2D0()
	{
		$this->testUnsafeTags(
			'The template contains a <script> tag with a "src" attribute generated dynamically',
			'<xsl:element name="script"><xsl:attribute name="src"/></xsl:element>'
		);
	}

	/**
	* @testdox checkUnsafe() identifies <script><xsl:if><xsl:attribute name="src"/></xsl:if></script> as unsafe
	*/
	public function testCheckUnsafeA51416F2()
	{
		$this->testUnsafeTags(
			'The template contains a <script> tag with a "src" attribute generated dynamically',
			'<script><xsl:if><xsl:attribute name="src"/></xsl:if></script>'
		);
	}

	/**
	* @testdox checkUnsafe() identifies <script><xsl:copy-of select="@src"/></script> as unsafe
	*/
	public function testCheckUnsafeA23A0663()
	{
		$this->testUnsafeTags(
			'The template contains a <script> tag with a <xsl:copy-of> descendant',
			'<script><xsl:copy-of select="@src"/></script>'
		);
	}

	/**
	* @testdox checkUnsafe() identifies <script><xsl:value-of select="@foo"/></script> as unsafe
	*/
	public function testCheckUnsafeAA242A38()
	{
		$this->testUnsafeTags(
			'The template uses unfiltered or improperly filtered attributes inside of a <script> tag',
			'<script><xsl:value-of select="@foo"/></script>'
		);
	}
	// End of content generated by ../scripts/patchTemplateHelperTest.php

	/**
	* @group dataProvider
	* @dataProvider getUnsafeTags
	*/
	public function testUnsafeTags($msg, $template, array $tagOptions = array())
	{
		$this->assertSame(
			$msg,
			TemplateHelper::checkUnsafe(
				$template,
				new Tag($tagOptions)
			)
		);
	}

	public function getUnsafeTags()
	{
		return array(
			array(
				'The template contains a <script> tag that lets unfiltered data through',
				'<xsl:element name="script"><xsl:apply-templates/></xsl:element>'
			),
			array(
				'The template contains a <script> tag that lets unfiltered data through',
				'<script><xsl:apply-templates/></script>'
			),
			array(
				'The template contains a <script> tag with a "src" attribute that uses user-supplied data',
				'<script src="{@foo}"/>'
			),
			array(
				'The template contains a <script> tag with a "src" attribute generated dynamically',
				'<script><xsl:attribute name="src"/></script>'
			),
			array(
				'The template contains a <script> tag with a "src" attribute generated dynamically',
				'<xsl:element name="script"><xsl:attribute name="src"/></xsl:element>'
			),
			array(
				'The template contains a <script> tag with a "src" attribute generated dynamically',
				'<script><xsl:if><xsl:attribute name="src"/></xsl:if></script>'
			),
			array(
				'The template contains a <script> tag with a <xsl:copy-of> descendant',
				'<script><xsl:copy-of select="@src"/></script>'
			),
			array(
				'The template uses unfiltered or improperly filtered attributes inside of a <script> tag',
				'<script><xsl:value-of select="@foo"/></script>'
			),
/**
			array(
				'The template uses unfiltered or improperly filtered attributes inside of a <script> tag',
				'<script><xsl:value-of select="@foo"/></script>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => '#number'
						)
					)
				)
			),
/**/
		);
	}
}