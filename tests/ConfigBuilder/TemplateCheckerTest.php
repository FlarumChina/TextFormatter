<?php

namespace s9e\TextFormatter\Tests\ConfigBuilder;

use s9e\TextFormatter\Tests\Test,
    s9e\TextFormatter\ConfigBuilder\Tag,
    s9e\TextFormatter\ConfigBuilder\TemplateChecker;

include_once __DIR__ . '/../../src/autoloader.php';

/**
* @covers s9e\TextFormatter\ConfigBuilder\TemplateChecker
*/
class TemplateCheckerTest extends Test
{
	/**
	* @testdox checkUnsafe() throws an exception on invalid XML
	* @expectedException InvalidArgumentException
	* @expectedExceptionMessage Invalid XML in template: Premature end of data in tag template
	*/
	public function testUnsafeInvalidXML()
	{
		TemplateChecker::checkUnsafe('<x>', new Tag);
	}

	// Start of content generated by ../scripts/patchTemplateCheckerTest.php
	/**
	* @testdox Not safe: <embed src="{@url}"/>
	*/
	public function testCheckUnsafe84611A0E()
	{
		$this->testCheckUnsafe(
			'<embed src="{@url}"/>',
			"The template contains a 'embed' element with a non-fixed URL"
		);
	}

	/**
	* @testdox Not safe: <iframe src="{@url}"/>
	*/
	public function testCheckUnsafeCC6F8591()
	{
		$this->testCheckUnsafe(
			'<iframe src="{@url}"/>',
			"The template contains a 'iframe' element with a non-fixed URL"
		);
	}

	/**
	* @testdox Not safe: <object src="{@url}"/>
	*/
	public function testCheckUnsafe4EC09145()
	{
		$this->testCheckUnsafe(
			'<object src="{@url}"/>',
			"The template contains a 'object' element with a non-fixed URL"
		);
	}

	/**
	* @testdox Not safe: <script src="{@url}"/>
	*/
	public function testCheckUnsafeA269924E()
	{
		$this->testCheckUnsafe(
			'<script src="{@url}"/>',
			"The template contains a 'script' element with a non-fixed URL"
		);
	}

	/**
	* @testdox Safe if attribute 'id' has filter '#number': <script src="https://gist.github.com/{@id}.js"/>
	*/
	public function testCheckUnsafe8641718F()
	{
		$this->testCheckUnsafe(
			'<script src="https://gist.github.com/{@id}.js"/>',
			NULL,
			array('attributes' => array('id' => array('filterChain' => array('#number'))))
		);
	}

	/**
	* @testdox Not safe: <SCRIPT src="{@url}"/>
	*/
	public function testCheckUnsafeECFD591A()
	{
		$this->testCheckUnsafe(
			'<SCRIPT src="{@url}"/>',
			"The template contains a 'SCRIPT' element with a non-fixed URL"
		);
	}

	/**
	* @testdox Not safe: <script SRC="{@url}"/>
	*/
	public function testCheckUnsafe677FB29A()
	{
		$this->testCheckUnsafe(
			'<script SRC="{@url}"/>',
			"The template contains a 'script' element with a non-fixed URL"
		);
	}

	/**
	* @testdox Not safe: <script><xsl:attribute name="src"><xsl:value-of select="@url"/></xsl:attribute></script>
	*/
	public function testCheckUnsafeAFAF8AE6()
	{
		$this->testCheckUnsafe(
			'<script><xsl:attribute name="src"><xsl:value-of select="@url"/></xsl:attribute></script>',
			"The template contains a 'script' element with a dynamically generated 'src' attribute that does not use a fixed URL"
		);
	}

	/**
	* @testdox Not safe: <script><xsl:attribute name="SRC"><xsl:value-of select="@url"/></xsl:attribute></script>
	*/
	public function testCheckUnsafe2B68C5D8()
	{
		$this->testCheckUnsafe(
			'<script><xsl:attribute name="SRC"><xsl:value-of select="@url"/></xsl:attribute></script>',
			"The template contains a 'script' element with a dynamically generated 'SRC' attribute that does not use a fixed URL"
		);
	}

	/**
	* @testdox Not safe: <script src="http://example.org/legit.js"><xsl:attribute name="src"><xsl:value-of select="@hax"/></xsl:attribute></script>
	*/
	public function testCheckUnsafe19C77C71()
	{
		$this->testCheckUnsafe(
			'<script src="http://example.org/legit.js"><xsl:attribute name="src"><xsl:value-of select="@hax"/></xsl:attribute></script>',
			"The template contains a 'script' element with a dynamically generated 'src' attribute that does not use a fixed URL"
		);
	}

	/**
	* @testdox Not safe: <xsl:element name="script"><xsl:attribute name="src"><xsl:value-of select="@url"/></xsl:attribute></xsl:element>
	*/
	public function testCheckUnsafeE3DAC5EC()
	{
		$this->testCheckUnsafe(
			'<xsl:element name="script"><xsl:attribute name="src"><xsl:value-of select="@url"/></xsl:attribute></xsl:element>',
			"The template contains a dynamically generated 'script' element with a dynamically generated 'src' attribute that does not use a fixed URL"
		);
	}

	/**
	* @testdox Not safe: <xsl:element name="SCRIPT"><xsl:attribute name="src"><xsl:value-of select="@url"/></xsl:attribute></xsl:element>
	*/
	public function testCheckUnsafeD895E8DF()
	{
		$this->testCheckUnsafe(
			'<xsl:element name="SCRIPT"><xsl:attribute name="src"><xsl:value-of select="@url"/></xsl:attribute></xsl:element>',
			"The template contains a dynamically generated 'SCRIPT' element with a dynamically generated 'src' attribute that does not use a fixed URL"
		);
	}

	/**
	* @testdox Not safe: <b disable-output-escaping="1"/>
	*/
	public function testCheckUnsafeAD7B4CE5()
	{
		$this->testCheckUnsafe(
			'<b disable-output-escaping="1"/>',
			"The template contains a 'disable-output-escaping' attribute"
		);
	}

	/**
	* @testdox Not safe: <xsl:copy/>
	*/
	public function testCheckUnsafeC1F83B08()
	{
		$this->testCheckUnsafe(
			'<xsl:copy/>',
			"Cannot assess the safety of an 'xsl:copy' element"
		);
	}

	/**
	* @testdox Not safe: <b><xsl:copy-of select="@onclick"/></b>
	*/
	public function testCheckUnsafe88ADF3EE()
	{
		$this->testCheckUnsafe(
			'<b><xsl:copy-of select="@onclick"/></b>',
			"Undefined attribute 'onclick'"
		);
	}

	/**
	* @testdox Not safe: <b><xsl:copy-of select=" @ onclick "/></b>
	*/
	public function testCheckUnsafe1910BA7D()
	{
		$this->testCheckUnsafe(
			'<b><xsl:copy-of select=" @ onclick "/></b>',
			"Undefined attribute 'onclick'"
		);
	}

	/**
	* @testdox Safe: <b><xsl:copy-of select="@title"/></b>
	*/
	public function testCheckUnsafe990F4294()
	{
		$this->testCheckUnsafe(
			'<b><xsl:copy-of select="@title"/></b>'
		);
	}

	/**
	* @testdox Safe: <b><xsl:copy-of select=" @ title "/></b>
	*/
	public function testCheckUnsafe358E72E5()
	{
		$this->testCheckUnsafe(
			'<b><xsl:copy-of select=" @ title "/></b>'
		);
	}

	/**
	* @testdox Not safe: <a><xsl:copy-of select="@href"/></a>
	*/
	public function testCheckUnsafeDA83422D()
	{
		$this->testCheckUnsafe(
			'<a><xsl:copy-of select="@href"/></a>',
			"Attribute 'href' is not properly filtered to be used in URL",
			array('attributes' => array('href' => array()))
		);
	}

	/**
	* @testdox Safe if attribute 'href' has filter '#url': <a><xsl:copy-of select="@href"/></a>
	*/
	public function testCheckUnsafe1C5EC7F5()
	{
		$this->testCheckUnsafe(
			'<a><xsl:copy-of select="@href"/></a>',
			NULL,
			array('attributes' => array('href' => array('filterChain' => array('#url'))))
		);
	}

	/**
	* @testdox Not safe: <xsl:copy-of select="script"/>
	*/
	public function testCheckUnsafeEFC1AC5D()
	{
		$this->testCheckUnsafe(
			'<xsl:copy-of select="script"/>',
			"Cannot assess 'xsl:copy-of' select expression 'script' to be safe"
		);
	}

	/**
	* @testdox Not safe: <xsl:copy-of select=" script "/>
	*/
	public function testCheckUnsafeD2943232()
	{
		$this->testCheckUnsafe(
			'<xsl:copy-of select=" script "/>',
			"Cannot assess 'xsl:copy-of' select expression 'script' to be safe"
		);
	}

	/**
	* @testdox Not safe: <xsl:copy-of select="parent::*"/>
	*/
	public function testCheckUnsafe14D8856E()
	{
		$this->testCheckUnsafe(
			'<xsl:copy-of select="parent::*"/>',
			"Cannot assess 'xsl:copy-of' select expression 'parent::*' to be safe"
		);
	}
	// End of content generated by ../scripts/patchTemplateCheckerTest.php

	/**
	* @group dataProvider
	* @dataProvider getUnsafeTemplatesTests
	*/
	public function testCheckUnsafe($template, $exceptionMsg = null, array $tagOptions = array())
	{
		if (isset($exceptionMsg))
		{
			$this->setExpectedException(
				's9e\\TextFormatter\\ConfigBuilder\\UnsafeTemplateException',
				$exceptionMsg
			);
		}

		TemplateChecker::checkUnsafe(
			$template,
			new Tag($tagOptions)
		);
	}

	public function getUnsafeTemplatesTests()
	{
		return array_merge(
			$this->getUnsafeFixedSrcTests(),
			$this->getUnsafeDisableOutputEscapingTests(),
			$this->getUnsafeCopyNodesTests(),
			$this->getUnsafeContentTests()
		);
	}

	public function getUnsafeFixedSrcTests()
	{
		return array(
			array(
				'<embed src="{@url}"/>',
				"The template contains a 'embed' element with a non-fixed URL"
			),
			array(
				'<iframe src="{@url}"/>',
				"The template contains a 'iframe' element with a non-fixed URL"
			),
			array(
				'<object src="{@url}"/>',
				"The template contains a 'object' element with a non-fixed URL"
			),
			array(
				'<script src="{@url}"/>',
				"The template contains a 'script' element with a non-fixed URL"
			),
			array(
				'<script src="https://gist.github.com/{@id}.js"/>',
				null,
				array(
					'attributes' => array(
						'id' => array(
							'filterChain' => array('#number')
						)
					)
				)
			),
			// Try working around the safeguards
			array(
				'<SCRIPT src="{@url}"/>',
				"The template contains a 'SCRIPT' element with a non-fixed URL"
			),
			array(
				'<script SRC="{@url}"/>',
				"The template contains a 'script' element with a non-fixed URL"
			),
			array(
				'<script><xsl:attribute name="src"><xsl:value-of select="@url"/></xsl:attribute></script>',
				"The template contains a 'script' element with a dynamically generated 'src' attribute that does not use a fixed URL"
			),
			array(
				'<script><xsl:attribute name="SRC"><xsl:value-of select="@url"/></xsl:attribute></script>',
				"The template contains a 'script' element with a dynamically generated 'SRC' attribute that does not use a fixed URL"
			),
			array(
				'<script src="http://example.org/legit.js"><xsl:attribute name="src"><xsl:value-of select="@hax"/></xsl:attribute></script>',
				"The template contains a 'script' element with a dynamically generated 'src' attribute that does not use a fixed URL"
			),
			array(
				'<xsl:element name="script"><xsl:attribute name="src"><xsl:value-of select="@url"/></xsl:attribute></xsl:element>',
				"The template contains a dynamically generated 'script' element with a dynamically generated 'src' attribute that does not use a fixed URL"
			),
			array(
				'<xsl:element name="SCRIPT"><xsl:attribute name="src"><xsl:value-of select="@url"/></xsl:attribute></xsl:element>',
				"The template contains a dynamically generated 'SCRIPT' element with a dynamically generated 'src' attribute that does not use a fixed URL"
			)
		);
	}

	public function getUnsafeDisableOutputEscapingTests()
	{
		return array(
			array(
				'<b disable-output-escaping="1"/>',
				"The template contains a 'disable-output-escaping' attribute"
			)
		);
	}

	public function getUnsafeCopyNodesTests()
	{
		return array(
			array(
				'<xsl:copy/>',
				"Cannot assess the safety of an 'xsl:copy' element"
			)
		);
	}

	public function getUnsafeContentTests()
	{
		return array_merge(
			$this->getUnsafeCopyOfNodesTests(),
			array()
		);
	}

	public function getUnsafeCopyOfNodesTests()
	{
		return array(
			array(
				'<b><xsl:copy-of select="@onclick"/></b>',
				"Undefined attribute 'onclick'"
			),
			array(
				'<b><xsl:copy-of select=" @ onclick "/></b>',
				"Undefined attribute 'onclick'"
			),
			array(
				'<b><xsl:copy-of select="@title"/></b>'
			),
			array(
				'<b><xsl:copy-of select=" @ title "/></b>'
			),
			array(
				'<a><xsl:copy-of select="@href"/></a>',
				"Attribute 'href' is not properly filtered to be used in URL",
				array(
					'attributes' => array(
						'href' => array()
					)
				)
			),
			array(
				'<a><xsl:copy-of select="@href"/></a>',
				null,
				array(
					'attributes' => array(
						'href' => array(
							'filterChain' => array('#url')
						)
					)
				)
			),
			array(
				'<xsl:copy-of select="script"/>',
				"Cannot assess 'xsl:copy-of' select expression 'script' to be safe"
			),
			array(
				'<xsl:copy-of select=" script "/>',
				"Cannot assess 'xsl:copy-of' select expression 'script' to be safe"
			),
			array(
				'<xsl:copy-of select="parent::*"/>',
				"Cannot assess 'xsl:copy-of' select expression 'parent::*' to be safe"
			),
		);
	}
/**
			array(
				'<xsl:element name="script"><xsl:apply-templates/></xsl:element>',
				"A dynamically generated 'script' element lets unfiltered data through"
			),
			array(
				'<xsl:element name="SCRIPT"><xsl:apply-templates/></xsl:element>',
				"A dynamically generated 'SCRIPT' element lets unfiltered data through"
			),
			array(
				'<script><xsl:apply-templates/></script>',
				"A 'script' element lets unfiltered data through"
			),
			array(
				'<SCRIPT><xsl:apply-templates/></SCRIPT>',
				"A 'SCRIPT' element lets unfiltered data through"
			),
			array(
				'<script src="http://localhost/{@foo}"/>',
				"Undefined attribute 'foo'"
			),
			array(
				'<SCRIPT src="http://localhost/{@foo}"/>',
				"Undefined attribute 'foo'"
			),
			array(
				'<script><xsl:value-of select="@foo"/></script>',
				"Undefined attribute 'foo'"
			),
			array(
				'<script><xsl:value-of select="@foo"/></script>',
				"Attribute 'foo' is not properly filtered to be used in JS",
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#raw')
						)
					)
				)
			),
			array(
				'<script><xsl:value-of select="@foo"/></script>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#url')
						)
					)
				)
			),
			array(
				'<script><xsl:value-of select="@foo"/></script>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#int')
						)
					)
				)
			),
			array(
				'<script><xsl:value-of select="@foo"/></script>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#float')
						)
					)
				)
			),
			array(
				'<script><xsl:value-of select="@foo"/></script>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#range')
						)
					)
				)
			),
			array(
				'<script><xsl:value-of select="@foo"/></script>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#number')
						)
					)
				)
			),
			array(
				'<script><xsl:value-of select="@foo"/></script>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#simpletext')
						)
					)
				)
			),
			array(
				'<xsl:element name="style"><xsl:apply-templates/></xsl:element>',
				"A dynamically generated 'style' element lets unfiltered data through"
			),
			array(
				'<style><xsl:apply-templates/></style>',
				"A 'style' element lets unfiltered data through"
			),
			array(
				'<style><xsl:value-of select="@foo"/></style>',
				""
			),
			array(
				'<style><xsl:value-of select="@foo"/></style>',
				"Attribute 'foo' is not properly filtered to be used in CSS",
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#raw')
						)
					)
				)
			),
			array(
				'<style><xsl:value-of select="@foo"/></style>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#url')
						)
					)
				)
			),
			array(
				'<style><xsl:value-of select="@foo"/></style>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#int')
						)
					)
				)
			),
			array(
				'<style><xsl:value-of select="@foo"/></style>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#uint')
						)
					)
				)
			),
			array(
				'<style><xsl:value-of select="@foo"/></style>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#float')
						)
					)
				)
			),
			array(
				'<style><xsl:value-of select="@foo"/></style>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#color')
						)
					)
				)
			),
			array(
				'<style><xsl:value-of select="@foo"/></style>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#range')
						)
					)
				)
			),
			array(
				'<style><xsl:value-of select="@foo"/></style>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#number')
						)
					)
				)
			),
			array(
				'<style><xsl:value-of select="@foo"/></style>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#simpletext')
						)
					)
				)
			),
			array(
				'<b style="color:{@foo}"/>',
				"Undefined attribute 'foo'"
			),
			array(
				'<b STYLE="color:{@foo}"/>',
				"Undefined attribute 'foo'"
			),
			array(
				'<b style="color:{@foo}"/>',
				"Attribute 'foo' is not properly filtered to be used in CSS",
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#raw')
						)
					)
				)
			),
			array(
				'<b style="color:{@foo}"/>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#url')
						)
					)
				)
			),
			array(
				'<b style="color:{@foo}"/>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#int')
						)
					)
				)
			),
			array(
				'<b style="color:{@foo}"/>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#uint')
						)
					)
				)
			),
			array(
				'<b style="color:{@foo}"/>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#float')
						)
					)
				)
			),
			array(
				'<b style="color:{@foo}"/>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#color')
						)
					)
				)
			),
			array(
				'<b style="color:{@foo}"/>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#range')
						)
					)
				)
			),
			array(
				'<b style="color:{@foo}"/>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#number')
						)
					)
				)
			),
			array(
				'<b style="color:{@foo}"/>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#simpletext')
						)
					)
				)
			),
			array(
				'<b><xsl:attribute name="style"><xsl:apply-templates/></xsl:attribute></b>',
				"A dynamically generated 'style' attribute lets unfiltered data through",
			),
			array(
				'<b style=""><xsl:attribute name="style"><xsl:apply-templates/></xsl:attribute></b>',
				"A dynamically generated 'style' attribute lets unfiltered data through",
			),
			array(
				'<b><xsl:attribute name="STYLE"><xsl:apply-templates/></xsl:attribute></b>',
				"A dynamically generated 'STYLE' attribute lets unfiltered data through",
			),
			array(
				'<b style=""><xsl:attribute name="STYLE"><xsl:apply-templates/></xsl:attribute></b>',
				"A dynamically generated 'STYLE' attribute lets unfiltered data through",
			),
			array(
				'<b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b>',
				"Undefined attribute 'foo'",
			),
			array(
				'<b><xsl:attribute name="STYLE"><xsl:value-of select="@foo"/></xsl:attribute></b>',
				"Undefined attribute 'foo'",
			),
			array(
				'<b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b>',
				"Attribute 'foo' is not properly filtered to be used in CSS",
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#raw')
						)
					)
				)
			),
			array(
				'<b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#url')
						)
					)
				)
			),
			array(
				'<b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#int')
						)
					)
				)
			),
			array(
				'<b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#uint')
						)
					)
				)
			),
			array(
				'<b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#float')
						)
					)
				)
			),
			array(
				'<b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#color')
						)
					)
				)
			),
			array(
				'<b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#range')
						)
					)
				)
			),
			array(
				'<b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#number')
						)
					)
				)
			),
			array(
				'<b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b>',
				null,
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#simpletext')
						)
					)
				)
			),
			array(
				'<a href="{@foo}"/>',
				"The template uses unfiltered or improperly filtered attributes where a valid URL is expected"
			),
			array(
				"The template uses unfiltered or improperly filtered attributes where a valid URL is expected",
				'<a HREF="{@foo}"/>'
			),
			array(
				'The template uses unfiltered or improperly filtered attributes inside of a dynamically generated attribute that expects a valid URL',
				'<a><xsl:attribute name="href"><xsl:value-of select="@foo"/></xsl:attribute></a>'
			),
			array(
				'The template uses unfiltered or improperly filtered attributes inside of a dynamically generated attribute that expects a valid URL',
				'<a><xsl:attribute name="HREF"><xsl:value-of select="@foo"/></xsl:attribute></a>'
			),
			array(
				"The template uses unfiltered or improperly filtered attributes where a valid URL is expected",
				'<form action="{@foo}"/>'
			),
			array(
				"The template uses unfiltered or improperly filtered attributes where a valid URL is expected",
				'<q cite="{@foo}"/>'
			),
			array(
				"The template uses unfiltered or improperly filtered attributes where a valid URL is expected",
				'<object data="{@foo}"/>'
			),
			array(
				"The template uses unfiltered or improperly filtered attributes where a valid URL is expected",
				'<button formaction="{@foo}"/>'
			),
			array(
				"The template uses unfiltered or improperly filtered attributes where a valid URL is expected",
				'<html manifest="{@foo}"/>'
			),
			array(
				"The template uses unfiltered or improperly filtered attributes where a valid URL is expected",
				'<video poster="{@foo}"/>'
			),
			array(
				"The template uses unfiltered or improperly filtered attributes where a valid URL is expected",
				'<img src="{@foo}"/>'
			),
			array(
				false,
				'<a href="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#url')
						)
					)
				)
			),
			array(
				false,
				'<a href="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('urlencode')
						)
					)
				)
			),
			array(
				false,
				'<a href="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('rawurlencode')
						)
					)
				)
			),
			array(
				false,
				'<a href="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#id')
						)
					)
				)
			),
			array(
				false,
				'<a href="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#int')
						)
					)
				)
			),
			array(
				false,
				'<a href="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#uint')
						)
					)
				)
			),
			array(
				false,
				'<a href="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#float')
						)
					)
				)
			),
			array(
				false,
				'<a href="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#range')
						)
					)
				)
			),
			array(
				false,
				'<a href="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#number')
						)
					)
				)
			),
			array(
				'The template uses unfiltered or improperly filtered attributes where a valid URL is expected',
				'<a href="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#regexp'),
							'regexp'      => '#[0-9]+#'
						)
					)
				)
			),
			array(
				false,
				'<a href="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#regexp'),
							'regexp'      => '#^[0-9]+$#'
						)
					)
				)
			),
			array(
				'The template uses unfiltered or improperly filtered attributes where a valid URL is expected',
				'<a href="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#regexp'),
							'regexp'      => '#^[a-z]+:[a-z]+$#'
						)
					)
				)
			),
			array(
				'The template contains a dynamically generated attribute that expects a valid URL but lets unfiltered data through',
				'<a><xsl:attribute name="href"><xsl:apply-templates/></xsl:attribute></a>'
			),
			array(
				'The template contains a dynamically generated attribute that expects a valid URL but lets unfiltered data through',
				'<a><xsl:attribute name="HREF"><xsl:apply-templates/></xsl:attribute></a>'
			),
			array(
				'The template uses unfiltered or improperly filtered attributes inside of an HTML event attribute',
				'<b onclick="{@foo}"/>'
			),
			array(
				'The template uses unfiltered or improperly filtered attributes inside of an HTML event attribute',
				'<b ONCLICK="{@foo}"/>'
			),
			array(
				false,
				'<b onclick="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#url')
						)
					)
				)
			),
			array(
				false,
				'<b onclick="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#int')
						)
					)
				)
			),
			array(
				false,
				'<b onclick="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#uint')
						)
					)
				)
			),
			array(
				false,
				'<b onclick="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#float')
						)
					)
				)
			),
			array(
				false,
				'<b onclick="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#range')
						)
					)
				)
			),
			array(
				false,
				'<b onclick="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#number')
						)
					)
				)
			),
			array(
				false,
				'<b onclick="{@foo}"/>',
				array(
					'attributes' => array(
						'foo' => array(
							'filterChain' => array('#simpletext')
						)
					)
				)
			),
			array(
				'The template uses unfiltered or improperly filtered attributes inside of a dynamically created HTML event attribute',
				'<b><xsl:attribute name="onclick"><xsl:value-of select="@foo"/></xsl:attribute></b>'
			),
			array(
				'The template uses unfiltered or improperly filtered attributes inside of a dynamically created HTML event attribute',
				'<b><xsl:attribute name="ONCLICK"><xsl:value-of select="@foo"/></xsl:attribute></b>'
			),
			array(
				'The template contains an HTML event attribute that lets unfiltered data through',
				'<b><xsl:attribute name="onclick"><xsl:apply-templates/></xsl:attribute></b>'
			),
			array(
				'The template contains an HTML event attribute that lets unfiltered data through',
				'<b><xsl:attribute name="ONCLICK"><xsl:apply-templates/></xsl:attribute></b>'
			),
		);
	}
/**/
}