<?php

namespace s9e\TextFormatter\Tests\Parser;

use s9e\TextFormatter\Parser\BuiltInFilters;
use s9e\TextFormatter\Tests\Test;

/**
* @covers s9e\TextFormatter\Parser\BuiltInFilters
*/
class BuiltInFiltersTestTest extends Test
{
	protected function assertFilterValueIsValid($filterName, $original, $expected = null)
	{
		$methodName = 'filter' . ucfirst($filterName);
		$this->assertSame(
			(string) ($expected ?: $original),
			(string) (BuiltInFilters::$methodName($original))
		);
	}

	protected function assertFilterValueIsInvalid($filterName, $original)
	{
		$methodName = 'filter' . ucfirst($filterName);
		$this->assertFalse(BuiltInFilters::$methodName($original));
	}

	// Start of content generated by /scripts/patchBuiltInFiltersTest.php
	/** @testdox Filter "int" accepts strings made entirely of digits */
	public function testFilter1F7A28A7() { $this->assertFilterValueIsValid('int', '123'); }

	/** @testdox Filter "int" rejects strings that starts with digits */
	public function testFilter116C5C3D() { $this->assertFilterValueIsInvalid('int', '123abc'); }

	/** @testdox Filter "int" accepts integers */
	public function testFilter71A15126() { $this->assertFilterValueIsValid('int', 123); }

	/** @testdox Filter "int" rejects numbers that start with a zero */
	public function testFilter6F87CB09() { $this->assertFilterValueIsInvalid('int', '0123'); }

	/** @testdox Filter "int" accepts negative numbers */
	public function testFilter842531BE() { $this->assertFilterValueIsValid('int', '-123'); }

	/** @testdox Filter "int" rejects decimal numbers */
	public function testFilterA6188FB2() { $this->assertFilterValueIsInvalid('int', '12.3'); }

	/** @testdox Filter "int" rejects floats */
	public function testFilter1E8CA4A3() { $this->assertFilterValueIsInvalid('int', 12.3); }

	/** @testdox Filter "int" rejects numbers too big for the PHP integer type */
	public function testFilterEB4A7C06() { $this->assertFilterValueIsInvalid('int', '10000000000000000000'); }

	/** @testdox Filter "int" rejects positive numbers in E notation */
	public function testFilterA66C0225() { $this->assertFilterValueIsInvalid('int', '12e3'); }

	/** @testdox Filter "int" rejects negative numbers in E notation */
	public function testFilterD06DEED2() { $this->assertFilterValueIsInvalid('int', '-12e3'); }

	/** @testdox Filter "int" rejects positive numbers in E notation with a negative exponent */
	public function testFilter678A8444() { $this->assertFilterValueIsInvalid('int', '12e-3'); }

	/** @testdox Filter "int" rejects negative numbers in E notation with a negative exponent */
	public function testFilter7BF8A341() { $this->assertFilterValueIsInvalid('int', '-12e-3'); }

	/** @testdox Filter "int" rejects numbers in hex notation */
	public function testFilterBFD59AD0() { $this->assertFilterValueIsInvalid('int', '0x123'); }

	/** @testdox Filter "uint" accepts strings made entirely of digits */
	public function testFilterD1131264() { $this->assertFilterValueIsValid('uint', '123'); }

	/** @testdox Filter "uint" rejects strings that starts with digits */
	public function testFilterDF0566FE() { $this->assertFilterValueIsInvalid('uint', '123abc'); }

	/** @testdox Filter "uint" accepts integers */
	public function testFilter4ACE59AF() { $this->assertFilterValueIsValid('uint', 123); }

	/** @testdox Filter "uint" rejects numbers that start with a zero */
	public function testFilter6759977E() { $this->assertFilterValueIsInvalid('uint', '0123'); }

	/** @testdox Filter "uint" rejects negative numbers */
	public function testFilterFF56D570() { $this->assertFilterValueIsInvalid('uint', '-123'); }

	/** @testdox Filter "uint" rejects decimal numbers */
	public function testFilter6B8D3DC2() { $this->assertFilterValueIsInvalid('uint', '12.3'); }

	/** @testdox Filter "uint" rejects floats */
	public function testFilterEDBC82E2() { $this->assertFilterValueIsInvalid('uint', 12.3); }

	/** @testdox Filter "uint" rejects numbers too big for the PHP integer type */
	public function testFilter4BC17ACC() { $this->assertFilterValueIsInvalid('uint', '10000000000000000000'); }

	/** @testdox Filter "uint" rejects positive numbers in E notation */
	public function testFilterAEB25E52() { $this->assertFilterValueIsInvalid('uint', '12e3'); }

	/** @testdox Filter "uint" rejects negative numbers in E notation */
	public function testFilterD8B3B2A5() { $this->assertFilterValueIsInvalid('uint', '-12e3'); }

	/** @testdox Filter "uint" rejects positive numbers in E notation with a negative exponent */
	public function testFilter436E178E() { $this->assertFilterValueIsInvalid('uint', '12e-3'); }

	/** @testdox Filter "uint" rejects negative numbers in E notation with a negative exponent */
	public function testFilter5F1C308B() { $this->assertFilterValueIsInvalid('uint', '-12e-3'); }

	/** @testdox Filter "uint" rejects numbers in hex notation */
	public function testFilterF841FE53() { $this->assertFilterValueIsInvalid('uint', '0x123'); }

	/** @testdox Filter "number" accepts strings made entirely of digits */
	public function testFilterAFC257FC() { $this->assertFilterValueIsValid('number', '123'); }

	/** @testdox Filter "number" rejects strings that starts with digits */
	public function testFilterA1D42366() { $this->assertFilterValueIsInvalid('number', '123abc'); }

	/** @testdox Filter "number" accepts integers */
	public function testFilter2E850068() { $this->assertFilterValueIsValid('number', 123); }

	/** @testdox Filter "number" accepts numbers that start with a zero */
	public function testFilterE618B0FB() { $this->assertFilterValueIsValid('number', '0123', '123'); }

	/** @testdox Filter "number" rejects negative numbers */
	public function testFilter30551C18() { $this->assertFilterValueIsInvalid('number', '-123'); }

	/** @testdox Filter "number" rejects decimal numbers */
	public function testFilterD2D1CCF4() { $this->assertFilterValueIsInvalid('number', '12.3'); }

	/** @testdox Filter "number" rejects floats */
	public function testFilter733E2897() { $this->assertFilterValueIsInvalid('number', 12.3); }

	/** @testdox Filter "number" accepts numbers too big for the PHP integer type */
	public function testFilter662B74D6() { $this->assertFilterValueIsValid('number', '10000000000000000000'); }

	/** @testdox Filter "number" rejects positive numbers in E notation */
	public function testFilterCE8B7B5F() { $this->assertFilterValueIsInvalid('number', '12e3'); }

	/** @testdox Filter "number" rejects negative numbers in E notation */
	public function testFilterB88A97A8() { $this->assertFilterValueIsInvalid('number', '-12e3'); }

	/** @testdox Filter "number" rejects positive numbers in E notation with a negative exponent */
	public function testFilterFD2AC9EC() { $this->assertFilterValueIsInvalid('number', '12e-3'); }

	/** @testdox Filter "number" rejects negative numbers in E notation with a negative exponent */
	public function testFilterE158EEE9() { $this->assertFilterValueIsInvalid('number', '-12e-3'); }

	/** @testdox Filter "number" rejects numbers in hex notation */
	public function testFilter1F71372D() { $this->assertFilterValueIsInvalid('number', '0x123'); }

	/** @testdox Filter "float" accepts strings made entirely of digits */
	public function testFilterE3FDD487() { $this->assertFilterValueIsValid('float', '123'); }

	/** @testdox Filter "float" rejects strings that starts with digits */
	public function testFilterEDEBA01D() { $this->assertFilterValueIsInvalid('float', '123abc'); }

	/** @testdox Filter "float" accepts integers */
	public function testFilter2438CF34() { $this->assertFilterValueIsValid('float', 123); }

	/** @testdox Filter "float" accepts numbers that start with a zero */
	public function testFilterB08B95DA() { $this->assertFilterValueIsValid('float', '0123', '123'); }

	/** @testdox Filter "float" accepts negative numbers */
	public function testFilterCFD60DB9() { $this->assertFilterValueIsValid('float', '-123'); }

	/** @testdox Filter "float" accepts decimal numbers */
	public function testFilter5EAA1D2D() { $this->assertFilterValueIsValid('float', '12.3'); }

	/** @testdox Filter "float" accepts floats */
	public function testFilter44B17C77() { $this->assertFilterValueIsValid('float', 12.3); }

	/** @testdox Filter "float" accepts numbers too big for the PHP integer type */
	public function testFilterEFD8B44B() { $this->assertFilterValueIsValid('float', '10000000000000000000'); }

	/** @testdox Filter "float" accepts positive numbers in E notation */
	public function testFilter79605CF6() { $this->assertFilterValueIsValid('float', '12e3', '12000'); }

	/** @testdox Filter "float" accepts negative numbers in E notation */
	public function testFilter0F61B001() { $this->assertFilterValueIsValid('float', '-12e3', '-12000'); }

	/** @testdox Filter "float" accepts positive numbers in E notation with a negative exponent */
	public function testFilterD7DB86E9() { $this->assertFilterValueIsValid('float', '12e-3', '0.012'); }

	/** @testdox Filter "float" accepts negative numbers in E notation with a negative exponent */
	public function testFilterCBA9A1EC() { $this->assertFilterValueIsValid('float', '-12e-3', '-0.012'); }

	/** @testdox Filter "float" rejects numbers in hex notation */
	public function testFilter4A4B9639() { $this->assertFilterValueIsInvalid('float', '0x123'); }
	// End of content generated by /scripts/patchBuiltInFiltersTest.php
}