s9e\TextFormatter\Tests\ConfigBuilder
 [x] Can load plugins
 [x] Loaded plugins are available as a public property
 [x] Can unload plugins by unsetting them
 [x] Loads plugins on magic __get()
 [x] Has a magic property $predefinedTags that creates an instance of PredefinedTags on access
 [x] Throws a RuntimeException on unsupported magic __get()
 [x] loadPlugin() throws an exception on invalid plugin name
 [x] loadPlugin() throws an exception on unknown plugin

s9e\TextFormatter\Tests\ConfigBuilder\Collection
 [x] add() creates and returns a new instance of the Item class if a second argument is not passed
 [x] add() creates and returns a new instance of the Item class if the second argument is not an instance of the Item class
 [x] add() passes all of its arguments after the first to the Item constructor if its second argument is not an instance of the Item class
 [x] add() calls the item's normalizeName() method
 [x] get() throws a RuntimeException if the item already exists
 [x] exists() returns TRUE if the item exists
 [x] exists() returns FALSE if the item does not exist
 [x] exists() calls the item's normalizeName() method
 [x] get() returns an item by name
 [x] get() calls the item's normalizeName() method
 [x] get() throws a RuntimeException if the item does not exist
 [x] remove() removes an item by name
 [x] remove() calls the item's normalizeName() method
 [x] remove() throws a RuntimeException if the item does not exist
 [x] clear() removes all items from the collection
 [x] rename() creates an entry for the new name
 [x] rename() removes the entry for the old name
 [x] rename() throws a RuntimeException if the item does not exist
 [x] rename() throws a RuntimeException if the new name is already taken
 [x] Collection is iterable with foreach, with item names as keys and items as values

s9e\TextFormatter\Tests\ConfigBuilder\ConfigurableItem
 [x] __get($k) calls getOption($k)
 [x] __set() calls setOption($k, $v)
 [x] getOption() throws an InvalidArgumentException if the option does not exist
 [x] $item->getOption($k) returns $item->$k if it exists
 [x] $item->getOption($k) returns null if $item->$k is null
 [x] getOptions() returns all of the item's properties
 [x] setOption() throws an InvalidArgumentException if the option does not exist
 [x] $item->setOption('foo', 42) calls $item->setFoo(42) if it exists
 [x] $item->setOption($k, $v) invokes $item->$k->clear() if $item->$k is a Collection
 [x] $item->setOption($k, $v) invokes $item->$k->add() for every iteration of $v
 [x] setOption() preserves the type of the option it changes
 [x] setOptions($options) calls setOption() for every element in $options

s9e\TextFormatter\Tests\ConfigBuilder\Filter
 [x] __construct($callback) throws a InvalidArgumentException if $callback is not callable

s9e\TextFormatter\Tests\ConfigBuilder\FilterChain
 [x] append() and prepend() accept default filters such as '#int'
 [x] append() and prepend() accept simple callbacks such as 'strtolower'
 [x] append() and prepend() accept static class method calls such as array('Class', 'staticMethod')
 [x] append() and prepend() accept static class method calls such as array('Class::staticMethod')
 [x] append() and prepend() accept object method calls such as array($this, 'method')
 [x] append() and prepend() accept Filter objects
 [x] append() and prepend() accept closures
 [x] append() throws a InvalidArgumentException if its argument is not callable
 [x] prepend() throws a InvalidArgumentException if its argument is not callable
 [x] get() returns all filters in an array
 [x] get() returns default filters such as '#int' as strings
 [x] get() returns other filters as Filter objects
 [x] clear() removes all filters
 [x] has('#int') returns true if '#int' is in the chain
 [x] has('#int') returns false if '#number' only is in the chain
 [x] has('strtolower') returns true if 'strtolower' is in the chain
 [x] has('strtolower') returns false if only 'trim' is in the chain
 [x] has($FilterObject) returns true if $FilterObject is in the chain
 [x] has($FilterObject) returns true if $FilterObjectClone is in the chain
 [x] has($FilterObject) returns false if only $SomeOtherFilterObject is in the chain
 [x] FilterChain is iterable with foreach, with filter position key and filter as value

s9e\TextFormatter\Tests\RegexpHelper
 [x] buildRegexpFromList(['foo']) returns 'foo'
 [x] buildRegexpFromList(['foo', 'foo']) returns 'foo'
 [x] buildRegexpFromList(['a']) returns 'a'
 [x] buildRegexpFromList(['a', 'a']) returns 'a'
 [x] buildRegexpFromList(['apple', 'april']) returns 'ap(?:ple|ril)'
 [x] buildRegexpFromList(['bar', 'baz']) returns 'ba[rz]'
 [x] buildRegexpFromList(['foo', 'fool']) returns 'fool?'
 [x] buildRegexpFromList(['ax', 'axed']) returns 'ax(?:ed)?'
 [x] buildRegexpFromList(['!', '#', '$', '(', ')', '*', '+', '-', '.', ':', '<', '=', '>', '?', '[', '\\', ']', '^', '{', '|', '}']) returns '[-!:<=>\\#\\\\\\]}$()*+.?[{|^]'
 [x] buildRegexpFromList(['a', '.'], ["specialChars" => ["." => "."]]) returns '(?:a|.)'
 [x] buildRegexpFromList(['xy', '^y'], ["specialChars" => ["^" => "^"]]) returns '(?:x|^)y'
 [x] buildRegexpFromList(['xy', 'x$'], ["specialChars" => ["$" => "$"]]) returns 'x(?:y|$)'
 [x] buildRegexpFromList(['foo', 'bar']) returns '(?:bar|foo)'
 [x] buildRegexpFromList(['*foo', '\\bar'], ["useLookahead" => true]) returns '(?=[\\\\*])(?:\\*foo|\\\\bar)'
 [x] buildRegexpFromList(['?', 'bar'], ["specialChars" => ["?" => "."], "useLookahead" => true]) returns '(?:.|bar)'
 [x] buildRegexpFromList(['a', 'b']) returns '[ab]'
 [x] buildRegexpFromList(['♠', '♣', '♥', '♦']) returns '[♠♣♥♦]'
 [x] buildRegexpFromList(['lock', 'sock']) returns '[ls]ock'
 [x] buildRegexpFromList(['foo', 'afoo'], ["useLookahead" => true]) returns '(?=[af])a?foo'
 [x] buildRegexpFromList(['boast', 'boost']) returns 'bo[ao]st'
 [x] buildRegexpFromList(['pest', 'pst']) returns 'pe?st'
 [x] buildRegexpFromList(['boast', 'boost', 'bost']) returns 'bo[ao]?st'
 [x] buildRegexpFromList(['boost', 'best']) returns 'b(?:e|oo)st'
 [x] buildRegexpFromList(['boost', 'bst']) returns 'b(?:oo)?st'
 [x] buildRegexpFromList(['best', 'boost', 'bust']) returns 'b(?:[eu]|oo)st'
 [x] buildRegexpFromList(['boost', 'bst', 'cool']) returns '(?:b(?:oo)?st|cool)'
 [x] buildRegexpFromList(['boost', 'bst', 'cost']) returns '(?:b(?:oo)?|co)st'
 [x] buildRegexpFromList(['aax', 'aay', 'aax', 'aay']) returns 'aa[xy]'
 [x] buildRegexpFromList(['aaax', 'aaay', 'baax', 'baay']) returns '[ab]aa[xy]'
 [x] buildRegexpFromList(['aaax', 'aaay', 'bbaax', 'bbaay']) returns '(?:a|bb)aa[xy]'
 [x] buildRegexpFromList(['aaax', 'aaay', 'aax', 'aay']) returns 'aaa?[xy]'
 [x] buildRegexpFromList(['abx', 'aby', 'cdx', 'cdy']) returns '(?:ab|cd)[xy]'
 [x] buildRegexpFromList(['axx', 'ayy', 'bbxx', 'bbyy']) returns '(?:a|bb)(?:xx|yy)'
 [x] buildRegexpFromList(['axx', 'ayy', 'bbxx', 'bbyy', 'c']) returns '(?:c|(?:a|bb)(?:xx|yy))'
 [x] buildRegexpFromList(['axx', 'ayy', 'azz', 'bbxx', 'bbyy', 'c']) returns '(?:c|a(?:xx|yy|zz)|bb(?:xx|yy))'
 [x] buildRegexpFromList(['ac', 'af', 'bbc', 'bbf', 'c']) returns '(?:c|a[cf]|bb[cf])'
 [x] buildRegexpFromList(['^example.org$', '.example.org$', '^localhost$', '.localhost$'], ["specialChars" => ["^" => "^", "$" => "$"]]) returns '(?:\\.|^)(?:example\\.org|localhost)$'
 [x] buildRegexpFromList(['xixix', 'xoxox']) returns 'x(?:ixi|oxo)x'
 [x] buildRegexpFromList(['xixix', 'xixox', 'xoxox', 'xoxix']) returns 'x[io]x[io]x'
 [x] buildRegexpFromList(['afoo', 'abar', 'bbfoo', 'bbbar', 'a', 'bb']) returns '(?:a|bb)(?:bar|foo)?'
 [x] buildRegexpFromList(['ax', 'ay', 'bx', 'by']) returns '[ab][xy]'
 [x] buildRegexpFromList(['ax', 'ay', 'bx', 'by', 'c']) returns '(?:c|[ab][xy])'
 [x] buildRegexpFromList(['ax', 'ay', 'bx', 'by', 'x', 'y']) returns '[ab]?[xy]'
 [x] buildRegexpFromList(['ax', 'ay', 'bbx', 'bby', 'c']) returns '(?:c|a[xy]|bb[xy])'
 [x] buildRegexpFromList(['ax', 'ay', 'bx', 'by', 'c', 'ddx', 'ddy']) returns '(?:c|dd[xy]|[ab][xy])'
 [x] buildRegexpFromList(['']) returns ''
 [x] buildRegexpFromList(['', '']) returns ''
 [x] buildRegexpFromList(['ad', 'bd'], ["specialChars" => ["d" => "\\d"]]) returns '[ab]\\d'
 [x] buildRegexpFromList(['a', 'ax', 'ad', 'd', 'dx', 'dd'], ["specialChars" => ["d" => "\\d"]]) returns '[\\da][\\dx]?'
 [x] buildRegexpFromList(['foo', 'bar', 'y', 'z']) returns '(?:[yz]|bar|foo)'
 [x] buildRegexpFromList(['foo', 'bar', 'baz', 'y', 'z']) returns '(?:[yz]|ba[rz]|foo)'
 [x] buildRegexpFromList(['a', 'aacc', 'aadd', 'bbcc', 'bbdd']) returns '(?:a(?:a(?:cc|dd))?|bb(?:cc|dd))'
 [x] buildRegexpFromList(['aa', 'bb', 'aacc', 'aadd', 'bbcc', 'bbdd']) returns '(?:aa|bb)(?:cc|dd)?'
 [x] buildRegexpFromList(['aa', 'bb', 'aaccxx', 'aaddxx', 'bbccxx', 'bbddxx', 'aaccyy', 'aaddyy', 'bbccyy', 'bbddyy']) returns '(?:aa|bb)(?:(?:cc|dd)(?:xx|yy))?'
 [x] buildRegexpFromList() throws a RuntimeException if any word is not legal UTF-8
 [x] parseRegexp() can parse plain regexps
 [x] parseRegexp() throws a RuntimeException if delimiters can't be parsed
 [x] parseRegexp() parses pattern modifiers
 [x] parseRegexp() parses character classes
 [x] parseRegexp() parses character classes with quantifiers
 [x] parseRegexp() parses character classes that end with an escaped ]
 [x] parseRegexp() throws a RuntimeException if a character class is not properly closed
 [x] parseRegexp() correctly parses escaped brackets
 [x] parseRegexp() correctly parses escaped parentheses
 [x] parseRegexp() parses non-capturing subpatterns
 [x] parseRegexp() parses non-capturing subpatterns with atomic grouping
 [x] parseRegexp() parses non-capturing subpatterns with quantifiers
 [x] parseRegexp() parses non-capturing subpatterns with options
 [x] parseRegexp() parses option settings
 [x] parseRegexp() parses named subpatterns using the (?<name>) syntax
 [x] parseRegexp() parses named subpatterns using the (?P<name>) syntax
 [x] parseRegexp() parses named subpatterns using the (?'name') syntax
 [x] parseRegexp() parses capturing subpatterns
 [x] parseRegexp() throws a RuntimeException if an unmatched right parenthesis is found
 [x] parseRegexp() throws a RuntimeException if an unmatched left parenthesis is found
 [x] parseRegexp() throws a RuntimeException on unsupported subpatterns
 [x] parseRegexp() parses lookahead assertions
 [x] parseRegexp() parses negative lookahead assertions
 [x] parseRegexp() parses lookbehind assertions
 [x] parseRegexp() parses negative lookbehind assertions
 [x] pcreToJs() can convert plain regexps
 [x] pcreToJs() escapes forward slashes
 [x] pcreToJs() does not double-escape forward slashes that are already escaped
 [x] pcreToJs() does not "eat" backslashes while escaping forward slashes
 [x] pcreToJs() can convert regexps with the "i" modifier
 [x] pcreToJs() can convert regexps with capturing subpatterns
 [x] pcreToJs() can convert regexps with non-capturing subpatterns
 [x] pcreToJs() can convert regexps with non-capturing subpatterns with a quantifier
 [x] pcreToJs() converts greedy quantifiers to normal quantifiers in non-capturing subpatterns
 [x] pcreToJs() throws a RuntimeException on options (?i)
 [x] pcreToJs() throws a RuntimeException on subpattern options (?i:)
 [x] pcreToJs() can convert regexps with character classes with a quantifier
 [x] pcreToJs() converts greedy quantifiers to normal quantifiers in character classes
 [x] pcreToJs() replaces \pL with the full character range in character classes
 [x] pcreToJs() replaces \p{L} with the full character range in character classes
 [x] pcreToJs() replaces \pL outside of character classes with a character class containing the full character range
 [x] pcreToJs() replaces \p{L} outside of character classes with a character class containing the full character range
 [x] pcreToJs() replaces \p{^L} with a character class containing the full character range
 [x] pcreToJs() replaces \p{^L} with a character class equivalent to \PL
 [x] pcreToJs() replaces \P{^L} with a character class equivalent to \pL
 [x] pcreToJs() can convert regexps with lookahead assertions
 [x] pcreToJs() can convert regexps with negative lookahead assertions
 [x] pcreToJs() throws a RuntimeException on lookbehind assertions
 [x] pcreToJs() throws a RuntimeException on negative lookbehind assertions
 [x] pcreToJs() converts . to [\s\S] outside of character classes is the "s" modifier is set
 [x] pcreToJs() does not convert . to [\s\S] if the "s" modifier is not set
 [x] pcreToJs() does not convert . inside of character classes
 [x] pcreToJs() converts named captures into normal captures
 [x] pcreToJs() replaces its second parameter with an array that maps named captures to their index
 [x] pcreToJs() correctly converts /(?:foo)(?<z>bar)/ to /(?:foo)(bar)/

s9e\TextFormatter\Tests\ConfigBuilder\TemplateHelper
 [x] checkUnsafe() throws an exception on invalid XML
 [x] checkUnsafe() identifies <xsl:element name="script"><xsl:apply-templates/></xsl:element> as unsafe
 [x] checkUnsafe() identifies <xsl:element name="SCRIPT"><xsl:apply-templates/></xsl:element> as unsafe
 [x] checkUnsafe() identifies <script><xsl:apply-templates/></script> as unsafe
 [x] checkUnsafe() identifies <SCRIPT><xsl:apply-templates/></SCRIPT> as unsafe
 [x] checkUnsafe() identifies <script src="{@foo}"/> as unsafe
 [x] checkUnsafe() identifies <SCRIPT src="{@foo}"/> as unsafe
 [x] checkUnsafe() identifies <script><xsl:attribute name="src"/></script> as unsafe
 [x] checkUnsafe() identifies <xsl:element name="script"><xsl:attribute name="src"/></xsl:element> as unsafe
 [x] checkUnsafe() identifies <script><xsl:if><xsl:attribute name="src"/></xsl:if></script> as unsafe
 [x] checkUnsafe() identifies <script><xsl:copy-of select="@src"/></script> as unsafe
 [x] checkUnsafe() identifies <script><xsl:value-of select="@foo"/></script> as unsafe
 [x] checkUnsafe() identifies <script><xsl:value-of select="@foo"/></script> as unsafe if attribute 'foo' has filter '#raw'
 [x] checkUnsafe() identifies <script><xsl:value-of select="@foo"/></script> as safe if attribute 'foo' has filter '#url'
 [x] checkUnsafe() identifies <script><xsl:value-of select="@foo"/></script> as safe if attribute 'foo' has filter '#int'
 [x] checkUnsafe() identifies <script><xsl:value-of select="@foo"/></script> as safe if attribute 'foo' has filter '#uint'
 [x] checkUnsafe() identifies <script><xsl:value-of select="@foo"/></script> as safe if attribute 'foo' has filter '#float'
 [x] checkUnsafe() identifies <script><xsl:value-of select="@foo"/></script> as safe if attribute 'foo' has filter '#range'
 [x] checkUnsafe() identifies <script><xsl:value-of select="@foo"/></script> as safe if attribute 'foo' has filter '#number'
 [x] checkUnsafe() identifies <script><xsl:value-of select="@foo"/></script> as safe if attribute 'foo' has filter '#simpletext'
 [x] checkUnsafe() identifies <xsl:element name="style"><xsl:apply-templates/></xsl:element> as unsafe
 [x] checkUnsafe() identifies <style><xsl:apply-templates/></style> as unsafe
 [x] checkUnsafe() identifies <style><xsl:value-of select="@foo"/></style> as unsafe
 [x] checkUnsafe() identifies <style><xsl:value-of select="@foo"/></style> as unsafe if attribute 'foo' has filter '#raw'
 [x] checkUnsafe() identifies <style><xsl:value-of select="@foo"/></style> as safe if attribute 'foo' has filter '#url'
 [x] checkUnsafe() identifies <style><xsl:value-of select="@foo"/></style> as safe if attribute 'foo' has filter '#int'
 [x] checkUnsafe() identifies <style><xsl:value-of select="@foo"/></style> as safe if attribute 'foo' has filter '#uint'
 [x] checkUnsafe() identifies <style><xsl:value-of select="@foo"/></style> as safe if attribute 'foo' has filter '#float'
 [x] checkUnsafe() identifies <style><xsl:value-of select="@foo"/></style> as safe if attribute 'foo' has filter '#color'
 [x] checkUnsafe() identifies <style><xsl:value-of select="@foo"/></style> as safe if attribute 'foo' has filter '#range'
 [x] checkUnsafe() identifies <style><xsl:value-of select="@foo"/></style> as safe if attribute 'foo' has filter '#number'
 [x] checkUnsafe() identifies <style><xsl:value-of select="@foo"/></style> as safe if attribute 'foo' has filter '#simpletext'
 [x] checkUnsafe() identifies <b style="color:{@foo}"/> as unsafe
 [x] checkUnsafe() identifies <b STYLE="color:{@foo}"/> as unsafe
 [x] checkUnsafe() identifies <b style="color:{@foo}"/> as unsafe if attribute 'foo' has filter '#raw'
 [x] checkUnsafe() identifies <b style="color:{@foo}"/> as safe if attribute 'foo' has filter '#url'
 [x] checkUnsafe() identifies <b style="color:{@foo}"/> as safe if attribute 'foo' has filter '#int'
 [x] checkUnsafe() identifies <b style="color:{@foo}"/> as safe if attribute 'foo' has filter '#uint'
 [x] checkUnsafe() identifies <b style="color:{@foo}"/> as safe if attribute 'foo' has filter '#float'
 [x] checkUnsafe() identifies <b style="color:{@foo}"/> as safe if attribute 'foo' has filter '#color'
 [x] checkUnsafe() identifies <b style="color:{@foo}"/> as safe if attribute 'foo' has filter '#range'
 [x] checkUnsafe() identifies <b style="color:{@foo}"/> as safe if attribute 'foo' has filter '#number'
 [x] checkUnsafe() identifies <b style="color:{@foo}"/> as safe if attribute 'foo' has filter '#simpletext'
 [x] checkUnsafe() identifies <b><xsl:attribute name="style"><xsl:apply-templates/></xsl:attribute></b> as unsafe
 [x] checkUnsafe() identifies <b><xsl:attribute name="STYLE"><xsl:apply-templates/></xsl:attribute></b> as unsafe
 [x] checkUnsafe() identifies <b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b> as unsafe
 [x] checkUnsafe() identifies <b><xsl:attribute name="STYLE"><xsl:value-of select="@foo"/></xsl:attribute></b> as unsafe
 [x] checkUnsafe() identifies <b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b> as unsafe if attribute 'foo' has filter '#raw'
 [x] checkUnsafe() identifies <b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b> as safe if attribute 'foo' has filter '#url'
 [x] checkUnsafe() identifies <b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b> as safe if attribute 'foo' has filter '#int'
 [x] checkUnsafe() identifies <b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b> as safe if attribute 'foo' has filter '#uint'
 [x] checkUnsafe() identifies <b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b> as safe if attribute 'foo' has filter '#float'
 [x] checkUnsafe() identifies <b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b> as safe if attribute 'foo' has filter '#color'
 [x] checkUnsafe() identifies <b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b> as safe if attribute 'foo' has filter '#range'
 [x] checkUnsafe() identifies <b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b> as safe if attribute 'foo' has filter '#number'
 [x] checkUnsafe() identifies <b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute></b> as safe if attribute 'foo' has filter '#simpletext'
 [x] checkUnsafe() identifies <a href="{@foo}"/> as unsafe
 [x] checkUnsafe() identifies <a HREF="{@foo}"/> as unsafe
 [x] checkUnsafe() identifies <form action="{@foo}"/> as unsafe
 [x] checkUnsafe() identifies <q cite="{@foo}"/> as unsafe
 [x] checkUnsafe() identifies <object data="{@foo}"/> as unsafe
 [x] checkUnsafe() identifies <button formaction="{@foo}"/> as unsafe
 [x] checkUnsafe() identifies <html manifest="{@foo}"/> as unsafe
 [x] checkUnsafe() identifies <video poster="{@foo}"/> as unsafe
 [x] checkUnsafe() identifies <img src="{@foo}"/> as unsafe
 [x] checkUnsafe() identifies <a href="{@foo}"/> as safe if attribute 'foo' has filter '#url'
 [x] checkUnsafe() identifies <a href="{@foo}"/> as safe if attribute 'foo' has filter 'urlencode'
 [x] checkUnsafe() identifies <a href="{@foo}"/> as safe if attribute 'foo' has filter 'rawurlencode'
 [x] checkUnsafe() identifies <a href="{@foo}"/> as safe if attribute 'foo' has filter '#id'
 [x] checkUnsafe() identifies <a href="{@foo}"/> as safe if attribute 'foo' has filter '#int'
 [x] checkUnsafe() identifies <a href="{@foo}"/> as safe if attribute 'foo' has filter '#uint'
 [x] checkUnsafe() identifies <a href="{@foo}"/> as safe if attribute 'foo' has filter '#float'
 [x] checkUnsafe() identifies <a href="{@foo}"/> as safe if attribute 'foo' has filter '#range'
 [x] checkUnsafe() identifies <a href="{@foo}"/> as safe if attribute 'foo' has filter '#number'

s9e\TextFormatter\Tests\ConfigBuilder\UrlConfig
 [x] HTTP and HTTPS schemes are allowed by default
 [x] allowScheme() can be used to allow additional schemes
 [x] allowScheme() throws an exception on invalid scheme names
 [x] There is no default scheme for schemeless URLs by default
 [x] setDefaultScheme() can set a default scheme to be used for URLs with no scheme
 [x] disallowHost('example.org') disallows "example.org" but not "www.example.org"
 [x] disallowHost('example.org') does not disallow "myexample.org"
 [x] disallowHost('*.example.org') disallows "www.example.org" but not "example.org"
 [x] disallowHost('*example*') disallows "www.example.org" and "myexample2.org"
 [x] resolveRedirectsFrom('bit.ly') will indicate to the URL filter to follow redirects from 'bit.ly'
 [x] Disallowed IDNs are punycoded

