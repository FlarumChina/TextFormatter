s9e\TextFormatter\Tests\ConfigBuilder
 [x] Can load plugins
 [x] Loaded plugins are available as a public property
 [x] Can unload plugins by unsetting them
 [x] Loads plugins on magic __get()
 [x] Has a magic property $predefinedTags that creates an instance of PredefinedTags on access
 [x] Throws a RuntimeException on unsupported magic __get()
 [x] loadPlugin() throws an exception on invalid plugin name
 [x] loadPlugin() throws an exception on unknown plugin

s9e\TextFormatter\Tests\ConfigBuilder\Collection
 [x] add() creates and returns a new instance of the Item class if a second argument is not passed
 [x] add() creates and returns a new instance of the Item class if the second argument is not an instance of the Item class
 [x] add() passes all of its arguments after the first to the Item constructor if its second argument is not an instance of the Item class
 [x] add() calls the item's normalizeName() method
 [x] get() throws a RuntimeException if the item already exists
 [x] exists() returns TRUE if the item exists
 [x] exists() returns FALSE if the item does not exist
 [x] exists() calls the item's normalizeName() method
 [x] get() returns an item by name
 [x] get() calls the item's normalizeName() method
 [x] get() throws a RuntimeException if the item does not exist
 [x] remove() removes an item by name
 [x] remove() calls the item's normalizeName() method
 [x] remove() throws a RuntimeException if the item does not exist
 [x] clear() removes all items from the collection
 [x] rename() creates an entry for the new name
 [x] rename() removes the entry for the old name
 [x] rename() throws a RuntimeException if the item does not exist
 [x] rename() throws a RuntimeException if the new name is already taken
 [x] Collection is iterable with foreach, with item names as keys and items as values

s9e\TextFormatter\Tests\ConfigBuilder\ConfigurableItem
 [x] __get($k) calls getOption($k)
 [x] __set() calls setOption($k, $v)
 [x] getOption() throws an InvalidArgumentException if the option does not exist
 [x] $item->getOption($k) returns $item->$k if it exists
 [x] $item->getOption($k) returns null if $item->$k is null
 [x] getOptions() returns all of the item's properties
 [x] setOption() throws an InvalidArgumentException if the option does not exist
 [x] $item->setOption('foo', 42) calls $item->setFoo(42) if it exists
 [x] $item->setOption($k, $v) invokes $item->$k->clear() if $item->$k is a Collection
 [x] $item->setOption($k, $v) invokes $item->$k->add() for every iteration of $v
 [x] setOption() preserves the type of the option it changes
 [x] setOptions($options) calls setOption() for every element in $options

s9e\TextFormatter\Tests\ConfigBuilder\Filter
 [x] __construct($callback) throws a InvalidArgumentException if $callback is not callable

s9e\TextFormatter\Tests\ConfigBuilder\FilterChain
 [x] append() and prepend() accept default filters such as '#int'
 [x] append() and prepend() accept simple callbacks such as 'strtolower'
 [x] append() and prepend() accept static class method calls such as array('Class', 'staticMethod')
 [x] append() and prepend() accept static class method calls such as array('Class::staticMethod')
 [x] append() and prepend() accept object method calls such as array($this, 'method')
 [x] append() and prepend() accept Filter objects
 [x] append() and prepend() accept closures
 [x] append() throws a InvalidArgumentException if its argument is not callable
 [x] prepend() throws a InvalidArgumentException if its argument is not callable
 [x] get() returns all filters in an array
 [x] get() returns default filters such as '#int' as strings
 [x] get() returns other filters as Filter objects
 [x] clear() removes all filters
 [x] has('#int') returns true if '#int' is in the chain
 [x] has('#int') returns false if '#number' only is in the chain
 [x] has('strtolower') returns true if 'strtolower' is in the chain
 [x] has('strtolower') returns false if only 'trim' is in the chain
 [x] has($FilterObject) returns true if $FilterObject is in the chain
 [x] has($FilterObject) returns true if $FilterObjectClone is in the chain
 [x] has($FilterObject) returns false if only $SomeOtherFilterObject is in the chain
 [x] FilterChain is iterable with foreach, with filter position key and filter as value

s9e\TextFormatter\Tests\ConfigBuilder\TemplateHelper
 [x] checkUnsafe() throws an exception on invalid XML
 [x] checkUnsafe() identifies <xsl:element name="script"><xsl:apply-templates/></xsl:element> as unsafe
 [x] checkUnsafe() identifies <script><xsl:apply-templates/></script> as unsafe
 [x] checkUnsafe() identifies <script src="{@foo}"/> as unsafe
 [x] checkUnsafe() identifies <script><xsl:attribute name="src"/></script> as unsafe
 [x] checkUnsafe() identifies <xsl:element name="script"><xsl:attribute name="src"/></xsl:element> as unsafe
 [x] checkUnsafe() identifies <script><xsl:if><xsl:attribute name="src"/></xsl:if></script> as unsafe
 [x] checkUnsafe() identifies <script><xsl:copy-of select="@src"/></script> as unsafe
 [x] checkUnsafe() identifies <script><xsl:value-of select="@foo"/></script> as unsafe

s9e\TextFormatter\Tests\ConfigBuilder\UrlConfig
 [x] HTTP and HTTPS schemes are allowed by default
 [x] allowScheme() can be used to allow additional schemes
 [x] allowScheme() throws an exception on invalid scheme names
 [x] There is no default scheme for schemeless URLs by default
 [x] setDefaultScheme() can set a default scheme to be used for URLs with no scheme
 [x] disallowHost('example.org') disallows "example.org" but not "www.example.org"
 [x] disallowHost('example.org') does not disallow "myexample.org"
 [x] disallowHost('*.example.org') disallows "www.example.org" but not "example.org"
 [x] disallowHost('*example*') disallows "www.example.org" and "myexample2.org"
 [x] resolveRedirectsFrom('bit.ly') will indicate to the URL filter to follow redirects from 'bit.ly'
 [x] Disallowed IDNs are punycoded

