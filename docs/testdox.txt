autoloader
 [x] Can load s9e\TextFormatter\Configurator
 [x] Can load s9e\TextFormatter\Parser\Logger
 [x] Can load s9e\TextFormatter\Plugins\Emoticons\Parser
 [x] Does not attempt to load a class whose name contains dots

s9e\TextFormatter\Tests\Configurator\Collections\Collection
 [x] Collection is countable
 [x] Collection is iterable with foreach
 [x] clear() empties the collection
 [x] asConfig() returns the items as an array

s9e\TextFormatter\Tests\Configurator\Collections\NormalizedCollection
 [x] set() calls normalizeKey()
 [x] set() calls normalizeValue()
 [x] add() calls normalizeKey()
 [x] add() calls normalizeValue()
 [x] add() can be called without a second parameter
 [x] get() throws a RuntimeException if the item already exists
 [x] exists() returns TRUE if the item exists
 [x] exists() returns FALSE if the item does not exist
 [x] exists() calls normalizeKey()
 [x] get() returns an item by name
 [x] get() calls normalizeKey()
 [x] get() throws a RuntimeException if the item does not exist
 [x] delete() removes an item by name
 [x] delete() calls the item's normalizeKey() method
 [x] isset($collection['foo']) maps to $collection->exists('foo')
 [x] $collection['foo'] maps to $collection->get('foo')
 [x] $collection['foo'] = 42 maps to $collection->set('foo', 42)
 [x] unset($collection['foo']) maps to $collection->delete('foo')
 [x] contains() returns true if the given value is present in the collection
 [x] contains() returns false if the given value is not present in the collection
 [x] contains() checks for equality, not identity
 [x] indexOf() returns the key if the given value is present in the collection
 [x] indexOf() returns false if the given value is not present in the collection
 [x] indexOf() checks for equality, not identity

s9e\TextFormatter\Tests\Configurator\Collections\NormalizedList
 [x] append() adds the value at the end of the list
 [x] $normalizedList[] = 'foo' maps to $normalizedList->append('foo')
 [x] prepend() adds the value at the beginning of the list
 [x] insert() inserts the value at given offset
 [x] insert() can insert value that is an array
 [x] insert() throws an exception if the offset is out of bounds
 [x] $normalizedList[0] = 'foo' replaces the first value of the list if it exists
 [x] $normalizedList[0] = 'foo' appends to the list if it's empty
 [x] $normalizedList[1] = 'foo' throws an InvalidArgumentException if the list is empty
 [x] $normalizedList['foo'] = 'bar' throws an InvalidArgumentException
 [x] Deleting a value by key reorders the list to remove gaps

s9e\TextFormatter\Tests\Configurator\Traits\CollectionProxy
 [x] $proxy->add() gets forwarded to $proxy->collection->add() with all arguments
 [x] $proxy->add() returns the value returned by $proxy->collection->add()
 [x] $proxy->exists() gets forwarded to $proxy->collection->exists() with all arguments
 [x] $proxy->delete() gets forwarded to $proxy->collection->delete() with all arguments
 [x] $proxy->get() gets forwarded to $proxy->collection->get() with all arguments
 [x] $proxy->get() returns the value returned by $proxy->collection->get()
 [x] $proxy->set() gets forwarded to $proxy->collection->set() with all arguments
 [x] $proxy->set() returns the value returned by $proxy->collection->set()
 [x] $proxy['foo'] returns $proxy->collection['foo']
 [x] $proxy['foo'] = 42 sets $proxy->collection['foo'] = 42
 [x] isset($proxy['foo']) returns isset($proxy->collection['foo'])
 [x] unset($proxy['foo']) calls unset($proxy->collection['foo'])
 [x] count($proxy) returns count($proxy->collection)
 [x] A collection proxy is iterable with foreach

s9e\TextFormatter\Tests\Configurator\Traits\Configurable
 [x] __get('foo') calls getFoo() if it exists
 [x] __get($k) returns the property if it exists
 [x] __get() throws a RuntimeException if the property does not exist
 [x] __get($k) returns null if the property is null
 [x] __set('foo', 'bar') calls setFoo('bar') if it exists
 [x] __set() can create new properties
 [x] __set() can replace an instance of Foo with another instance of Foo
 [x] __set() can replace an instance of Foo with an instance of FooPlus, which extends Foo
 [x] __set() throws an exception if an instance of Foo would be replaced by an instance of Bar
 [x] __set() can replace a scalar value with a value of the same type
 [x] __set() can replace a scalar value with another scalar value if it can be losslessly cast to the same type
 [x] __set() throws an exception if a scalar value would be overwritten by a scalar value that cannot be losslessly cast to the same type
 [x] __set() will clear and repopulate a NormalizedCollection rather than overwrite it
 [x] __set() throws an exception if a NormalizedCollection would be overwritten by a non-array, non-Traversable value
 [x] __isset('foo') calls issetFoo() if it exists
 [x] __isset($k) returns true if the property exists
 [x] __unset('foo') calls unsetFoo() if it exists
 [x] __unset('foo') calls unsetFoo() even if the property does not exist
 [x] __unset('foo') calls $this->foo->clear() if it's an instance of Collection
 [x] __unset('foo') has no effect unsetFoo() does not exist and the the property is not set
 [x] __unset('foo') throws an exception if unsetFoo() does not exist and the property is set

s9e\TextFormatter\Tests\Configurator\Traits\TemplateSafeness
 [x] markAsSafeAsURL() is chainable
 [x] markAsSafeInCSS() is chainable
 [x] markAsSafeInJS() is chainable

s9e\TextFormatter\Tests\Configurator
 [x] $configurator->attributeFilters is an instance of AttributeFilterCollection
 [x] $configurator->bundleGenerator is an instance of BundleGenerator
 [x] $configurator->javascript is an instance of JavaScript
 [x] $configurator->plugins is an instance of PluginCollection
 [x] $configurator->registeredVars is a publicly accessible array
 [x] $configurator->rendererGenerator is an instance of RendererGenerators\XSLT
 [x] $configurator->rootRules is an instance of Ruleset
 [x] $configurator->rulesGenerator is an instance of RulesGenerator
 [x] $configurator->stylesheet is an instance of Stylesheet
 [x] $configurator->tags is an instance of TagCollection
 [x] $configurator->templateChecker is an instance of TemplateChecker
 [x] $configurator->templateNormalizer is an instance of TemplateNormalizer
 [x] $configurator->urlConfig is an instance of UrlConfig
 [x] asConfig() calls every plugin's finalize() before retrieving their config
 [x] asConfig() returns an array with a rootContext element
 [x] asConfig() returns an array with a registeredVars element that contains urlConfig
 [x] asConfig() adds regexpLimit to the plugin's configuration if it's not specified and the plugin has a regexp
 [x] asConfig() removes regexpLimit from the plugin's configuration if it does not have a regexp
 [x] asConfig() adds regexpLimitAction to the plugin's configuration if it's not specified and the plugin has a regexp
 [x] asConfig() removes regexpLimitAction from the plugin's configuration if it does not have a regexp
 [x] asConfig() adds quickMatch to the plugin's configuration if available
 [x] asConfig() omits a plugin's quickMatch if it's false
 [x] asConfig() adds allowedChildren and allowedDescendants bitfields to each tag
 [x] getParser() returns an instance of s9e\TextFormatter\Parser
 [x] getParser() removes JavaScript-specific data from tag filters
 [x] getParser() removes JavaScript-specific data from attribute filters
 [x] getRenderer() returns an instance of s9e\TextFormatter\Renderer
 [x] getRenderer() invokes $this->rendererGenerator->getRenderer()
 [x] getRenderer('PHP') creates a new instance of s9e\TextFormatter\Configurator\RendererGenerators\PHP to generate a renderer
 [x] getRenderer('PHP', '/tmp') creates a new instance of s9e\TextFormatter\Configurator\RendererGenerators\PHP passing '/tmp' to its constructor
 [x] $configurator->BBCodes returns $configurator->plugins->load('BBCodes') if the plugin hasn't been loaded already
 [x] $configurator->BBCodes returns $configurator->plugins->get('BBCodes') if the plugin has already been loaded
 [x] $configurator->foo throws an exception
 [x] isset($configurator->BBCodes) returns $configurator->plugins->exists('BBCodes')
 [x] isset($configurator->BBCodes) returns false if the BBCodes plugin is not loaded
 [x] isset($configurator->BBCodes) does not load the BBCodes plugin
 [x] isset($configurator->BBCodes) returns true if the BBCodes plugin is loaded
 [x] isset($configurator->foo) returns false if the "foo" property is not set
 [x] isset($configurator->foo) returns true if the "foo" property is set
 [x] addHTML5Rules() add root rules
 [x] addHTML5Rules() add tag rules
 [x] addHTML5Rules() passes its options to the generator
 [x] setRendererGenerator('PHP') sets $configurator->rendererGenerator to an instance of s9e\TextFormatter\Configurator\RendererGenerators\PHP
 [x] setRendererGenerator() passes extra arguments to the generator's constructor
 [x] setRendererGenerator() returns the new instance of RendererGenerator
 [x] saveBundle('Foo', '/tmp/foo') saves a bundle Foo to /tmp/foo
 [x] saveBundle() returns the number of bytes written to disk
 [x] saveBundle() passes its third parameter to BundleGenerator::generate()
 [x] finalize() returns a parser and a renderer
 [x] finalize(['returnParser' => false]) does not return a parser
 [x] finalize(['returnRenderer' => false]) does not return a renderer
 [x] finalize() calls addHTML5Rules() by default
 [x] finalize() passes its options to addHTML5Rules()
 [x] finalize() passes a renderer to addHTML5Rules()
 [x] finalize(['addHTML5Rules' => false]) does not call addHTML5Rules() by default
 [x] finalize(['finalizeParser' => $callback]) calls $callback and passes it an instance of Parser
 [x] finalize(['finalizeRenderer' => $callback]) calls $callback and passes it an instance of Renderer
 [x] finalize(['optimizeConfig' => true]) reduces the size of the serialized parser at the cost of not being configurable at runtime

s9e\TextFormatter\Tests\Configurator\Collections\AttributeCollection
 [x] add() returns an instance of s9e\TextFormatter\Configurator\Items\Attribute
 [x] add() normalizes the attribute name
 [x] delete() normalizes the attribute name
 [x] exists() normalizes the attribute name
 [x] get() normalizes the attribute name
 [x] set() normalizes the attribute name

s9e\TextFormatter\Tests\Configurator\Collections\AttributeFilterChain
 [x] append() throws an InvalidArgumentException on invalid callbacks
 [x] prepend() throws an InvalidArgumentException on invalid callbacks
 [x] append() throws an InvalidArgumentException on uncallable callbacks
 [x] prepend() throws an InvalidArgumentException on uncallable callbacks
 [x] PHP string callbacks are normalized to an instance of AttributeFilter
 [x] PHP array callbacks are normalized to an instance of AttributeFilter
 [x] Instances of AttributeFilter are added as-is

s9e\TextFormatter\Tests\Configurator\Collections\AttributeFilterCollection
 [x] Filter names that start with # are normalized to lowercase
 [x] set() accepts instances of AttributeFilter as-is
 [x] set() accepts a valid callback and returns an instance of AttributeFilter
 [x] get() automatically loads built-in filters if no filter was set
 [x] get() does not overwrite custom filters with built-in filters
 [x] get() automatically creates filters whose name is a valid PHP callback if no filter was set
 [x] get() does not overwrite custom filters with auto-generated callback filters
 [x] get() throws an exception if the filter name is neither callable not starts with # and is entirely composed of letters and digits
 [x] get() throws an exception on unknown filter
 [x] get() returns a clone of the filter, not the original instance

s9e\TextFormatter\Tests\Configurator\Collections\AttributeList
 [x] Attribute names are normalized for storage
 [x] Attribute names are normalized during retrieval
 [x] asConfig() returns a deduplicated list of attribute names
 [x] asConfig() returns a list of attribute names in alphabetical order

s9e\TextFormatter\Tests\Configurator\Collections\AttributePreprocessorCollection
 [x] add() returns an instance of s9e\TextFormatter\Configurator\Items\AttributePreprocessor
 [x] asConfig() returns a list of [attrName, regexp] arrays
 [x] asConfig() has a JavaScript variant for each attribute preprocessor
 [x] asConfig()'s JavaScript variants contain a RegExp object instead of a regexp string, plus a map of named subpatterns
 [x] Is iterable with foreach
 [x] Uses the name of the source attribute as key when iterating
 [x] merge() accepts a 2D array of regexps
 [x] merge() accepts a 2D array of AttributePreprocessor instances
 [x] merge() accepts an instance of AttributePreprocessorCollection to copy its content
 [x] merge() throws an exception when passed a non-array, non-AttributProcessorCollection
 [x] merge() throws an exception when passed a one-dimensional array

s9e\TextFormatter\Tests\Configurator\Collections\PluginCollection
 [x] load() can load a stock plugin
 [x] load() throws an exception if the stock plugin does not exist
 [x] Accepts an object that implements ConfiguratorBase
 [x] Accepts a string that is the name of a class that implements ConfiguratorBase
 [x] Throws an exception if the value is neither an instance of or the name of a class that implements ConfiguratorBase
 [x] Throws an exception if the plugin name is not entirely composed of letters, numbers and underscores
 [x] Throws an exception if the plugin name does not start with an uppercase letter
 [x] asConfig() does not return an entry for plugins whose asConfig() returns FALSE
 [x] asConfig() returns an entry for plugins whose asConfig() returns an empty array
 [x] asConfig() adds regexpLimit to the plugin's configuration if it's not specified and the plugin has a regexp
 [x] asConfig() removes regexpLimit from the plugin's configuration if it does not have a regexp
 [x] asConfig() adds regexpLimitAction to the plugin's configuration if it's not specified and the plugin has a regexp
 [x] asConfig() removes regexpLimitAction from the plugin's configuration if it does not have a regexp
 [x] asConfig() adds quickMatch to the plugin's configuration if available
 [x] asConfig() omits a plugin's quickMatch if it's false
 [x] finalize() calls every plugin's finalize() method

s9e\TextFormatter\Tests\Configurator\Collections\Ruleset
 [x] isset($ruleset['allowChild']) tests whether any allowChild rules exist
 [x] $ruleset['allowChild'] returns the allowChild rules if they exist
 [x] Trying to set rules via array access throws a RuntimeException
 [x] unset($ruleset['allowChild']) clears all allowChild rules
 [x] clear() removes all rules
 [x] clear('allowChild') removes only 'allowChild' rules
 [x] remove('denyChild', 'IMG') removes all denyChild rules targeting IMG
 [x] remove('denyChild') unsets the denyChild list in the ruleset
 [x] remove('denyChild', 'IMG') unsets the denyChild list in the ruleset if there is no denyChild rules left
 [x] remove('denyChild', 'IMG') rearranges keys to remove gaps
 [x] remove('denyChild', 'img') normalizes tag name
 [x] allowChild() throws an exception on invalid tag name
 [x] allowChild() normalizes tag name
 [x] allowDescendant() throws an exception on invalid tag name
 [x] allowDescendant() normalizes tag name
 [x] autoClose() accepts a boolean
 [x] autoClose() throws an exception if its argument is not a boolean
 [x] autoReopen() accepts a boolean
 [x] autoReopen() throws an exception if its argument is not a boolean
 [x] breakParagraph() accepts a boolean
 [x] breakParagraph() throws an exception if its argument is not a boolean
 [x] closeAncestor() throws an exception on invalid tag name
 [x] closeAncestor() normalizes tag name
 [x] closeParent() normalizes tag name
 [x] createParagraphs() accepts a boolean
 [x] createParagraphs() throws an exception if its argument is not a boolean
 [x] defaultChildRule() accepts 'allow'
 [x] defaultChildRule() accepts 'deny'
 [x] defaultChildRule() throws an exception if passed anything else than 'allow' or 'deny'
 [x] defaultDescendantRule() accepts 'allow'
 [x] defaultDescendantRule() accepts 'deny'
 [x] defaultDescendantRule() throws an exception if passed anything else than 'allow' or 'deny'
 [x] ignoreTags() accepts a boolean
 [x] ignoreTags() throws an exception if its argument is not a boolean
 [x] denyChild() throws an exception on invalid tag name
 [x] denyChild() normalizes tag name
 [x] denyDescendant() throws an exception on invalid tag name
 [x] denyDescendant() normalizes tag name
 [x] ignoreText() accepts a boolean
 [x] ignoreText() throws an exception if its argument is not a boolean
 [x] isTransparent() accepts a boolean
 [x] isTransparent() throws an exception if its argument is not a boolean
 [x] noBrChild() accepts a boolean
 [x] noBrChild() throws an exception if its argument is not a boolean
 [x] noBrDescendant() accepts a boolean
 [x] noBrDescendant() throws an exception if its argument is not a boolean
 [x] ignoreSurroundingWhitespace() accepts a boolean
 [x] ignoreSurroundingWhitespace() throws an exception if its argument is not a boolean
 [x] requireParent() throws an exception on invalid tag name
 [x] requireParent() normalizes tag name
 [x] requireAncestor() throws an exception on invalid tag name
 [x] requireAncestor() normalizes tag name
 [x] merge() accepts a 2D array of rules
 [x] merge() correctly copies the defaultChildRule setting from an array
 [x] merge() correctly copies the defaultDescendantRule setting from an array
 [x] merge() correctly copies the isTransparent setting from an array
 [x] merge() accepts an instance of Ruleset to copy its content
 [x] merge() correctly copies the defaultChildRule setting from an instance of Ruleset
 [x] merge() correctly copies the defaultDescendantRule setting from an instance of Ruleset
 [x] merge() correctly copies the isTransparent setting from an instance of Ruleset
 [x] merge() throws an InvalidArgumentException if its argument is not an array or an instance of Ruleset
 [x] asConfig() does not return rules that are not used during parsing
 [x] asConfig() uses target names as keys for closeAncestor
 [x] asConfig() uses target names as keys for closeParent
 [x] asConfig() uses target names as keys for requireAncestor
 [x] asConfig() packs boolean rules in a value named "flags"
 [x] asConfig() can pack multiple boolean rules in a value named "flags"
 [x] asConfig() sets noBrChild's bit if noBrDescendant is set

s9e\TextFormatter\Tests\Configurator\Collections\RulesGeneratorList
 [x] append() normalizes a string into an instance of a class of the same name in s9e\TextFormatter\Configurator\RulesGenerators
 [x] append() adds objects as-is

s9e\TextFormatter\Tests\Configurator\Collections\StylesheetParameterCollection
 [x] add() accepts instances of DynamicStylesheetParameter as-is
 [x] add() accepts instances of StaticStylesheetParameter as-is
 [x] add() normalizes values to an instance of StaticStylesheetParameter
 [x] add('foo') adds parameter 'foo' with an empty value
 [x] add('foo', 1) adds parameter 'foo' with value '1'

s9e\TextFormatter\Tests\Configurator\Collections\TagCollection
 [x] add() returns an instance of s9e\TextFormatter\Configurator\Items\Tag
 [x] add() normalizes the tag name
 [x] delete() normalizes the tag name
 [x] exists() normalizes the tag name
 [x] get() normalizes the tag name
 [x] set() normalizes the tag name

s9e\TextFormatter\Tests\Configurator\Collections\TagFilterChain
 [x] append() throws an InvalidArgumentException on invalid callbacks
 [x] prepend() throws an InvalidArgumentException on invalid callbacks
 [x] append() throws an InvalidArgumentException on uncallable callbacks
 [x] prepend() throws an InvalidArgumentException on uncallable callbacks
 [x] PHP string callbacks are normalized to an instance of TagFilter
 [x] PHP array callbacks are normalized to an instance of TagFilter
 [x] Instances of TagFilter are added as-is

s9e\TextFormatter\Tests\Configurator\Collections\TagList
 [x] Tag names are normalized for storage
 [x] Tag names are normalized during retrieval
 [x] asConfig() returns a deduplicated list of tag names
 [x] asConfig() returns a list of tag names in alphabetical order

s9e\TextFormatter\Tests\Configurator\Collections\TemplateCheckList
 [x] append() normalizes a string into an instance of a class of the same name in s9e\TextFormatter\Configurator\TemplateChecks
 [x] append() adds instances of s9e\TextFormatter\Configurator\TemplateCheck as-is

s9e\TextFormatter\Tests\Configurator\Collections\TemplateCollection
 [x] set() accepts a string and returns an instance of Template
 [x] set() accepts an instance of Template, which it returns
 [x] Minifies predicates

s9e\TextFormatter\Tests\Configurator\Collections\TemplateNormalizationList
 [x] append() normalizes a callback into an instance of s9e\TextFormatter\Configurator\TemplateNormalizations\Custom
 [x] append() normalizes a string into an instance of a class of the same name in s9e\TextFormatter\Configurator\TemplateNormalizations
 [x] append() adds instances of s9e\TextFormatter\Configurator\TemplateNormalization as-is

s9e\TextFormatter\Tests\Configurator\UnsafeTemplateException
 [x] getNode() returns the stored node
 [x] setNode() sets the stored node
 [x] highlightNode() returns the template's source formatted and with the stored node highlighted

s9e\TextFormatter\Tests\Configurator\Helpers\ConfigHelper
 [x] filterVariants() filters the right variant
 [x] filterVariants() recurses into deep arrays
 [x] filterVariants() recurses into variants
 [x] filterVariants() removes NULL variants
 [x] generateQuickMatchFromList() returns the longest common substring of a list of strings
 [x] generateQuickMatchFromList() returns a string even if it contains only digit characters
 [x] generateQuickMatchFromList() returns FALSE if no common substring is found
 [x] generateQuickMatchFromList() compares strings as bytes and returns a binary string
 [x] toArray() works with deep arrays
 [x] toArray() calls asConfig() for objects in deep arrays that implement ConfigProvider
 [x] toArray() throws an exception for objects in deep arrays that are not Traversable and do not implement ConfigProvider
 [x] toArray() omits empty arrays from values
 [x] toArray() preserves empty arrays if its second argument is TRUE
 [x] toArray() preserves empty arrays in deep arrays if its second argument is TRUE
 [x] toArray() omits NULL values
 [x] toArray() preserves NULL values if its third argument is TRUE
 [x] toArray() preserves NULL values in deep arrays if its third argument is TRUE
 [x] optimizeArray() reduces the size of a serialized config

s9e\TextFormatter\Tests\Configurator\Helpers\TemplateForensics
 [x] getDOM() returns the template as a DOMDocument
 [x] <span> does not allow <div> as child
 [x] <span> does not allow <div> as child even with a <span> sibling
 [x] <span> and <div> does not allow <span> and <div> as child
 [x] <li> closes parent <li>
 [x] <div> closes parent <p>
 [x] <p> closes parent <p>
 [x] <div> does not close parent <div>
 [x] <span> does not close parent <span>
 [x] <a> denies <a> as descendant
 [x] <a> allows <img> with no usemap attribute as child
 [x] <a> denies <img usemap="#foo"> as child
 [x] <div><a> allows <div> as child
 [x] <span><a> denies <div> as child
 [x] <audio> with no src attribute allows <source> as child
 [x] <audio src="..."> denies <source> as child
 [x] <a> is considered transparent
 [x] <a><span> is not considered transparent
 [x] <span><a> is not considered transparent
 [x] A template composed entirely of a single <xsl:apply-templates/> is considered transparent
 [x] <span> allows <unknownElement> as child
 [x] <unknownElement> allows <span> as child
 [x] <textarea> allows text nodes
 [x] <style> allows text nodes
 [x] <xsl:apply-templates/> allows text nodes
 [x] <table> disallows text nodes
 [x] <table><tr><td> allows "Hi"
 [x] <div><table> disallows "Hi"
 [x] <table> disallows <xsl:value-of/>
 [x] <table> disallows <xsl:text>Hi</xsl:text>
 [x] <table> allows <xsl:text>  </xsl:text>
 [x] <b> is a formatting element
 [x] <b><u> is a formatting element
 [x] <div> is not a formatting element
 [x] <div><u> is not a formatting element
 [x] "Hi" is not a formatting element
 [x] A template composed entirely of a single <xsl:apply-templates/> is not a formatting element
 [x] <img> uses the "empty" content model
 [x] <hr><xsl:apply-templates/></hr> uses the "empty" content model
 [x] <div><hr><xsl:apply-templates/></hr></div> uses the "empty" content model
 [x] <span> is not empty
 [x] <colgroup span="2"> uses the "empty" content model
 [x] <colgroup> does not use the "empty" content model
 [x] <span> allows elements
 [x] <script> does not allow elements even if it has an <xsl:apply-templates/> child
 [x] <script> does not allow <span> as a child, even if it has an <xsl:apply-templates/> child
 [x] <script> does not allow <span> as a descendant, even if it has an <xsl:apply-templates/> child
 [x] <pre> preserves whitespace
 [x] <pre><code> preserves whitespace
 [x] <span> does not preserve whitespace
 [x] <img/> is void
 [x] <img> is void even with a <xsl:apply-templates/> child
 [x] <span> is not void
 [x] <xsl:apply-templates/> is not void
 [x] <blockquote> is a block-level element
 [x] <span> is not a block-level element

s9e\TextFormatter\Tests\Configurator\Helpers\RegexpBuilder
 [x] fromList(['foo']) returns 'foo'
 [x] fromList(['foo', 'foo']) returns 'foo'
 [x] fromList(['FOO', 'foo']) returns '(?:FOO|foo)'
 [x] fromList(['FOO', 'foo'], ["caseInsensitive" => true]) returns 'foo'
 [x] fromList(['a']) returns 'a'
 [x] fromList(['a', 'a']) returns 'a'
 [x] fromList(['/']) returns '\\/'
 [x] fromList(['/'], ["delimiter" => "#"]) returns '/'
 [x] fromList(['#'], ["delimiter" => "#"]) returns '\\#'
 [x] fromList(['apple', 'april']) returns 'ap(?:ple|ril)'
 [x] fromList(['bar', 'baz']) returns 'ba[rz]'
 [x] fromList(['foo', 'fool']) returns 'fool?'
 [x] fromList(['ax', 'axed']) returns 'ax(?:ed)?'
 [x] fromList(['!', '#', '$', '(', ')', '*', '+', '-', '.', ':', '<', '=', '>', '?', '[', '\\', ']', '^', '{', '|', '}']) returns '[-!#$()*+.:<=>?[\\\\\\]{|}^]'
 [x] fromList(['xy', '^y'], ["specialChars" => ["^" => "^"]]) returns '(?:x|^)y'
 [x] fromList(['xy', 'x$'], ["specialChars" => ["$" => "$"]]) returns 'x(?:y|$)'
 [x] fromList(['foo', 'bar']) returns '(?:bar|foo)'
 [x] fromList(['*foo', '\\bar'], ["useLookahead" => true]) returns '(?=[*\\\\])(?:\\*foo|\\\\bar)'
 [x] fromList(['?', 'bar'], ["specialChars" => ["?" => "."], "useLookahead" => true]) returns '(?:.|bar)'
 [x] fromList(['a', 'b']) returns '[ab]'
 [x] fromList(['♠', '♣', '♥', '♦']) returns '[♠♣♥♦]'
 [x] fromList(['♠', '♣', '♥', '♦', '.'], ["specialChars" => ["." => "."]]) returns '.'
 [x] fromList(['lock', 'sock']) returns '[ls]ock'
 [x] fromList(['foo', 'afoo'], ["useLookahead" => true]) returns '(?=[af])a?foo'
 [x] fromList(['boast', 'boost']) returns 'bo[ao]st'
 [x] fromList(['pest', 'pst']) returns 'pe?st'
 [x] fromList(['boast', 'boost', 'bost']) returns 'bo[ao]?st'
 [x] fromList(['boost', 'best']) returns 'b(?:e|oo)st'
 [x] fromList(['boost', 'bst']) returns 'b(?:oo)?st'
 [x] fromList(['best', 'boost', 'bust']) returns 'b(?:[eu]|oo)st'
 [x] fromList(['boost', 'bst', 'cool']) returns '(?:b(?:oo)?st|cool)'
 [x] fromList(['boost', 'bst', 'cost']) returns '(?:b(?:oo)?|co)st'
 [x] fromList(['aax', 'aay', 'aax', 'aay']) returns 'aa[xy]'
 [x] fromList(['aaax', 'aaay', 'baax', 'baay']) returns '[ab]aa[xy]'
 [x] fromList(['aaax', 'aaay', 'bbaax', 'bbaay']) returns '(?:a|bb)aa[xy]'
 [x] fromList(['aaax', 'aaay', 'aax', 'aay']) returns 'aaa?[xy]'
 [x] fromList(['abx', 'aby', 'cdx', 'cdy']) returns '(?:ab|cd)[xy]'
 [x] fromList(['axx', 'ayy', 'bbxx', 'bbyy']) returns '(?:a|bb)(?:xx|yy)'
 [x] fromList(['axx', 'ayy', 'bbxx', 'bbyy', 'c']) returns '(?:c|(?:a|bb)(?:xx|yy))'
 [x] fromList(['axx', 'ayy', 'azz', 'bbxx', 'bbyy', 'c']) returns '(?:c|a(?:xx|yy|zz)|bb(?:xx|yy))'
 [x] fromList(['ac', 'af', 'bbc', 'bbf', 'c']) returns '(?:c|a[cf]|bb[cf])'
 [x] fromList(['^example.org$', '.example.org$', '^localhost$', '.localhost$'], ["specialChars" => ["^" => "^", "$" => "$"]]) returns '(?:\\.|^)(?:example\\.org|localhost)$'
 [x] fromList(['xixix', 'xoxox']) returns 'x(?:ixi|oxo)x'
 [x] fromList(['xixix', 'xixox', 'xoxox', 'xoxix']) returns 'x[io]x[io]x'
 [x] fromList(['afoo', 'abar', 'bbfoo', 'bbbar', 'a', 'bb']) returns '(?:a|bb)(?:bar|foo)?'
 [x] fromList(['ax', 'ay', 'bx', 'by']) returns '[ab][xy]'
 [x] fromList(['ax', 'ay', 'bx', 'by', 'c']) returns '(?:c|[ab][xy])'
 [x] fromList(['ax', 'ay', 'bx', 'by', 'x', 'y']) returns '[ab]?[xy]'
 [x] fromList(['ax', 'ay', 'bbx', 'bby', 'c']) returns '(?:c|a[xy]|bb[xy])'
 [x] fromList(['ax', 'ay', 'bx', 'by', 'c', 'ddx', 'ddy']) returns '(?:c|dd[xy]|[ab][xy])'
 [x] fromList(['']) returns ''
 [x] fromList(['', '']) returns ''
 [x] fromList(['ad', 'bd'], ["specialChars" => ["d" => "\\d"]]) returns '[ab]\\d'
 [x] fromList(['a', 'ax', 'ad', 'd', 'dx', 'dd'], ["specialChars" => ["d" => "\\d"]]) returns '[\\da][\\dx]?'
 [x] fromList(['foo', 'bar', 'y', 'z']) returns '(?:[yz]|bar|foo)'
 [x] fromList(['foo', 'bar', 'baz', 'y', 'z']) returns '(?:[yz]|ba[rz]|foo)'
 [x] fromList(['a', 'aacc', 'aadd', 'bbcc', 'bbdd']) returns '(?:a(?:a(?:cc|dd))?|bb(?:cc|dd))'
 [x] fromList(['aa', 'bb', 'aacc', 'aadd', 'bbcc', 'bbdd']) returns '(?:aa|bb)(?:cc|dd)?'
 [x] fromList(['aa', 'bb', 'aaccxx', 'aaddxx', 'bbccxx', 'bbddxx', 'aaccyy', 'aaddyy', 'bbccyy', 'bbddyy']) returns '(?:aa|bb)(?:(?:cc|dd)(?:xx|yy))?'
 [x] fromList(['^foo$', '^foo'], ["specialChars" => ["^" => "^", "$" => "$"]]) returns '^foo'
 [x] fromList(['^foo$', 'foo$'], ["specialChars" => ["^" => "^", "$" => "$"]]) returns 'foo$'
 [x] fromList(['bfoo', 'bfoob'], ["specialChars" => ["b" => "\\b"]]) returns '\\bfoo'
 [x] fromList(['apple', 'apple*'], ["specialChars" => ["*" => ".*?"]]) returns 'apple.*?'
 [x] fromList(['apple*', 'applepie'], ["specialChars" => ["*" => ".*?"]]) returns 'apple.*?'
 [x] fromList(['apple*', 'applepie'], ["specialChars" => ["*" => ".+?"]]) returns 'apple.+?'
 [x] fromList(['apple*', 'apple'], ["specialChars" => ["*" => ".*?"]]) returns 'apple.*?'
 [x] fromList(['apple*', 'apple+'], ["specialChars" => ["*" => ".*?", "+" => ".*"]]) returns 'apple.*'
 [x] fromList(['apple*', 'apple+'], ["specialChars" => ["*" => ".+?", "+" => ".+"]]) returns 'apple.+'
 [x] fromList(['apple*', 'apple+'], ["specialChars" => ["*" => ".*", "+" => ".+"]]) returns 'apple.*'
 [x] fromList(['applepie', 'lemonpie', 'pie', '*pie'], ["specialChars" => ["*" => ".*"]]) returns '.*pie'
 [x] fromList(['*pie*', 'lemonpie'], ["specialChars" => ["*" => ".*"]]) returns '.*pie.*'
 [x] fromList(['*pie*', 'lemonpie', 'banana'], ["specialChars" => ["*" => ".*"]]) returns '(?:.*pie.*|banana)'
 [x] fromList(['^foo$', '^foo+'], ["specialChars" => ["^" => "^", "$" => "$", "+" => ".+"]]) returns '^foo(?:$|.+)'
 [x] fromList(['^foo$', '^foo*'], ["specialChars" => ["^" => "^", "$" => "$", "*" => ".*"]]) returns '^foo.*'
 [x] fromList(['food', 'foo+'], ["specialChars" => ["d" => "\\d", "+" => ".+"]]) returns 'foo.+'
 [x] fromList(['foo*', 'foo+'], ["specialChars" => ["*" => "\\w*", "+" => ".+"]]) returns 'foo(?:\\w*|.+)'
 [x] fromList(['foo?', 'foo+'], ["specialChars" => ["?" => "\\w?", "+" => ".+"]]) returns 'foo(?:.+|\\w?)'
 [x] fromList(['fooB', 'foo+'], ["specialChars" => ["B" => "\\B", "+" => ".+"]]) returns 'foo(?:.+|\\B)'
 [x] fromList(['+foo+', 'fooB'], ["specialChars" => ["B" => "\\B", "+" => ".+"]]) returns '(?:.+foo.+|foo\\B)'
 [x] fromList(['+foo+', 'foo', 'bar'], ["specialChars" => ["+" => ".+"]]) returns '(?:.+foo.+|bar|foo)'
 [x] fromList(['+foo+', '+foo', 'bar'], ["specialChars" => ["+" => ".+"]]) returns '(?:.+foo.*|bar)'
 [x] fromList(['+foo+', '+foo'], ["specialChars" => ["+" => ".+"]]) returns '.+foo.*'
 [x] fromList(['++', 'a'], ["specialChars" => ["+" => ".+"]]) returns '(?:a|.+.+)'
 [x] fromList(['a', '.'], ["specialChars" => ["." => "."]]) returns '.'
 [x] fromList(['hip', 'hop', 'h.p'], ["specialChars" => ["." => "."]]) returns 'h.p'
 [x] fromList(['hi', 'hop', 'h.p'], ["specialChars" => ["." => "."]]) returns 'h(?:i|.p)'
 [x] fromList(['h', 'h.'], ["specialChars" => ["." => "."]]) returns 'h.?'
 [x] fromList(['h.', 'hd'], ["specialChars" => ["." => ".", "d" => "\\d\\d"]]) returns 'h(?:.|\\d\\d)'
 [x] fromList(['hXXXXXXXXXXX', 'h\\^$.[]()+*?', 'hotel'], ["specialChars" => ["X" => "."]]) returns 'h(?:...........|otel)'
 [x] fromList(['zdDhHsSvVwW', 'z..........', 'zebra'], ["specialChars" => ["d" => "\\d", "D" => "D", "h" => "\\h", "H" => "\\H", "s" => "\\s", "S" => "S", "v" => "\\v", "V" => "\\V", "w" => "\\w", "W" => "W", "." => "."]]) returns 'z(?:..........|ebra)'
 [x] fromList(['m.', 'mb'], ["specialChars" => ["." => ".", "b" => "\\b"]]) returns 'm(?:.|\\b)'
 [x] fromList(['m.', 'mB'], ["specialChars" => ["." => ".", "B" => "\\B"]]) returns 'm(?:.|\\B)'
 [x] fromList(['m.', 'mA'], ["specialChars" => ["." => ".", "A" => "\\A"]]) returns 'm(?:.|\\A)'
 [x] fromList(['m.', 'mZ'], ["specialChars" => ["." => ".", "Z" => "\\Z"]]) returns 'm(?:.|\\Z)'
 [x] fromList(['m.', 'mz'], ["specialChars" => ["." => ".", "z" => "\\z"]]) returns 'm(?:.|\\z)'
 [x] fromList(['m.', 'mG'], ["specialChars" => ["." => ".", "G" => "\\G"]]) returns 'm(?:.|\\G)'
 [x] fromList(['m.', 'mQ'], ["specialChars" => ["." => ".", "Q" => "\\Q"]]) returns 'm(?:.|\\Q)'
 [x] fromList(['m.', 'mE'], ["specialChars" => ["." => ".", "E" => "\\E"]]) returns 'm(?:.|\\E)'
 [x] fromList(['m.', 'mK'], ["specialChars" => ["." => ".", "K" => "\\K"]]) returns 'm(?:.|\\K)'
 [x] fromList(['h$', 'h.'], ["specialChars" => ["." => ".", "$" => "$"]]) returns 'h(?:$|.)'
 [x] fromList(['h?', 'ha'], ["specialChars" => ["?" => ".?"]]) returns 'h.?'
 [x] fromList(['h.', 'hi', 'hit'], ["specialChars" => ["." => ".?"]]) returns 'h(?:.|it)?'
 [x] fromList(['a.c.e', 'a.ce', 'ac.e', 'ace', 'acde', 'abce', 'abcde'], ["specialChars" => ["." => ".?"]]) returns 'a.?c.?e'
 [x] fromList(['h????', 'hello', 'heart'], ["specialChars" => ["?" => ".?"]]) returns 'h.?.?.?.?'
 [x] fromList(['x', 'xx', 'xxx']) returns 'xx?x?'
 [x] fromList(['d', 'dd', 'ddd'], ["specialChars" => ["d" => "\\d"]]) returns '\\d\\d?\\d?'
 [x] fromList() throws a RuntimeException if any word is not legal UTF-8

s9e\TextFormatter\Tests\Configurator\Helpers\RegexpParser
 [x] parse() can parse plain regexps
 [x] parse() throws a RuntimeException if delimiters can't be parsed
 [x] parse() parses pattern modifiers
 [x] parse() parses character classes
 [x] parse() parses character classes with quantifiers
 [x] parse() parses character classes with quantifiers and greediness operator
 [x] parse() parses character classes that end with an escaped ]
 [x] parse() throws a RuntimeException if a character class is not properly closed
 [x] parse() correctly parses escaped brackets
 [x] parse() correctly parses escaped parentheses
 [x] parse() parses non-capturing subpatterns
 [x] parse() parses non-capturing subpatterns with atomic grouping
 [x] parse() parses non-capturing subpatterns with (possessive) quantifier
 [x] parse() parses non-capturing subpatterns with (ungreedy) quantifier
 [x] parse() parses non-capturing subpatterns with options
 [x] parse() parses option settings
 [x] parse() parses named subpatterns using the (?<name>) syntax
 [x] parse() parses named subpatterns using the (?P<name>) syntax
 [x] parse() parses named subpatterns using the (?'name') syntax
 [x] parse() parses capturing subpatterns
 [x] parse() throws a RuntimeException if an unmatched right parenthesis is found
 [x] parse() throws a RuntimeException if an unmatched left parenthesis is found
 [x] parse() throws a RuntimeException on unsupported subpatterns
 [x] parse() parses lookahead assertions
 [x] parse() parses negative lookahead assertions
 [x] parse() parses lookbehind assertions
 [x] parse() parses negative lookbehind assertions
 [x] getAllowedCharacterRegexp() works

s9e\TextFormatter\Tests\Configurator\Helpers\RulesHelper
 [x] Works with a single tag
 [x] If no rule is defined, the default is to allow children and descendants
 [x] Correctly applies denyChild
 [x] defaultChildRule is correctly applied
 [x] allowChild overrides defaultChildRule('deny')
 [x] denyChild overrides defaultChildRule('allow')
 [x] denyChild overrides allowChild
 [x] denyDescendant overrides allowChild
 [x] defaultDescendantRule is correctly applied
 [x] allowDescendant overrides defaultDescendantRule('deny')
 [x] allowDescendant does not override denyChild
 [x] denyDescendant overrides defaultDescendantRule('allow')
 [x] denyDescendant overrides allowDescendant
 [x] ignoreTags (true) overrides everything
 [x] ignoreTags (false) has no effect
 [x] Tags with a requireParent rule are not allowed at the root
 [x] Tags that aren't allowed anywhere are omitted from the return array
 [x] Tags that are allowed in a closed dependency loop are omitted from the return array
 [x] Rules targeting inexistent tags do not interfere
 [x] Bitfields are compressed by making tags that are targeted by the same permissions share the same bit number

s9e\TextFormatter\Tests\Configurator\Helpers\TemplateParser
 [x] parse() tests
 [x] parse() throws an exception if it encounters a processing instruction in the stylesheet
 [x] parse() throws an exception if it encounters an unsupported XSL element
 [x] parse() throws an exception if it encounters an unsupported <xsl:copy/> expression
 [x] parse() throws an exception if it encounters a non-XSL namespaced element

s9e\TextFormatter\Tests\Configurator\Helpers\TemplateHelper
 [x] loadTemplate() can load 'foo'
 [x] saveTemplate() correctly handles 'foo'
 [x] loadTemplate() can load '<xsl:value-of select="@foo"/>'
 [x] saveTemplate() correctly handles '<xsl:value-of select="@foo"/>'
 [x] saveTemplate() correctly handles an empty string
 [x] loadTemplate() can load '<ul><li>one<li>two</ul>'
 [x] saveTemplate() correctly handles '<ul><li>one<li>two</ul>'
 [x] loadTemplate() throws an exception on malformed XSL
 [x] asXPath('foo') returns 'foo'
 [x] asXPath("d'oh") returns "d'oh"
 [x] asXPath("'\"") returns concat("'",'"')
 [x] asXPath('"\'') returns concat('"',"'")
 [x] parseAttributeValueTemplate() tests
 [x] getParametersFromXSL() tests
 [x] getObjectParamsByRegexp() tests
 [x] getCSSNodes() tests
 [x] getJSNodes() tests
 [x] getURLNodes() tests
 [x] getElementsByRegexp() can return elements created via <xsl:copy-of/>
 [x] replaceTokens() tests
 [x] highlightNode() tests
 [x] minifyXPath() tests

s9e\TextFormatter\Tests\Configurator\Helpers\XPathParser
 [x] parse() tests
 [x] parse() throws an exception if the expression cannot be parsed

s9e\TextFormatter\Tests\Configurator\Items\Attribute
 [x] An array of options can be passed to the constructor
 [x] $attr->filterChain can be assigned an array
 [x] $attr->generator accepts an instance of ProgrammableCallback
 [x] $attr->generator accepts a callback and normalizes it to an instance of ProgrammableCallback
 [x] asConfig() correctly produces a config array
 [x] isSafeAsURL() returns FALSE by default
 [x] isSafeAsURL() returns TRUE if any filter is safe in context
 [x] markAsSafeAsURL() unconditionally marks the attribute as safe in context
 [x] isSafeInCSS() returns FALSE by default
 [x] isSafeInCSS() returns TRUE if any filter is safe in context
 [x] markAsSafeInCSS() unconditionally marks the attribute as safe in context
 [x] isSafeInJS() returns FALSE by default
 [x] isSafeInJS() returns TRUE if any filter is safe in context
 [x] markAsSafeInJS() unconditionally marks the attribute as safe in context

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilter
 [x] Sets the filter's signature to ['attrValue' => null]
 [x] isSafeInCSS() returns FALSE by default
 [x] isSafeInCSS() returns TRUE if markAsSafeInCSS() is called
 [x] isSafeInJS() returns FALSE by default
 [x] isSafeInJS() returns TRUE if markAsSafeInCSS() is called
 [x] isSafeInJS() returns TRUE if the callback is 'rawurlencode'
 [x] isSafeInJS() returns TRUE if the callback is 'strtotime'
 [x] isSafeInJS() returns TRUE if the callback is 'urlencode'
 [x] isSafeAsURL() returns FALSE by default
 [x] isSafeAsURL() returns TRUE if markAsSafeAsURL() is called

s9e\TextFormatter\Tests\Configurator\Items\AttributePreprocessor
 [x] __construct() throws an InvalidArgumentException if the regexp is not valid
 [x] getAttributes() returns an array where keys are the name of the named subpatterns/attributes and values is the regexp that exactly matches them
 [x] getAttributes() preserves the original's regexp "i", "s" and "u" flags
 [x] getRegexp() returns the regexp associated with this attribute preprocessor

s9e\TextFormatter\Tests\Configurator\Items\ProgrammableCallback
 [x] __construct() throws an InvalidArgumentException if its argument is not callable
 [x] An array of variables can be set with setVars() or retrieved with getVars()
 [x] setVars() is chainable
 [x] A single variable can be set with setVar() without overwriting other variables
 [x] addParameterByValue() adds a parameter as a value with no name
 [x] addParameterByValue() is chainable
 [x] addParameterByName() adds a parameter as a name with no value
 [x] addParameterByName() is chainable
 [x] resetParameters() removes all parameters
 [x] resetParameters() is chainable
 [x] Callback '\\strtotime' is normalized to 'strtotime'
 [x] Callback ['foo','bar'] is normalized to 'foo::bar'
 [x] Callback ['\\foo','bar'] is normalized to 'foo::bar'
 [x] getCallback() returns the callback
 [x] getJS() returns NULL by default
 [x] getJS() returns an instance of Code if no JS was set and the callback is a function found in Configurator/JavaScript/functions/
 [x] getJS() returns NULL if no JS was set and the callback is a function that is not found in Configurator/JavaScript/functions/
 [x] setJS() accepts a string and normalizes it to an instance of Code
 [x] setJS() accepts an instance of Code
 [x] setJS() is chainable
 [x] asConfig() returns an array containing the callback
 [x] asConfig() replaces the by-name parameters by the values stored in vars if available
 [x] asConfig() returns the callback's JavaScript as a variant if available
 [x] asConfig() uses getJS() to autofill the JavaScript variant
 [x] asConfig() replaces values that implement ConfigProvider with their config value
 [x] asConfig() recurses into params via ConfigHelper::toArray() to convert structures to arrays
 [x] asConfig() preserves NULL values and empty arrays in the callback's parameters

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Alnum
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterAlnum()
 [x] Is safe in CSS
 [x] Is safe in URL

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Choice
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterRegexp()
 [x] __construct() forwards its arguments to setValues()
 [x] setValues() creates a regexp that matches all given values (case-insensitive) and calls setRegexp()
 [x] setValues() creates a case-sensitive regexp if its second argument is TRUE
 [x] setValues() creates a Unicode-aware regexp if any values are non-ASCII
 [x] setValues() throws an exception if its second argument is not a boolean

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Color
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterColor()
 [x] Is safe in CSS

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Email
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterEmail()

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Float
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterFloat()
 [x] Is safe in CSS
 [x] Is safe in JS
 [x] Is safe in URL

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Identifier
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterIdentifier()
 [x] Is safe in CSS
 [x] Is safe in URL

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Int
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterInt()
 [x] Is safe in CSS
 [x] Is safe in JS
 [x] Is safe in URL

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Ip
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterIp()

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Ipport
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterIpport()

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Ipv4
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterIpv4()

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Ipv6
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterIpv6()

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Map
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterMap()
 [x] __construct() forwards its arguments to setMap()
 [x] asConfig() throws an exception if the 'map' var is missing
 [x] asConfig() returns an array
 [x] setMap() creates case-insensitive regexps by default
 [x] setMap() creates case-sensitive regexps if its second argument is TRUE
 [x] setMap() appends a catch-all regexp that maps to FALSE if its third argument is TRUE
 [x] setMap() uses the pattern modifier 'u' if a regexp is not entirely ASCII
 [x] setMap() throws an exception if the second argument is not a boolean
 [x] setMap() throws an exception if the third argument is not a boolean

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Number
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterNumber()
 [x] Is safe in CSS
 [x] Is safe in JS
 [x] Is safe in URL

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Range
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterRange()
 [x] Is safe in CSS
 [x] Is safe in JS
 [x] Is safe in URL
 [x] __construct() forwards its arguments to setRange()
 [x] asConfig() throws an exception if the 'min' var is missing
 [x] asConfig() throws an exception if the 'max' var is missing
 [x] asConfig() returns an array
 [x] setRange() sets the 'min' and 'max' vars
 [x] setRange() throws an exception if the first argument is not a number
 [x] setRange() throws an exception if the second argument is not a number
 [x] setRange() throws an exception if the min value is greater than the max value

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Regexp
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterRegexp()
 [x] Is not safe as URL
 [x] Is safe as URL if the regexp is /^[a-z]$/
 [x] Is safe as URL if the regexp is /^foo:(.*)/
 [x] Is not safe as URL if the regexp is /^foo:(.*)/m
 [x] Is safe as URL if the regexp is /^https?:(.*)/
 [x] Is safe as URL if the regexp is /^(https?:.*)/
 [x] Is safe as URL if the regexp is /^(?:https?:.*)/
 [x] Is not safe as URL if the regexp is /^javascript:(.*)/
 [x] Is not safe as URL if the regexp is /^javascriptx?:(.*)/
 [x] Is not safe as URL if the regexp allows a colon to be used
 [x] Is not safe as URL if the regexp is invalid
 [x] Is safe in CSS if the regexp is /^(?:left|right|center)$/
 [x] Is safe in CSS if the regexp is /^[a-z]$/
 [x] Is not safe in CSS if the regexp is /^[A-z]$/ because it would allow backslashes
 [x] Is not safe in CSS if the regexp is invalid
 [x] Is not safe in CSS if no regexp is set
 [x] __construct() forwards its arguments to setRegexp()
 [x] getRegexp() returns the filter's regexp
 [x] setRegexp() sets the filter's regexp
 [x] setRegexp() throws an exception if the regexp is invalid
 [x] asConfig() returns an array
 [x] asConfig() throws an exception if the 'regexp' var is missing
 [x] asConfig() creates a JS variant for the regexp

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Simpletext
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterSimpletext()
 [x] Is safe in CSS

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Uint
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterUint()
 [x] Is safe in CSS
 [x] Is safe in JS
 [x] Is safe in URL

s9e\TextFormatter\Tests\Configurator\Items\AttributeFilters\Url
 [x] Callback is s9e\TextFormatter\Parser\BuiltInFilters::filterUrl()
 [x] Is safe in CSS
 [x] Is safe in JS
 [x] Is safe in URL

s9e\TextFormatter\Tests\Configurator\Items\DynamicStylesheetParameter
 [x] __construct() does not require an argument
 [x] __construct() can take the parameter's default expression as argument
 [x] Returns its default value as an XPath expression when cast as a string
 [x] Minifies the XPath expression passed to the constructor
 [x] isSafeAsURL() returns false by default
 [x] isSafeAsURL() returns true if markAsSafeAsURL() was called
 [x] isSafeInCSS() returns false by default
 [x] isSafeInCSS() returns true if markAsSafeInCSS() was called
 [x] isSafeInJS() returns false by default
 [x] isSafeInJS() returns true if markAsSafeInJS() was called

s9e\TextFormatter\Tests\Configurator\Items\StaticStylesheetParameter
 [x] __construct() does not require an argument
 [x] __construct() can take the parameter's default value as argument
 [x] Returns its default value as an XPath expression when cast as a string
 [x] isSafeAsURL() returns false by default
 [x] isSafeAsURL() returns true if markAsSafeAsURL() was called
 [x] isSafeInCSS() returns false by default
 [x] isSafeInCSS() returns true if markAsSafeInCSS() was called
 [x] isSafeInJS() returns false by default
 [x] isSafeInJS() returns true if markAsSafeInJS() was called
 [x] getValue() returns the literal value of the parameter

s9e\TextFormatter\Tests\Configurator\Items\Regexp
 [x] __construct() throws an InvalidArgumentException if the regexp is not valid
 [x] Can be cast as a string
 [x] toJS() returns a JavaScript RegExp
 [x] asConfig() returns an instance of Variant
 [x] asConfig() returns a JS variant
 [x] asConfig() returns a JS variant that is an instance of s9e\TextFormatter\Configurator\JavaScript\RegExp
 [x] asConfig() adds a global flag to the JavaScript RegExp if isGlobal is true

s9e\TextFormatter\Tests\Configurator\Items\Tag
 [x] An array of options can be passed to the constructor
 [x] $tag->attributePreprocessors can be assigned a 2D array of regexps
 [x] $tag->attributePreprocessors can be assigned an instance of AttributePreprocessorCollection to copy its content
 [x] Setting $tag->attributePreprocessors clears previous attributePreprocessors
 [x] $tag->nestingLimit accepts '10' and casts it as an integer
 [x] $tag->nestingLimit rejects non-numbers
 [x] $tag->nestingLimit rejects numbers less than 1
 [x] $tag->rules can be assigned a 2D array of rules
 [x] $tag->rules can be assigned an instance of Ruleset to copy its content
 [x] Setting $tag->rules clears previous rules
 [x] $tag->tagLimit accepts '10' and casts it as an integer
 [x] $tag->tagLimit rejects non-numbers
 [x] $tag->tagLimit rejects numbers less than 1
 [x] $tag->templates can be assigned an array of templates
 [x] $tag->templates can be assigned an instance of TemplateCollection to copy its content
 [x] Setting $tag->templates clears previous templates
 [x] setTemplates() throws an InvalidArgumentException if its argument is not an array or an instance of TemplateCollection
 [x] $tag->defaultTemplate maps to $tag->templates->get('')
 [x] $tag->defaultTemplate = 'foo' maps to $tag->templates->set('', 'foo')
 [x] unset($tag->defaultTemplate) is supported
 [x] asConfig() produces a config array, omitting properties that are not needed during parsing: defaultChildRule, defaultDescendantRule and templates
 [x] $tag->filterChain starts with Parser::executeAttributePreprocessors by default
 [x] $tag->filterChain contains Parser::filterAttributes by default
 [x] asConfig() omits 'Parser::executeAttributePreprocessors' from the returned filterChain if no attribute preprocessor is defined
 [x] asConfig() does not modify the tag's filterChain itself

s9e\TextFormatter\Tests\Configurator\Items\TagFilter
 [x] Sets the filter's signature to ['tag' => null]

s9e\TextFormatter\Tests\Configurator\Items\Template
 [x] When cast as string, returns the template's content
 [x] getParameters() returns the list of parameters used in this template
 [x] asDOM() returns the template as a DOMDocument
 [x] getCSSNodes() returns all nodes that normally contain CSS
 [x] getJSNodes() returns all nodes that normally contain JS
 [x] getURLNodes() returns all nodes that normally contain a URL
 [x] isNormalized() returns false by default
 [x] isNormalized() returns true if normalize() was called
 [x] isNormalized(true) sets it to true
 [x] isNormalized(false) sets it to false

s9e\TextFormatter\Tests\Configurator\Items\Variant
 [x] get() returns the default value
 [x] get('JS') returns the 'JS' variant if it exists
 [x] get('JS') returns the default value if the 'JS' variant does not exist
 [x] has('JS') returns TRUE if it has a 'JS' variant
 [x] has('JavaScript') returns FALSE if it does not have a 'JS' variant
 [x] Creating a new Variant with a Variant value makes it copy its default value and its variants instead
 [x] __construct() can be called with no arguments, and the default value will be NULL
 [x] __construct() can take an associative array of variants as second argument
 [x] setDynamic() saves a dynamic variant whose callback does not get called if the variant is not read
 [x] setDynamic() saves a dynamic variant whose callback is called and its value returned when the variant is retrieved
 [x] setDynamic() saves a dynamic variant whose callback is called and its value returned everytime the variant is retrieved
 [x] setDynamic() throws an exception on invalid callback

s9e\TextFormatter\Tests\Configurator\JavaScript\Code
 [x] Can be cast as a string

s9e\TextFormatter\Tests\Configurator\JavaScript\RegExp
 [x] Returns a JavaScript literal when cast as a string

s9e\TextFormatter\Tests\Configurator\JavaScript\RegexpConvertor
 [x] toJS() returns an instance of s9e\TextFormatter\Configurator\JavaScript\RegExp
 [x] toJS() can convert plain regexps
 [x] toJS() escapes forward slashes
 [x] toJS() does not double-escape forward slashes that are already escaped
 [x] toJS() does not "eat" backslashes while escaping forward slashes
 [x] toJS() can convert regexps with the "i" modifier
 [x] toJS() can convert regexps with capturing subpatterns
 [x] toJS() can convert regexps with non-capturing subpatterns
 [x] toJS() can convert regexps with non-capturing subpatterns with a quantifier
 [x] toJS() converts greedy quantifiers to normal quantifiers in non-capturing subpatterns
 [x] toJS() throws a RuntimeException on options (?i)
 [x] toJS() throws a RuntimeException on subpattern options (?i:)
 [x] toJS() can convert regexps with character classes with a quantifier
 [x] toJS() converts greedy quantifiers to normal quantifiers in character classes
 [x] toJS() replaces \pL with the full character range in character classes
 [x] toJS() replaces \p{L} with the full character range in character classes
 [x] toJS() replaces \pL outside of character classes with a character class containing the full character range
 [x] toJS() replaces \p{L} outside of character classes with a character class containing the full character range
 [x] toJS() replaces \p{^L} with a character class containing the full character range
 [x] toJS() replaces \p{^L} with a character class equivalent to \PL
 [x] toJS() replaces \P{^L} with a character class equivalent to \pL
 [x] toJS() can convert regexps with lookahead assertions
 [x] toJS() can convert regexps with negative lookahead assertions
 [x] toJS() throws a RuntimeException on lookbehind assertions
 [x] toJS() throws a RuntimeException on negative lookbehind assertions
 [x] toJS() converts . to [\s\S] outside of character classes if the "s" modifier is set
 [x] toJS() does not convert . to [\s\S] if the "s" modifier is not set
 [x] toJS() does not convert . inside of character classes
 [x] toJS() converts named captures into normal captures
 [x] toJS() replaces its second parameter with a list of capturing subpattern names
 [x] toJS() non-named capturing subpatterns leave an empty name in the map
 [x] toJS() correctly converts /(?:foo)(?<z>bar)/ to /(?:foo)(bar)/

s9e\TextFormatter\Tests\Configurator\JavaScript\Minifier
 [x] get() forwards the call to minify() and returns its result
 [x] Caching is disabled by default
 [x] Caching is enabled if cacheDir is set and the minifier implements getCacheDifferentiator()
 [x] get() returns the cached result if applicable
 [x] get() rethrows exception thrown during minification by default
 [x] get() discards exceptions thrown during minification and instead returns the original source if keepGoing is TRUE

s9e\TextFormatter\Tests\Configurator\JavaScript\Minifiers\ClosureCompilerApplication
 [x] Throws an exception if the filename passed to the constructor does not exist
 [x] Allows caching
 [x] The cache key depends on the compilation level
 [x] The cache key depends on the extra options
 [x] The cache key depends on the Closure Compiler file
 [x] The cache key does not depend on the path to the Closure Compiler application
 [x] The cache key depends on whether the default externs are excluded
 [x] If the default externs are excluded, the custom externs are baked into the cache key
 [x] Works
 [x] Replaces the default externs with custom externs if compilationLevel is ADVANCED_OPTIMIZATIONS and excludeDefaultExterns is true

s9e\TextFormatter\Tests\Configurator\JavaScript\Minifiers\ClosureCompilerService
 [x] Works
 [x] Compilation level is ADVANCED_OPTIMIZATIONS by default
 [x] Excludes default externs by default
 [x] Includes our custom externs by default
 [x] Allows caching
 [x] The cache key depends on the compilation level
 [x] The cache key depends on whether the default externs are excluded
 [x] If the default externs are excluded, the custom externs are baked into the cache key
 [x] Throws an exception in case of a server error
 [x] Throws an exception in case of a compilation error

s9e\TextFormatter\Tests\Configurator\JavaScript\Minifiers\Noop
 [x] minify() returns its first argument

s9e\TextFormatter\Tests\Configurator\RulesGenerators\AutoCloseIfVoid
 [x] Generates an autoClose rule for <hr/>
 [x] Does not generate an autoClose rule for <span>

s9e\TextFormatter\Tests\Configurator\RulesGenerators\AutoReopenFormattingElements
 [x] Generates an autoReopen rule for <b>
 [x] Does not generate an autoReopen rule for <div>
 [x] Does not generate an autoReopen rule for <div><b>

s9e\TextFormatter\Tests\Configurator\RulesGenerators\EnforceContentModels
 [x] <b> has a denyChild rule for <div>
 [x] <a> has a denyChild and a denyDescendant rule for <a>
 [x] <p> does not have a rule for <p>
 [x] Generates an isTransparent rule for <a>
 [x] Generates an isTransparent rule for a template composed entirely of <xsl:apply-templates/>
 [x] Does not generate any boolean rules for <b>
 [x] Generates a noBrChild rule and a noBrDescendant rule for <style>

s9e\TextFormatter\Tests\Configurator\RulesGenerators\EnforceOptionalEndTags
 [x] <li> closes parent <li>
 [x] <ul> closes parent <p>
 [x] <p> does not close parent <li>

s9e\TextFormatter\Tests\Configurator\RulesGenerators\IgnoreTagsInCode
 [x] Generates an ignoreTags rule for <code><xsl:apply-templates/></code>
 [x] Generates an ignoreTags rule for <pre><code><xsl:apply-templates/></code></pre>
 [x] Does not generate an ignoreTags rule if <code> does not have an xsl:apply-templates descendant
 [x] Does not generate an ignoreTags rule for <b>

s9e\TextFormatter\Tests\Configurator\RulesGenerators\IgnoreTextIfDisallowed
 [x] Generates an ignoreText rule for <ul>
 [x] Does not generate an ignoreText rule for <b>

s9e\TextFormatter\Tests\Configurator\RulesGenerators\IgnoreWhitespaceAroundBlockElements
 [x] Generates a ignoreSurroundingWhitespace rule for <div>
 [x] Does not generate a ignoreSurroundingWhitespace rule for <span>

s9e\TextFormatter\Tests\Configurator\RulesGenerators\ManageParagraphs
 [x] Generates a breakParagraph rule for <ol>
 [x] Does not generate any rules for <b>
 [x] Generates a breakParagraph and a createParagraphs rule for <blockquote>
 [x] Generates a breakParagraph rule but no createParagraphs rule for <p>

s9e\TextFormatter\Tests\Configurator\RulesGenerators\NoBrIfWhitespaceIsPreserved
 [x] Does not generate a noBrDescendant rule for <ol>
 [x] Generates a noBrDescendant rule for <pre>

s9e\TextFormatter\Tests\Configurator\RulesGenerator
 [x] Implements ArrayAccess
 [x] Implements Iterator
 [x] Root has a denyChild rule for <li> if parentHTML is not specified
 [x] Root does not have a denyChild rule for <li> if parentHTML is <ul>
 [x] Default rules

s9e\TextFormatter\Tests\Configurator\TemplateNormalizations\Custom
 [x] Constructor expects a valid callback
 [x] normalize() calls the user-defined callback with a DOMNode as argument

s9e\TextFormatter\Tests\Configurator\TemplateNormalizations\InlineAttributes
 [x] Works

s9e\TextFormatter\Tests\Configurator\TemplateNormalizations\InlineCDATA
 [x] Works

s9e\TextFormatter\Tests\Configurator\TemplateNormalizations\InlineElements
 [x] Works

s9e\TextFormatter\Tests\Configurator\TemplateNormalizations\InlineTextElements
 [x] Works

s9e\TextFormatter\Tests\Configurator\TemplateNormalizations\InlineInferredValues
 [x] Works

s9e\TextFormatter\Tests\Configurator\TemplateNormalizations\MinifyXPathExpressions
 [x] Throws an exception if a string isn't properly closed
 [x] Works

s9e\TextFormatter\Tests\Configurator\TemplateNormalizations\NormalizeAttributeNames
 [x] Works

s9e\TextFormatter\Tests\Configurator\TemplateNormalizations\NormalizeElementNames
 [x] Works

s9e\TextFormatter\Tests\Configurator\TemplateNormalizations\OptimizeConditionalAttributes
 [x] Works

s9e\TextFormatter\Tests\Configurator\TemplateNormalizations\OptimizeConditionalValueOf
 [x] Works

s9e\TextFormatter\Tests\Configurator\TemplateNormalizations\PreserveSingleSpaces
 [x] Works

s9e\TextFormatter\Tests\Configurator\TemplateNormalizations\RemoveComments
 [x] Works

s9e\TextFormatter\Tests\Configurator\TemplateNormalizations\RemoveInterElementWhitespace
 [x] Works

s9e\TextFormatter\Tests\Configurator\TemplateNormalizer
 [x] Implements ArrayAccess
 [x] Implements Iterator
 [x] Only executes a normalization once per run if its "onlyOnce" property is true
 [x] normalizeTag() calls each of the tag's template's normalize() method with itself as argument
 [x] normalizeTag() does not call normalize() if the template was already normalized
 [x] Default normalization rules

s9e\TextFormatter\Tests\Configurator\TemplateChecks\AbstractDynamicContentCheck
 [x] Stylesheet parameters are considered safe
 [x] Variables pointing to an unknown attribute are unsafe
 [x] Variables pointing to a safe attribute are safe
 [x] Variables pointing to an unsafe attribute are unsafe
 [x] Variables pointing to a safe variable are safe
 [x] Variables pointing to an unsafe variable are unsafe
 [x] Variables pointing to a stylesheet parameter are safe
 [x] Variables pointing to a stylesheet parameter of the same name are safe
 [x] Local parameters pointing to an unknown attribute are unsafe
 [x] Local parameters pointing to a safe attribute are safe

s9e\TextFormatter\Tests\Configurator\TemplateChecks\DisallowAttributeSets
 [x] Disallowed: <b use-attribute-sets="foo"/>
 [x] Allowed: <b>...</b>

s9e\TextFormatter\Tests\Configurator\TemplateChecks\DisallowCopy
 [x] Disallowed: <b><xsl:copy/></b>
 [x] Allowed: <b>...</b>

s9e\TextFormatter\Tests\Configurator\TemplateChecks\DisallowDisableOutputEscaping
 [x] Disallowed: <b disable-output-escaping="1"/>
 [x] Allowed: <b>...</b>

s9e\TextFormatter\Tests\Configurator\TemplateChecks\DisallowDynamicAttributeNames
 [x] Disallowed: <b><xsl:attribute name="{@foo}"/></b>
 [x] Allowed: <b><xsl:attribute name="title"/></b>

s9e\TextFormatter\Tests\Configurator\TemplateChecks\DisallowDynamicElementNames
 [x] Disallowed: <xsl:element name="{st}"/>
 [x] Allowed: <xsl:element name="b"/>

s9e\TextFormatter\Tests\Configurator\TemplateChecks\DisallowElement
 [x] DisallowElement('script') disallows <b><script/></b>
 [x] DisallowElement('svg') disallows <svg:svg xmlns:svg="http://www.w3.org/2000/svg"/>
 [x] DisallowElement('script') allows <b><span/></b>
 [x] DisallowElement('script') disallows <b><SCRIPT/></b>
 [x] DisallowElement('script') disallows <b><xsl:element name="script"/></b>

s9e\TextFormatter\Tests\Configurator\TemplateChecks\DisallowElementNS
 [x] DisallowElementNS('http://www.w3.org/2000/svg', 'svg') disallows <svg:svg xmlns:svg="http://www.w3.org/2000/svg"/>
 [x] DisallowElementNS('http://www.w3.org/2000/svg', 'svg') disallows <svg xmlns="http://www.w3.org/2000/svg"/>
 [x] DisallowElementNS('urn:foo', 'script') allows <b><script/></b>

s9e\TextFormatter\Tests\Configurator\TemplateChecks\DisallowFlashFullScreen
 [x] Disallows <embed allowFullScreen="true"/>
 [x] Allows <embed allowFullScreen="false"/>
 [x] Allows <embed/>
 [x] Disallows <embed allowFullScreen="unknown"/>
 [x] Disallows <embed allowFullScreen="{@foo}"/>
 [x] Disallows <embed allowFullScreen="false"><xsl:attribute name="allowFullScreen"/></embed>
 [x] Disallows <object><param name="allowFullScreen" value="true"/></object>
 [x] Allows <object><param name="allowFullScreen" value="false"/></object>
 [x] Allows <object/>
 [x] Disallows <object><param name="allowFullScreen" value="unknown"/></object>
 [x] Disallows <object><param name="allowFullScreen" value="{@foo}"/></object>
 [x] Disallows <object><param name="allowFullScreen" value="false"><xsl:attribute name="value">true</xsl:attribute></param></object>
 [x] DisallowFlashFullScreen(true) allows <embed allowFullScreen="true" src="http://example.com/example.swf"/>
 [x] DisallowFlashFullScreen(false) disallows <embed allowFullScreen="true" src="http://example.com/example.swf"/>
 [x] DisallowFlashFullScreen(true) disallows <embed allowFullScreen="true" src="{@url}"/>
 [x] DisallowFlashFullScreen(true) disallows <embed allowFullScreen="true"><xsl:copy-of select="@src"/></embed>
 [x] DisallowFlashFullScreen(true) allows <object><param name="allowFullScreen" value="true"/><param name="movie" value="http://example.com/example.swf"/></object>
 [x] DisallowFlashFullScreen(false) disallows <object><param name="allowFullScreen" value="true"/><param name="movie" value="http://example.com/example.swf"/></object>
 [x] DisallowFlashFullScreen(true) disallows <object><param name="allowFullScreen" value="true"/><param name="movie" value="{@url}"/></object>
 [x] DisallowFlashFullScreen(true) disallows <embed allowFullScreen="true"><xsl:apply-templates/></embed>

s9e\TextFormatter\Tests\Configurator\TemplateChecks\DisallowNodeByXPath
 [x] '//script[@src]' disallows <div><script src=""/></div>
 [x] '//script[@src]' allows <div><script/></div>

s9e\TextFormatter\Tests\Configurator\TemplateChecks\DisallowObjectParamsWithGeneratedName
 [x] Allowed: <object><param name="foo"/></object>
 [x] Disallowed: <object><param name="{@foo"/></object>

s9e\TextFormatter\Tests\Configurator\TemplateChecks\DisallowPHPTags
 [x] Disallowed: <b><?php ?></b>
 [x] Disallowed: <b><?PHP ?></b>
 [x] Disallowed: <b><xsl:processing-instruction name="php"/></b>
 [x] Disallowed: <b><xsl:processing-instruction name="PHP"/></b>
 [x] Disallowed: <b><xsl:processing-instruction name="{@foo}"/></b>
 [x] Allowed: <b><?foo ?></b>
 [x] Allowed: <b><xsl:processing-instruction name="foo"/></b>

s9e\TextFormatter\Tests\Configurator\TemplateChecks\DisallowUnsafeCopyOf
 [x] Allowed: <b><xsl:copy-of select="@title"/></b>
 [x] Allowed: <b><xsl:copy-of select="@data-title"/></b>
 [x] Disallowed: <b><xsl:copy-of select="FOO"/></b>

s9e\TextFormatter\Tests\Configurator\TemplateChecks\DisallowUnsafeDynamicCSS
 [x] Allowed: <style>.important { color:red }</style>
 [x] Allowed: <b style="color:red">...</b>
 [x] Allowed if #color: <b style="color:{@foo}">...</b>
 [x] Disallowed if unknown: <b style="color:{@foo}">...</b>
 [x] Disallowed if unfiltered: <b style="color:{@foo}">...</b>
 [x] Disallowed: <b style="color:{.}">...</b>
 [x] Allowed if #color: <b><xsl:copy-of select="@style"/>...</b>
 [x] Disallowed if unknown: <b><xsl:copy-of select="@style"/>...</b>
 [x] Disallowed if unfiltered: <b><xsl:copy-of select="@style"/>...</b>
 [x] Allowed if #color: <b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute>...</b>
 [x] Disallowed if unknown: <b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute>...</b>
 [x] Disallowed if unfiltered: <b><xsl:attribute name="style"><xsl:value-of select="@foo"/></xsl:attribute>...</b>
 [x] Disallowed if unfiltered: <b><xsl:attribute name="style"><xsl:value-of select="."/></xsl:attribute>...</b>
 [x] Disallowed: <b><xsl:attribute name="style"><xsl:apply-templates/></xsl:attribute>...</b>
 [x] Disallowed: <b><xsl:attribute name="style"><xsl:for-each select="//*"><xsl:value-of select="@foo"/></xsl:for-each></xsl:attribute>...</b>

s9e\TextFormatter\Tests\Configurator\TemplateChecks\DisallowUnsafeDynamicJS
 [x] Allowed: <script>.important { alert(1) }</script>
 [x] Allowed: <b onclick="alert(1)">...</b>
 [x] Allowed if #number: <b onclick="alert({@foo})">...</b>
 [x] Disallowed if unknown: <b onclick="alert({@foo})">...</b>
 [x] Disallowed if unfiltered: <b onclick="alert({@foo})">...</b>
 [x] Disallowed: <b onclick="alert({.})">...</b>
 [x] Allowed if #number: <b><xsl:copy-of select="@onclick"/>...</b>
 [x] Disallowed if unknown: <b><xsl:copy-of select="@onclick"/>...</b>
 [x] Disallowed if unfiltered: <b><xsl:copy-of select="@onclick"/>...</b>
 [x] Allowed if #number: <b><xsl:attribute name="onclick"><xsl:value-of select="@foo"/></xsl:attribute>...</b>
 [x] Disallowed if unknown: <b><xsl:attribute name="onclick"><xsl:value-of select="@foo"/></xsl:attribute>...</b>
 [x] Disallowed if unfiltered: <b><xsl:attribute name="onclick"><xsl:value-of select="@foo"/></xsl:attribute>...</b>
 [x] Disallowed if unfiltered: <b><xsl:attribute name="onclick"><xsl:value-of select="."/></xsl:attribute>...</b>
 [x] Disallowed: <b><xsl:attribute name="onclick"><xsl:apply-templates/></xsl:attribute>...</b>
 [x] Disallowed: <b><xsl:attribute name="onclick"><xsl:for-each select="//*"><xsl:value-of select="@foo"/></xsl:for-each></xsl:attribute>...</b>

s9e\TextFormatter\Tests\Configurator\TemplateChecks\DisallowUnsafeDynamicURL
 [x] Allowed: <a href="http://example.org">...</a>
 [x] Allowed if #url: <a href="{@foo}">...</a>
 [x] Allowed even if unknown: <a href="http://{@foo}">...</a>
 [x] Allowed even if unknown: <a href="//{@foo}">...</a>
 [x] Allowed even if unknown: <a href="user/{@foo}">...</a>
 [x] Allowed even if unknown: <a href="#{@foo}">...</a>
 [x] Disallowed if unknown: <a href="{@foo}">...</a>
 [x] Disallowed if unfiltered: <a href="{@foo}">...</a>
 [x] Disallowed if unfiltered: <a href="javascript:{@foo}">...</a>
 [x] Disallowed if unfiltered: <a href="JAVASCRIPT:{@foo}">...</a>
 [x] Disallowed if unfiltered: <a href="<TAB>javascript:{@foo}">...</a>
 [x] Disallowed if unfiltered: <a href="vbscript:{@foo}">...</a>
 [x] Disallowed if unfiltered: <a href="data:{@foo}">...</a>
 [x] Disallowed: <a href="{.}">...</a>
 [x] Allowed if #url: <a><xsl:copy-of select="@href"/>...</a>
 [x] Disallowed if unknown: <a><xsl:copy-of select="@href"/>...</a>
 [x] Disallowed if unfiltered: <a><xsl:copy-of select="@href"/>...</a>
 [x] Allowed if #url: <a><xsl:attribute name="href"><xsl:value-of select="@foo"/></xsl:attribute>...</a>
 [x] Disallowed if unknown: <a><xsl:attribute name="href"><xsl:value-of select="@foo"/></xsl:attribute>...</a>
 [x] Allowed even if unknown: <a><xsl:attribute name="href">http://<xsl:value-of select="@foo"/></xsl:attribute>...</a>
 [x] Disallowed if unfiltered: <a><xsl:attribute name="href"><xsl:value-of select="@foo"/></xsl:attribute>...</a>
 [x] Disallowed if unfiltered: <a><xsl:attribute name="href"><xsl:value-of select="."/></xsl:attribute>...</a>
 [x] Disallowed: <a><xsl:attribute name="href"><xsl:apply-templates/></xsl:attribute>...</a>
 [x] Disallowed: <a><xsl:attribute name="href"><xsl:for-each select="//*"><xsl:value-of select="@foo"/></xsl:for-each></xsl:attribute>...</a>

s9e\TextFormatter\Tests\Configurator\TemplateChecks\DisallowXPathFunction
 [x] Disallowed: <xsl:value-of select="document(@foo)"/>
 [x] Disallowed: <xsl:value-of select="php:function()"/>
 [x] Disallowed: <xsl:value-of select="php : function()"/>
 [x] Disallowed: <b title="...{document()}"/>
 [x] Disallowed: <b title="...{ document () }"/>
 [x] Disallowed: <b title="...{ doc&#117;ment () }"/>
 [x] Disallowed: <b title="{concat(\'}\',document())}"/>
 [x] Allowed: <b title="document()"/>
 [x] Allowed: <b title="{&quot;document()&quot;}"/>

s9e\TextFormatter\Tests\Configurator\TemplateChecks\RestrictFlashNetworking
 [x] 'internal' disallows <embed allowNetworking="all"/>
 [x] 'internal' allows <embed allowNetworking="internal"/>
 [x] 'internal' allows <embed allowNetworking="none"/>
 [x] 'internal' disallows <embed/>
 [x] 'internal' disallows <embed allowNetworking="unknown"/>
 [x] 'internal' disallows <embed allowNetworking="{@foo}"/>
 [x] 'none' disallows <embed allowNetworking="all"/>
 [x] 'none' disallows <embed allowNetworking="internal"/>
 [x] 'none' allows <embed allowNetworking="none"/>
 [x] 'none' disallows <embed/>
 [x] 'internal' disallows <embed allowNetworking="internal"><xsl:attribute name="allowNetworking"/></embed>
 [x] 'internal' disallows <object><param name="allowNetworking" value="all"/></object>
 [x] 'internal' allows <object><param name="allowNetworking" value="internal"/></object>
 [x] 'internal' allows <object><param name="allowNetworking" value="none"/></object>
 [x] 'internal' disallows <object/>
 [x] 'internal' disallows <object><param name="allowNetworking" value="unknown"/></object>
 [x] 'internal' disallows <object><param name="allowNetworking" value="{@foo}"/></object>
 [x] 'none' disallows <object><xsl:if><param name="allowNetworking" value="none"/></xsl:if></object>
 [x] 'none' disallows <object><param name="allowNetworking" value="none"><xsl:attribute name="value">all</xsl:attribute></param></object>
 [x] 'none',true allows <embed src="http://example.com/example.swf"/>
 [x] 'none',false disallows <embed src="http://example.com/example.swf"/>
 [x] 'none',true disallows <embed src="{@url}"/>
 [x] 'none',true disallows <embed><xsl:copy-of select="@src"/></embed>
 [x] 'none',true allows <object><param name="movie" value="http://example.com/example.swf"/></object>
 [x] 'none',false disallows <object><param name="movie" value="http://example.com/example.swf"/></object>
 [x] 'none',true disallows <object><param name="movie" value="{@url}"/></object>
 [x] 'none',true disallows <embed><xsl:apply-templates/></embed>

s9e\TextFormatter\Tests\Configurator\TemplateChecks\RestrictFlashScriptAccess
 [x] 'sameDomain' disallows <embed allowScriptAccess="always"/>
 [x] 'sameDomain' allows <embed allowScriptAccess="sameDomain"/>
 [x] 'sameDomain' allows <embed allowScriptAccess="never"/>
 [x] 'sameDomain' allows <embed/>
 [x] 'sameDomain' disallows <embed allowScriptAccess="unknown"/>
 [x] 'sameDomain' disallows <embed allowScriptAccess="{@foo}"/>
 [x] 'never' disallows <embed allowScriptAccess="always"/>
 [x] 'never' disallows <embed allowScriptAccess="sameDomain"/>
 [x] 'never' allows <embed allowScriptAccess="never"/>
 [x] 'never' disallows <embed/>
 [x] Disallows <embed><xsl:attribute name="allowScriptAccess"/></embed>
 [x] 'sameDomain' disallows <object><param name="allowScriptAccess" value="always"/></object>
 [x] 'sameDomain' allows <object><param name="allowScriptAccess" value="sameDomain"/></object>
 [x] 'sameDomain' allows <object><param name="allowScriptAccess" value="never"/></object>
 [x] 'sameDomain' allows <object/>
 [x] 'sameDomain' disallows <object><param name="allowScriptAccess" value="unknown"/></object>
 [x] 'sameDomain' disallows <object><param name="allowScriptAccess" value="{@foo}"/></object>
 [x] 'never' disallows <object><xsl:if><param name="allowScriptAccess" value="never"/></xsl:if></object>
 [x] 'never' disallows <object><param name="allowScriptAccess" value="never"><xsl:attribute name="value">always</xsl:attribute></param></object>
 [x] 'never',true allows <embed src="http://example.com/example.swf"/>
 [x] 'never',false disallows <embed src="http://example.com/example.swf"/>
 [x] 'never',true disallows <embed src="{@url}"/>
 [x] 'never',true disallows <embed><xsl:copy-of select="@src"/></embed>
 [x] 'never',true allows <object><param name="movie" value="http://example.com/example.swf"/></object>
 [x] 'never',false disallows <object><param name="movie" value="http://example.com/example.swf"/></object>
 [x] 'never',true disallows <object><param name="movie" value="{@url}"/></object>
 [x] 'never',true disallows <embed><xsl:apply-templates/></embed>

s9e\TextFormatter\Tests\Configurator\TemplateChecker
 [x] Implements ArrayAccess
 [x] Implements Iterator
 [x] Disallows attribute sets by default
 [x] Disallows <xsl:copy/> by default
 [x] Disallows disabling output escaping by default
 [x] Disallows dynamic attribute names by default
 [x] Disallows dynamic element names by default
 [x] Disallows dynamic object param names by default
 [x] Disallows PHP tags by default
 [x] Disallows outputing PHP tags by default
 [x] Disallows potentially unsafe <xsl:copy-of/> by default
 [x] Disallows potentially unsafe dynamic CSS by default
 [x] Disallows potentially unsafe dynamic JS by default
 [x] Disallows potentially unsafe dynamic URLs by default
 [x] Disallows document() in XPath by default
 [x] Restricts Flash's allowScriptAccess to "sameDomain" (or lower) by default, in objects that use dynamic values
 [x] checkTag() doesn't check templates that are marked as unsafe
 [x] checkTag() checks all the templates of a tag
 [x] Can be reset and reconfigured with different checks
 [x] disable() disables all checks
 [x] enable() re-enables all checks

s9e\TextFormatter\Tests\Configurator\Stylesheet
 [x] setOutputMethod('xml') sets the stylesheet's output method to 'xml'
 [x] setOutputMethod('xml') sets the stylesheet's output to omit the XML declaration
 [x] setOutputMethod('text') throws an exception
 [x] setWildcardTemplate() accepts a string as template
 [x] setWildcardTemplate() accepts an instance of Template as template
 [x] setWildcardTemplate() sets a template with a * matching rule for given prefix
 [x] setWildcardTemplate() throws an exception if the prefix is empty
 [x] setWildcardTemplate() throws an exception if the prefix is invalid
 [x] get() tests the wildcard templates' safeness
 [x] get() only tests the wildcard templates' safeness against tags in its namespace
 [x] get() only tests the wildcard templates' safeness against tags that do not have a default template
 [x] get() correctly escapes predicates
 [x] get() merges duplicate templates
 [x] get() represents empty templates with a self-closing element
 [x] get() generates the namespace declarations necessary for prefixed tags
 [x] get() generates an exclude-result-prefixes directive for all the declared prefixes
 [x] get() includes parameters in the stylesheet
 [x] get() includes a parameter's default value in the stylesheet
 [x] get() escapes a parameter's default value
 [x] get() calls the plugins' finalize() method before assembling the stylesheet
 [x] get() normalizes wildcard templates before assembling the stylesheet
 [x] get() normalizes tags' templates before assembling the stylesheet
 [x] getUsedParameters() returns parameters that were formally defined
 [x] getUsedParameters() returns undefined parameters used in tags' templates
 [x] getUsedParameters() returns undefined parameters used in tags' templates' predicates
 [x] getUsedParameters() returns undefined parameters used in wildcard templates
 [x] get() outputs <xsl:param/> elements for undefined parameters used in templates
 [x] Creates a default template for <br/>
 [x] Creates a default template for <p></p>

s9e\TextFormatter\Tests\Configurator\UrlConfig
 [x] asConfig() creates a JavaScript variant for allowedSchemes
 [x] asConfig() creates a JavaScript variant for disallowedHosts
 [x] asConfig() creates a JavaScript variant for resolveRedirectsHosts
 [x] Disallowed IDNs are punycoded
 [x] disallowHost('example.org') disallows "example.org"
 [x] disallowHost('example.org') disallows "EXAMPLE.ORG"
 [x] disallowHost('example.org') disallows "www.example.org"
 [x] disallowHost('example.org') does not disallow "myexample.org"
 [x] disallowHost('example.org', false) does not disallow "www.example.org"
 [x] disallowHost('*.example.org') disallows "www.example.org"
 [x] disallowHost('*.example.org') disallows "www.xxx.example.org"
 [x] disallowHost('*.example.org') does not disallow "example.org"
 [x] disallowHost('*.example.org') does not disallow "example.org.org"
 [x] disallowHost('*xxx*') disallows "xxx.com"
 [x] disallowHost('*xxx*') disallows "foo.xxx"
 [x] disallowHost('*xxx*') disallows "myxxxsite.com"
 [x] resolveRedirectsFrom('bit.ly') matches "bit.ly"
 [x] resolveRedirectsFrom('bit.ly') matches "foo.bit.ly"
 [x] resolveRedirectsFrom('bit.ly', false) does not match "foo.bit.ly"
 [x] "http" is an allowed scheme by default
 [x] "https" is an allowed scheme by default
 [x] "HTTPS" is an allowed scheme by default
 [x] "ftp" is an allowed scheme by default
 [x] getAllowedSchemes() returns an array containing all the allowed schemes
 [x] allowScheme('ftp') allows "ftp" as scheme
 [x] allowScheme('<invalid>') throws an exception
 [x] There is no default scheme by default
 [x] setDefaultScheme('http') sets "http" as default scheme
 [x] setDefaultScheme('<invalid>') throws an exception
 [x] URLs do not require a scheme by default
 [x] requireScheme() forces URLs to require a scheme
 [x] requireScheme('nonbool') throws an exception

s9e\TextFormatter\Tests\Configurator\Validators\AttributeName
 [x] normalize() throws an InvalidArgumentException if the name is invalid
 [x] "url" is normalized to "url"
 [x] "URL" is normalized to "url"
 [x] "_url" is normalized to "_url"
 [x] "md5" is normalized to "md5"
 [x] "5md" is invalid (name must start with a letter or an underscore)
 [x] "" is invalid (name must start with a letter or an underscore)
 [x] "xmlns" is invalid ('xmlns' is reserved)
 [x] "data-src" is normalized to "data-src"
 [x] "foo:bar" is invalid (no colons allowed)
 [x] "foo\n" is invalid (no newlines allowed)

s9e\TextFormatter\Tests\Configurator\Validators\StylesheetParameterName
 [x] normalize() throws an InvalidArgumentException if the name is invalid
 [x] "foo" is normalized to "foo"
 [x] "Foo" is normalized to "Foo"
 [x] "*" is invalid (name must start with a letter or an underscore)
 [x] "foo:bar" is invalid (name can only contain letters, digits, dashes and underscores)
 [x] "foo\n" is invalid (no newlines allowed)

s9e\TextFormatter\Tests\Configurator\Validators\TagName
 [x] normalize() throws an InvalidArgumentException if the name is invalid
 [x] "b" is normalized to "B"
 [x] "B" is normalized to "B"
 [x] "_b" is normalized to "_B"
 [x] "H1" is normalized to "H1"
 [x] "-H" is invalid (name must start with a letter or an underscore)
 [x] "1H" is invalid (name must start with a letter or an underscore)
 [x] "" is invalid (name must start with a letter or an underscore)
 [x] "foo-bar" is normalized to "FOO-BAR"
 [x] "foo#bar" is invalid (no pound sign allowed)
 [x] "foo:bar" is normalized to "foo:bar"
 [x] ":bar" is invalid (empty prefix)
 [x] "_foo:bar" is normalized to "_foo:bar"
 [x] "Foo:bar" is normalized to "Foo:bar"
 [x] "f00:b4r" is normalized to "f00:b4r"
 [x] "foo_bar:baz" is normalized to "foo_bar:baz"
 [x] "7up:foo" is invalid (prefix must start with a letter)
 [x] "foo:bar:baz" is invalid (only one colon allowed)
 [x] "xmlns:foo" is invalid ('xmlns' prefix is reserved)
 [x] "xsl:foo" is invalid ('xsl' prefix is reserved)
 [x] "s9e:foo" is invalid ('s9e' prefix is reserved)
 [x] "B\n" is invalid (no newlines allowed)

s9e\TextFormatter\Tests\Configurator\JavaScript
 [x] getMinifier() returns an instance of Noop by default
 [x] setMinifier() accepts the name of a minifier type and returns an instance
 [x] setMinifier() accepts the name of a minifier type plus any number of arguments passed to the minifier's constructor
 [x] setMinifier() accepts an object that implements Minifier
 [x] setMinifier() returns the new instance
 [x] getParser() calls the minifier and returns its result
 [x] A plugin's quickMatch value is preserved if it's valid UTF-8
 [x] A plugin's quickMatch value is discarded if it contains no valid UTF-8
 [x] If a plugin's quickMatch value contains bad UTF-8, only the first consecutive valid characters are kept
 [x] A plugin with no JS parser does not appear in the source
 [x] getParser() throws an exception if it encounters a value that cannot be encoded into JavaScript
 [x] Attribute generators are converted
 [x] Built-in attribute filters are converted
 [x] An attribute filter that uses a built-in filter as callback is converted
 [x] An attribute filter with no JS representation unconditionally returns false
 [x] The name of a registered vars is expressed in quotes if it wouldn't be legal as a property
 [x] A callback that uses a registered vars whose name wouldn't be legal as a property uses the bracket syntax to access it
 [x] A callback that uses a registered vars whose name is legal as a property uses the dot syntax to access it
 [x] isLegalProp() tests
 [x] encode() tests
 [x] HINT.closeAncestor=0 by default
 [x] HINT.closeAncestor=1 if any tag has a closeAncestor rule
 [x] HINT.closeParent=0 by default
 [x] HINT.closeParent=1 if any tag has a closeParent rule
 [x] HINT.postProcessing=0 by default
 [x] HINT.postProcessing=1 if "data-s9e-livepreview-postprocess" appears in the stylesheet
 [x] HINT.regexpLimitActionAbort=0 by default
 [x] HINT.regexpLimitActionAbort=1 if a plugin has setRegexpLimitAction('abort')
 [x] HINT.regexpLimitActionAbort=0 if a plugin has setRegexpLimitAction('abort') but is disabled
 [x] HINT.regexpLimitActionIgnore=0 by default
 [x] HINT.regexpLimitActionIgnore=1 if a plugin has setRegexpLimitAction('ignore')
 [x] HINT.regexpLimitActionIgnore=0 if a plugin has setRegexpLimitAction('ignore') but is disabled
 [x] HINT.regexpLimitActionWarn=0 by default
 [x] HINT.regexpLimitActionWarn=1 if a plugin has setRegexpLimitAction('warn')
 [x] HINT.regexpLimitActionWarn=0 if a plugin has setRegexpLimitAction('warn') but is disabled
 [x] HINT.requireAncestor=0 by default
 [x] HINT.requireAncestor=1 if any tag has a requireAncestor rule
 [x] HINT.RULE_AUTO_CLOSE=0 by default
 [x] HINT.RULE_AUTO_CLOSE=1 if any tag has an autoClose rule
 [x] HINT.RULE_AUTO_REOPEN=0 by default
 [x] HINT.RULE_AUTO_REOPEN=1 if any tag has an autoReopen rule
 [x] HINT.RULE_BREAK_PARAGRAPH=0 by default
 [x] HINT.RULE_BREAK_PARAGRAPH=1 if any tag has a breakParagraph rule
 [x] HINT.RULE_CREATE_PARAGRAPHS=0 by default
 [x] HINT.RULE_CREATE_PARAGRAPHS=1 if any tag has a createParagraphs rule
 [x] HINT.RULE_CREATE_PARAGRAPHS=1 if the root rules have a createParagraphs rule
 [x] HINT.RULE_IGNORE_TEXT=0 by default
 [x] HINT.RULE_IGNORE_TEXT=1 if any tag has an ignoreText rule
 [x] HINT.RULE_IGNORE_TEXT=1 if the root rules have a createParagraphs rule
 [x] HINT.RULE_IS_TRANSPARENT=0 by default
 [x] HINT.RULE_IS_TRANSPARENT=1 if any tag has an isTransparent rule
 [x] HINT.RULE_NO_BR_CHILD=0 by default
 [x] HINT.RULE_NO_BR_CHILD=1 if any tag has a noBrChild rule
 [x] HINT.RULE_NO_BR_CHILD=1 if the root rules have a createParagraphs rule
 [x] HINT.RULE_NO_BR_DESCENDANT=0 by default
 [x] HINT.RULE_NO_BR_DESCENDANT=1 if any tag has a noBrDescendant rule
 [x] HINT.RULE_NO_BR_DESCENDANT=1 if the root rules have a createParagraphs rule
 [x] HINT.RULE_TRIM_WHITESPACE=0 by default
 [x] HINT.RULE_TRIM_WHITESPACE=1 if any tag has an ignoreSurroundingWhitespace rule

s9e\TextFormatter\Tests\Configurator\Bundle
 [x] getConfigurator() returns a configured instance of Configurator
 [x] getOptions() returns an empty array

s9e\TextFormatter\Tests\Configurator\BundleGenerator
 [x] generate() returns the bundle's PHP source
 [x] generate() accepts namespaced class names
 [x] A custom serializer can be set in $bundleGenerator->serializer
 [x] A custom unserializer can be set in $bundleGenerator->unserializer
 [x] generate('Foo', ['finalizeParser' => $callback]) calls $callback and passes it an instance of Parser
 [x] Modification made to the parser via callback appear in the generated bundle
 [x] generate('Foo', ['finalizeRenderer' => $callback]) calls $callback and passes it an instance of Renderer
 [x] Modification made to the renderer via callback appear in the generated bundle
 [x] If the renderer is an instance of the PHP renderer, its source is automatically loaded if the path to its file is known
 [x] Does not attempt to load the renderer's source if autoInclude is false
 [x] (before|after)(Parser|Render|Unparse) events are added to the bundle
 [x] The parserSetup callback is added to the source
 [x] The rendererSetup callback is added to the source
 [x] exportCallback()
 [x] exportObject()

s9e\TextFormatter\Tests\Configurator\Bundles\F5
 [x] Features

s9e\TextFormatter\Tests\Configurator\Bundles\Forum
 [x] Features

s9e\TextFormatter\Tests\Configurator\Bundles\S18
 [x] Features
 [x] getOptions() sets the helper's callbacks

s9e\TextFormatter\Tests\Parser\Tag
 [x] getAttributes() returns the tag's attributes as an array
 [x] getEndTag() returns NULL if the tag has no end tag set
 [x] getPos() returns the tag's length (amount of text consumed)
 [x] getName() returns the tag's name
 [x] getPos() returns the tag's position
 [x] getSortPriority() returns the tag's sortPriority
 [x] getStartTag() returns NULL if the tag has no start tag set
 [x] getType() returns the tag's type
 [x] isInvalid() returns false by default
 [x] isBrTag() returns true if the tag's name is "br"
 [x] isBrTag() returns false by default
 [x] isIgnoreTag() returns true if the tag's name is "i"
 [x] isIgnoreTag() returns false by default
 [x] isParagraphBreak() returns true if the tag's name is "pb"
 [x] isParagraphBreak() returns false by default
 [x] isStartTag() returns true if the tag's type is Tag::START_TAG
 [x] isStartTag() returns true if the tag's type is Tag::END_TAG
 [x] isStartTag() returns true if the tag's type is Tag::SELF_CLOSING_TAG
 [x] isEndTag() returns false if the tag's type is Tag::START_TAG
 [x] isEndTag() returns true if the tag's type is Tag::END_TAG
 [x] isEndTag() returns true if the tag's type is Tag::SELF_CLOSING_TAG
 [x] isSelfClosingTag() returns false if the tag's type is Tag::START_TAG
 [x] isSelfClosingTag() returns false if the tag's type is Tag::END_TAG
 [x] isSelfClosingTag() returns true if the tag's type is Tag::SELF_CLOSING_TAG
 [x] invalidate() makes isInvalid() return true
 [x] $tag1->cascadeInvalidationTo($tag2) causes $tag1->invalidate() to call $tag2->invalidate()
 [x] $tag1->cascadeInvalidationTo($tag2) does not cause $tag2->invalidate() to call $tag1->invalidate()
 [x] $tag1->cascadeInvalidationTo($tag2) immediately calls $tag2->invalidate() if $tag1 is invalid
 [x] Mutual invalidation doesn't cause an infinite loop
 [x] $tag1->pairWith($tag2) does not do anything if the tags have different names
 [x] $startTag->pairWith($endTag) does not do anything if $startTag's position is greater than $endTag's
 [x] $startTag->pairWith($endTag) sets $endTag->startTag if they share the same position
 [x] $startTag->pairWith($endTag) sets $endTag->startTag if $endTag's position is greater than $startTag's
 [x] $startTag->pairWith($endTag) sets $startTag->endTag if they share the same position
 [x] $startTag->pairWith($endTag) sets $startTag->endTag if $endTag's position is greater than $startTag's
 [x] $endTag->pairWith($startTag) sets $endTag->startTag if they share the same position
 [x] $endTag->pairWith($startTag) sets $endTag->startTag if $endTag's position is greater than $startTag's
 [x] $endTag->pairWith($startTag) sets $startTag->endTag if they share the same position
 [x] $endTag->pairWith($startTag) sets $startTag->endTag if $endTag's position is greater than $startTag's
 [x] setSortPriority() sets the tag's sortPriority
 [x] setAttribute('foo', 'bar') sets attribute 'foo' to 'bar'
 [x] setAttribute() overwrites existing attributes
 [x] setAttributes() sets multiple attributes at once
 [x] setAttributes() removes all other attributes
 [x] getAttribute('foo') returns the value of attribute 'foo'
 [x] hasAttribute('foo') returns false if attribute 'foo' is not set
 [x] hasAttribute('foo') returns true if attribute 'foo' is set
 [x] removeAttribute('foo') unsets attribute 'foo'
 [x] canClose() returns FALSE if this tag is invalid
 [x] canClose() returns FALSE if the tag names don't match
 [x] canClose() returns FALSE if given tag is a self-closing tag
 [x] canClose() returns FALSE if given tag is an end tag
 [x] canClose() returns FALSE if this tag is a self-closing tag
 [x] canClose() returns FALSE if this tag is a start tag
 [x] canClose() returns FALSE if this tag's position is before given tag's
 [x] canClose() returns TRUE if this tag's position is the same as given tag's
 [x] canClose() returns TRUE if this tag's position is after given tag's
 [x] canClose() returns FALSE if given tag is paired with another tag
 [x] canClose() returns FALSE if this tag is paired with another tag
 [x] canClose() returns TRUE if the tags are paired together
 [x] setFlags() sets the tag's flags
 [x] getFlags() returns the tag's flags

s9e\TextFormatter\Tests\Parser\BuiltInFilters
 [x] Regression tests
 [x] Filters work
 [x] filterRange() can be called without a logger
 [x] filterUrl() can be called without a logger

s9e\TextFormatter\Tests\Parser\FilterProcessing
 [x] registerVar($k, $v) sets registeredVars[$k] to $v
 [x] getRegisteredVars() returns all registered vars
 [x] executeAttributePreprocessors() sets captured attributes on match
 [x] executeAttributePreprocessors() does not overwrite attributes that were already set
 [x] executeAttributePreprocessors() unsets the source attribute on match
 [x] executeAttributePreprocessors() can reset the source attribute on match
 [x] executeAttributePreprocessors() does not unset the source attribute if there's no match
 [x] executeAttributePreprocessors() returns TRUE even if the no source attribute was present
 [x] executeFilter() correctly passes a value to the callback
 [x] executeFilter() correctly passes a named var to the callback
 [x] executeFilter() correctly passes a var passed through registeredVars to the callback
 [x] executeFilter() does not execute the callback and returns FALSE if a variable is missing
 [x] executeFilter() logs an error if a variable is missing
 [x] filterTag() returns TRUE if the tag has an empty filterChain
 [x] filterTag() executes the tag's filterChain and returns TRUE
 [x] filterTag() stops executing the tag's filterChain and returns FALSE if a filter returns FALSE
 [x] filterTag() calls the logger's setTag() and unsetTag() methods
 [x] filterTag() can pass its own instance to tag filters via the 'parser' parameter
 [x] filterTag() can pass the list of open tags to tag filters via the 'openTags' parameter
 [x] filterAttributes() removes the tag's attributes if none were configured
 [x] filterAttributes() calls the attribute's generator and uses its return value as attribute's value
 [x] filterAttributes() removes undefined attributes
 [x] filterAttributes() executes every filter of an attribute's filterChain and returns the value
 [x] filterAttributes() stops executing the attribute's filterChain and returns FALSE if a filter returns FALSE
 [x] filterAttributes() removes invalid attributes
 [x] filterAttributes() replaces invalid attributes with their defaultValue if applicable
 [x] filterAttributes() adds missing attributes with their defaultValue if applicable
 [x] filterAttributes() calls the logger's setAttribute() and unsetAttribute() methods for each attribute with a filterChain

s9e\TextFormatter\Tests\Parser\Logger
 [x] debug() generates a "debug" entry in the logs
 [x] err() generates a "err" entry in the logs
 [x] info() generates a "info" entry in the logs
 [x] warn() generates a "warn" entry in the logs
 [x] The attribute name set by setAttribute() is added to the context if no 'attrName' element is provided
 [x] The attribute name set by setAttribute() is not added to the context if an 'attrName' element is provided
 [x] unsetAttribute() unsets the value stored by setAttribute()
 [x] The tag set by setTag() is added to the context if no 'tag' element is provided
 [x] The tag set by setTag() is not added to the context if a 'tag' element is provided
 [x] unsetTag() unsets the value stored by setTag()
 [x] clear() empties the logs
 [x] on() attaches a callback to be executed when the corresponding log type is used
 [x] on() throws an exception on invalid callback
 [x] on() callbacks receive the log message and its context
 [x] on() callbacks can modify the log message and its context if their signature accepts them as a reference
 [x] on() callbacks are only executed for the log type they were registered for

s9e\TextFormatter\Tests\Parser\PluginsHandling
 [x] disablePlugin() disables given plugin
 [x] enablePlugin() re-enables a disabled plugin
 [x] Nothing happens if disablePlugin() is called for an inexistent plugin
 [x] Nothing happens if enablePlugin() is called for an inexistent plugin
 [x] executePluginParsers() executes plugins' parse() method
 [x] executePluginParsers() does not execute disabled plugins
 [x] executePluginParsers() executes a plugin if its quickMatch test passes
 [x] executePluginParsers() does not execute a plugin if its quickMatch test fails
 [x] executePluginParsers() executes a plugin if its regexp test passes
 [x] executePluginParsers() does not execute a plugin if its regexp test fails
 [x] executePluginParsers() passes the text and the matches to the plugin's parser
 [x] executePluginParsers() does not execute a plugin and throws a RuntimeException if the number of matches exceeds regexpLimit and regexpLimitAction is 'abort'
 [x] executePluginParsers() executes a plugin with the first regexpLimit number of matches and logs a warning if the number of matches exceeds regexpLimit and regexpLimitAction is 'warn'
 [x] executePluginParsers() executes a plugin with the first regexpLimit number of matches if the number of matches exceeds regexpLimit and regexpLimitAction is 'ignore'
 [x] executePluginParsers() creates an instance of the class name stored in className if present
 [x] registerParser() can register a callback that replaces the parser of an existing plugin
 [x] registerParser() can register a callback that acts as the parser of a new plugin
 [x] registerParser() throws an exception if its second argument is not callable

s9e\TextFormatter\Tests\Parser\TagStack
 [x] addStartTag() adds a start tag to the stack
 [x] addEndTag() adds an end tag to the stack
 [x] addSelfClosingTag() adds a self-closing tag to the stack
 [x] addStartTag() returns the newly added tag
 [x] addStartTag() does not add anything to the stack if the tag name does not exist but it returns an invalidated tag
 [x] addStartTag() does not add the created tag to the stack if the tag has been disabled
 [x] addStartTag() does not add anything to the stack if the position is negative but it returns an invalidated tag
 [x] addStartTag() does not add anything to the stack if the length is negative but it returns an invalidated tag
 [x] addTagPair() creates both a start tag and an end tag of the same name, paired together
 [x] addTagPair() returns the newly-created start tag
 [x] addBrTag() adds a zero-width, self-closing "br" tag to the stack then returns it
 [x] addIgnoreTag() adds a self-closing "i" tag to the stack then returns it
 [x] addParagraphBreak() adds a zero-width, self-closing "pb" tag to the stack then returns it
 [x] addCopyTag() adds a copy of given tag at given position and given length
 [x] addCopyTag() copies the original tag's attributes
 [x] addCopyTag() copies the original tag's sort priority
 [x] sortTags() sorts tags by position descending (tags processed in text order)
 [x] sortTags() tiebreaker sorts tag that start at the same position by sortPriority descending (-10 is processed before 10)
 [x] sortTags() tiebreaker sorts zero-width tags after longer tags at the same position with the same priority (zero-width tags are processed first)
 [x] sortTags() tiebreaker sorts zero-width end tags after zero width start tag (end tags get the opportunity to close their parent before a new tag is open)
 [x] sortTags() tiebreaker sorts zero-width self-closing tags between zero-width start tags and zero-width end tags (attempting to keep them outside of tag pairs)
 [x] sortTags() tiebreaker sorts tags by length ascending (longer tags processed first)

s9e\TextFormatter\Tests\Parser\OutputHandling
 [x] Works

s9e\TextFormatter\Tests\Parser\TagProcessing
 [x] Works

s9e\TextFormatter\Tests\Parser\RulesHandling
 [x] Works

s9e\TextFormatter\Tests\Parser
 [x] Parser is serializable
 [x] Parser can be unserialized
 [x] getLogger() returns an instance of Logger
 [x] The logger is cleared before parsing a new text
 [x] parse() returns the intermediate representation
 [x] parse() can be called multiple times in succession
 [x] parse() normalizes \r to \n
 [x] parse() normalizes \r\n to \n
 [x] parse() removes control characters that aren't allowed in XML
 [x] disableTag('FOO') disables tag 'FOO'
 [x] enableTag('FOO') re-enables tag 'FOO'
 [x] parse() throws an exception if the parser is reset during its execution
 [x] setTagLimit('X', 7) set tag X's tagLimit to 7 if it exists
 [x] setNestingLimit('X', 7) set tag X's tagLimit to 7 if it exists

s9e\TextFormatter\Tests\Plugins\ConfiguratorBase
 [x] Constructor overwrites properties with values passed as second argument
 [x] Constructor calls setFoo() if 'foo' is being set
 [x] Constructor calls setUp()
 [x] Constructor calls setUp() after overwriting properties
 [x] An exception is thrown if an unknown property is being set by the constructor
 [x] getBaseProperties() return the values of quickMatch, regexpLimit and regexpLimitAction
 [x] setQuickMatch() sets the quickMatch property
 [x] setQuickMatch() throws an exception on non-strings
 [x] disableQuickMatch() sets the quickMatch property to false
 [x] setRegexpLimit() sets the regexpLimit property
 [x] setRegexpLimit() throws an exception on invalid values
 [x] setRegexpLimitAction() sets the regexpLimitAction property
 [x] setRegexpLimitAction() throws an exception on invalid values
 [x] Offers a default asConfig() implementation that leaves out the configurator instance
 [x] Has a default finalize() method that doesn't do anything
 [x] getJSParser() returns NULL for custom plugins
 [x] getJSParser() returns the content of Parser.js for stock plugins
 [x] getJSParser() returns NULL if there's no Parser.js for a stock plugin
 [x] getTag() returns the tag that is associated with this plugin
 [x] getTag() throws an exception if the plugin does not have a tagName property set

s9e\TextFormatter\Tests\Plugins\ParserBase
 [x] Constructor calls setUp()
 [x] Constructor sets up $this->config and $this->parser before calling setUp()

s9e\TextFormatter\Tests\Plugins\Autoemail\Configurator
 [x] Automatically creates an "EMAIL" tag with an "email" attribute with a "#email" filter
 [x] Does not attempt to create a tag if it already exists
 [x] The name of the tag used can be changed through the "tagName" constructor option
 [x] The name of the attribute used can be changed through the "attrName" constructor option
 [x] Has a quickMatch
 [x] Generates a regexp for its config array
 [x] The config array contains the name of the tag
 [x] The config array contains the name of the attribute
 [x] getTag() returns the tag that is associated with this plugin

s9e\TextFormatter\Tests\Plugins\Autoemail\Parser
 [x] Parsing tests
 [x] Parsing tests (JavaScript)
 [x] Parsing+rendering tests

s9e\TextFormatter\Tests\Plugins\Autolink\Configurator
 [x] Automatically creates an "URL" tag with an "url" attribute with a "#url" filter
 [x] Does not attempt to create a tag if it already exists
 [x] The name of the tag used can be changed through the "tagName" constructor option
 [x] The name of the attribute used can be changed through the "attrName" constructor option
 [x] Has a quickMatch
 [x] Generates a regexp for its config array
 [x] The config array contains the name of the tag
 [x] The config array contains the name of the attribute
 [x] The regexp matches the URL in 'foo http://www.bar.com baz'
 [x] The regexp matches the URL in 'FOO HTTP://WWW.BAR.COM BAZ'
 [x] The regexp matches the URL in 'foo http://www.bar.com/index.php?arr[foo]=1 baz'
 [x] The regexp matches the URL in 'foo [http://www.bar.com/index.php?foo=1] baz'
 [x] The regexp matches the URL in 'foo [http://www.bar.com/index.php?arr[foo]=1] baz'
 [x] getTag() returns the tag that is associated with this plugin

s9e\TextFormatter\Tests\Plugins\Autolink\Parser
 [x] Parsing tests
 [x] Parsing tests (JavaScript)
 [x] Parsing+rendering tests

s9e\TextFormatter\Tests\Plugins\BBCodes\Configurator\AttributeValueCollection
 [x] Throws an exception on invalid attribute name

s9e\TextFormatter\Tests\Plugins\BBCodes\Configurator\BBCode
 [x] An array of options can be passed to the constructor
 [x] BBCode::normalizeName('*') returns '*'
 [x] BBCode::normalizeName('foo') returns 'FOO'
 [x] BBCode::normalizeName('*invalid*') throws an exception
 [x] defaultAttribute accepts an attribute name and normalizes it accordingly
 [x] tagName accepts a tag name and normalizes it accordingly
 [x] $bbcode->contentAttributes is an instance of AttributeList
 [x] $bbcode->predefinedAttributes is an instance of AttributeValueCollection
 [x] asConfig() returns its set properties
 [x] asConfig() omits forceLookahead is it's FALSE

s9e\TextFormatter\Tests\Plugins\BBCodes\Configurator\BBCodeCollection
 [x] add() returns an instance of s9e\TextFormatter\Plugins\BBCodes\Configurator\BBCode
 [x] Instances of s9e\TextFormatter\Plugins\BBCodes\Configurator\BBCode are added as-is
 [x] add() normalizes the BBCode's name
 [x] delete() normalizes the BBCode's name
 [x] exists() normalizes the BBCode's name
 [x] get() normalizes the BBCode's name
 [x] set() normalizes the BBCode's name
 [x] asConfig() removes the defaultAttribute value of BBCodes where it is the same as the BBCode's name
 [x] asConfig() removes the tagName value of BBCodes where it is the same as the BBCode's name

s9e\TextFormatter\Tests\Plugins\BBCodes\Configurator\BBCodeMonkey
 [x] $bbcodeMonkey->allowedFilters is a publicly-accessible list of callbacks
 [x] parse() works
 [x] replaceTokens() works
 [x] create() creates and return a BBCode, its name and its tag
 [x] create() accepts an array of [predicate => template] as second argument

s9e\TextFormatter\Tests\Plugins\BBCodes\Configurator\Repository
 [x] __construct() accepts the path to an XML file as argument
 [x] __construct() accepts a DOMDocument as argument
 [x] __construct() throws an exception if passed anything else
 [x] __construct() throws an exception if passed the path to a file that is not valid XML
 [x] get() throws an exception if the BBCode is not in repository
 [x] get() normalizes the name before retrieval
 [x] If the name is a BBCode name followed by a # character, get() normalizes only the first part
 [x] Variables in <usage/> are replaced
 [x] Variables in <template/> are replaced
 [x] Multiple variables can be replaced
 [x] Variables that are not replaced are left intact
 [x] Custom tagName is correctly set
 [x] Rules targetting tags are correctly set
 [x] Boolean rules are set to their default value
 [x] Multiple templates can be set
 [x] predefinedAttributes is correctly set

s9e\TextFormatter\Tests\Plugins\BBCodes\Configurator\RepositoryCollection
 [x] Instances of Repository are added as-is
 [x] Anything else gets a new instance of Repository to be created

s9e\TextFormatter\Tests\Plugins\BBCodes\Configurator
 [x] $plugin->bbcodeMonkey is a publicly-accessible instance of s9e\TextFormatter\Plugins\BBCodes\Configurator\BBCodeMonkey
 [x] Automatically loads its default BBCode repository
 [x] addFromRepository('B') adds BBCode B and its tag from the default repository
 [x] addFromRepository('MYBOLD', 'foo') adds BBCode B and its tag from the 'foo' repository
 [x] addFromRepository('B', 'foo', ['title' => 'bar']) adds BBCode B and its tag from the 'foo' repository with variable 'title' replaced with content 'bar'
 [x] addFromRepository('B', 'foo') throws an exception if repository 'foo' does not exist
 [x] addFromRepository() throws an exception if the BBCode already exists
 [x] addFromRepository() throws an exception if the tag already exists
 [x] addFromRepository() normalizes the tag's templates
 [x] addFromRepository() checks that the tag is safe before adding it
 [x] addFromRepository() returns the newly-created BBCode
 [x] addCustom() returns the newly-created BBCode
 [x] addCustom() accepts a single string as its second argument, representing the default template
 [x] addCustom() accepts an array of [predicate => template] as its second argument
 [x] addCustom() normalizes the tag's template
 [x] addCustom() checks that the tag is safe before adding it
 [x] addCustom() accepts a custom "tagName" in options
 [x] addCustom() accepts custom "rules" in options
 [x] asConfig() returns FALSE if no BBCodes were created
 [x] Has a quickMatch
 [x] Generates a regexp for its config array
 [x] The regexp that matches BBCode names does not contain a superfluous non-capturing subpattern
 [x] Essential non-capturing subpatterns are preserved
 [x] asConfig() creates a JavaScript variant that preserves BBCode names
 [x] asConfig() creates a JavaScript variant that preserves attribute names in predefinedAttributes

s9e\TextFormatter\Tests\Plugins\BBCodes\Parser
 [x] Parsing tests
 [x] Parsing tests (JavaScript)

s9e\TextFormatter\Tests\Plugins\BBCodes\BBCodes
 [x] BBCodes from repository.xml render nicely
 [x] BBCodes from repository.xml are parsed identically by the JavaScript parser

s9e\TextFormatter\Tests\Plugins\Censor\Configurator
 [x] Automatically creates a "CENSOR" tag
 [x] Automatically creates a "with" attribute with required=false
 [x] Does not attempt to create a tag if it already exists
 [x] The name of the tag used can be changed through the "tagName" constructor option
 [x] The name of the attribute used can be changed through the "attrName" constructor option
 [x] asConfig() returns FALSE if no words were added
 [x] Generates a regexp for its config array
 [x] The config array contains the name of the tag
 [x] The config array contains the name of the attribute
 [x] Returns the replacements in its config in the form [[regexp, replacement]]
 [x] Words sharing the same replacement share a common regexp
 [x] Words using the default replacement do not appear in the replacements
 [x] asConfig() creates a JavaScript variant for the plugin's regexp
 [x] asConfig() creates a JavaScript variant for the regexps used in replacements
 [x] getTag() returns the tag that is associated with this plugin

s9e\TextFormatter\Tests\Plugins\Censor\Parser
 [x] Parsing tests
 [x] Parsing tests (JavaScript)
 [x] Parsing+rendering tests

s9e\TextFormatter\Tests\Plugins\Emoticons\Configurator
 [x] Automatically creates an "E" tag
 [x] Does not attempt to create a tag if it already exists
 [x] The name of the tag used can be changed through the "tagName" constructor option
 [x] set(':)', '<img src="e.png"/>') creates a :) emoticon that maps to <img src="e.png"/>
 [x] set(':)', '<img src="e.png">') creates a :) emoticon that maps to <img src="e.png"/>
 [x] Emoticons can contain single quotes
 [x] Emoticons can contain double quotes
 [x] Emoticons can contain both quotes at once
 [x] asConfig() returns FALSE if no emoticons were set
 [x] Generates a regexp for its config array
 [x] The config array contains the name of the tag
 [x] asConfig() generates a quickMatch if applicable
 [x] $plugin->regexpStart can be changed
 [x] $plugin->regexpEnd can be changed
 [x] getTemplate() merges identical templates
 [x] finalize() sets the tag's template
 [x] getTag() returns the tag that is associated with this plugin

s9e\TextFormatter\Tests\Plugins\Emoticons\Configurator\EmoticonCollection
 [x] Normalizes HTML templates
 [x] Throws an exception when an invalid template is set

s9e\TextFormatter\Tests\Plugins\Emoticons\Parser
 [x] Parsing tests
 [x] Parsing tests (JavaScript)
 [x] Parsing+rendering tests

s9e\TextFormatter\Tests\Plugins\Escaper\Configurator
 [x] By default only escapes the characters !#()*+-.:@[\]^_`{}
 [x] $plugin->escapeAll() makes it escape any Unicode character
 [x] $plugin->escapeAll(false) reverts to default escape list
 [x] Automatically creates an "ESC" tag
 [x] The name of the tag used can be changed through the "tagName" constructor option
 [x] Has a quickMatch
 [x] Generates a regexp for its config array
 [x] The config array contains the name of the tag
 [x] getTag() returns the tag that is associated with this plugin

s9e\TextFormatter\Tests\Plugins\Escaper\Parser
 [x] Parsing tests
 [x] Parsing tests (JavaScript)
 [x] Parsing+rendering tests

s9e\TextFormatter\Tests\Plugins\FancyPants\Configurator
 [x] Automatically creates a "FP" tag
 [x] Does not attempt to create a tag if it already exists
 [x] The name of the tag used can be changed through the "tagName" constructor option
 [x] The name of the attribute used can be changed through the "attrName" constructor option
 [x] The config array contains the name of the tag
 [x] The config array contains the name of the attribute
 [x] getTag() returns the tag that is associated with this plugin

s9e\TextFormatter\Tests\Plugins\FancyPants\Parser
 [x] Parsing tests
 [x] Parsing tests (JavaScript)
 [x] Parsing+rendering tests

s9e\TextFormatter\Tests\Plugins\Generic\Configurator
 [x] add() returns the name of the tag it creates
 [x] add() throws an exception if the regexp is invalid
 [x] add() throws an exception on duplicate named subpatterns
 [x] add() creates a tag to represent the replacement
 [x] add() creates an attribute for each named subpattern
 [x] add() creates an attribute for each numeric subpattern in use
 [x] add() creates a #regexp filter for each attribute created
 [x] add() appends a #url filter to attributes that are used as a URL
 [x] add() replaces numeric references in the template with the corresponding attribute value
 [x] add() replaces numeric references pointing to named subpatterns in the template with the corresponding attribute value
 [x] add() alters the regexp to give a name to unnamed subpatterns used in the template
 [x] add() does not give a name to unnamed subpatterns that are not used in the template
 [x] add() identifies $1 as a numeric reference in the template
 [x] add() identifies \1 as a numeric reference in the template
 [x] add() identifies ${1} as a numeric reference in the template
 [x] add() interprets \\1 in the template as a literal \1
 [x] add() interprets \\\1 in the template as a literal backslashes followed by a numeric reference
 [x] add() interprets \$1 in the template as a literal $1
 [x] add() replaces $0 with the whole match
 [x] add() interprets a (.*?) capture used in template's text as a passthrough
 [x] A passthrough capture used in an attribute does not include the start/end tags
 [x] A capture used as a URL can also be used as a passthrough, in which case it will used the filtered attribute when used in an attribute, and the normal passthrough when used in text
 [x] Captures from non-existent subpattern are removed from the template
 [x] An error occuring during add() does not leave a half-configured tag in the configurator's collection
 [x] add() normalizes the tag's template
 [x] add() checks the safeness of the tag
 [x] add() checks the safeness of the tag before adding it to the configurator's collection
 [x] asConfig() returns FALSE if no replacements were set
 [x] asConfig() returns the regexps in a "generics" array where each element is in the form [<tagName>,<regexp>,<passthrough index>]
 [x] asConfig() creates a JavaScript variant of generics
 [x] asConfig() creates JavaScript variants that contain a RegExp object instead of a regexp string, plus a map of named subpatterns

s9e\TextFormatter\Tests\Plugins\Generic\Parser
 [x] Parsing tests
 [x] Parsing tests (JavaScript)
 [x] Parsing+rendering tests

s9e\TextFormatter\Tests\Plugins\HTMLElements\Configurator
 [x] aliasElement('A', 'url') creates an alias for HTML element "a" to tag "URL"
 [x] aliasAttribute('A', 'HREF', 'URL') creates an alias for HTML attribute "href" in HTML element "a" to attribute "url"
 [x] allowElement('b') creates a tag named 'html:b'
 [x] allowElement('B') creates a tag named 'html:b'
 [x] allowElement() returns an instance of Tag
 [x] The prefix can be customized at loading time through the 'prefix' property
 [x] allowElement('script') throws an exception
 [x] allowUnsafeElement('script') allows the 'script' element
 [x] allowUnsafeElement() returns an instance of Tag
 [x] allowAttribute('b', 'title') creates an attribute 'title' on tag 'html:b'
 [x] allowAttribute() returns an instance of Attribute
 [x] Attributes created by allowAttribute() are considered optional
 [x] Attributes that are known to expect an URL are created with the '#url' filter
 [x] allowAttribute('b', 'title') throws an exception if 'b' was not explicitly allowed
 [x] allowAttribute('span', 'onmouseover') throws an exception
 [x] allowAttribute('span', 'style') throws an exception
 [x] allowUnsafeAttribute('span', 'onmouseover') allows the 'onmouseover' attribute on 'span' elements
 [x] allowUnsafeAttribute() returns an instance of Attribute
 [x] allowElement('*invalid*') throws an exception
 [x] allowAttribute('span', 'data-title') allows the 'data-title' attribute on 'span' elements
 [x] allowAttribute('b', '*invalid*') throws an exception
 [x] asConfig() returns FALSE if no elements were allowed
 [x] Has a quickMatch
 [x] Generates a regexp for its config array
 [x] asConfig() preserves aliased elements' keys in a JS variant
 [x] asConfig() preserves aliased attributes' keys in a JS variant

s9e\TextFormatter\Tests\Plugins\HTMLElements\Parser
 [x] Parsing tests
 [x] Parsing tests (JavaScript)
 [x] Parsing+rendering tests

s9e\TextFormatter\Tests\Plugins\HTMLEntities\Configurator
 [x] Automatically creates an "HE" tag
 [x] The name of the tag used can be changed through the "tagName" constructor option
 [x] The name of the attribute used can be changed through the "attrName" constructor option
 [x] Has a quickMatch
 [x] Generates a regexp for its config array
 [x] The config array contains the name of the tag
 [x] The config array contains the name of the attribute
 [x] getTag() returns the tag that is associated with this plugin

s9e\TextFormatter\Tests\Plugins\HTMLEntities\Parser
 [x] Parsing tests
 [x] Parsing tests (JavaScript)
 [x] Parsing+rendering tests

s9e\TextFormatter\Tests\Plugins\MarkdownLite\Configurator
 [x] Turns on automatic paragraph management
 [x] Automatically creates a "URL" tag
 [x] Does not overwrite the "URL" tag if it already exists
 [x] asConfig() returns an array

s9e\TextFormatter\Tests\Plugins\MarkdownLite\Parser
 [x] Parsing tests
 [x] Parsing tests (JavaScript)

s9e\TextFormatter\Tests\Plugins\MediaEmbed\Configurator\MediaSiteCollection
 [x] Extends ArrayObject
 [x] Implements ConfigProvider
 [x] asConfig() returns a JS variant
 [x] The config contains a map of ['host.tld' => 'site id']
 [x] Accept "host" as a string or an array of strings

s9e\TextFormatter\Tests\Plugins\MediaEmbed\Configurator
 [x] Registers mediasites as a variable for the parser
 [x] Creates a [media] BBCode by default
 [x] Does not create a [media] BBCode if createBBCodes is false
 [x] add('youtube') creates a [youtube] BBCode by default
 [x] add('youtube') does not createc a [youtube] BBCode if createBBCodes is false
 [x] add('inexistent') throws an exception
 [x] add() returns a tag
 [x] add() accepts an array as second argument
 [x] add() creates an attribute for every named subpattern in extract
 [x] add() creates an attribute for every named subpattern in scrape/extract
 [x] add() marks the "id" attribute as non-optional if present
 [x] add() marks non-"id" attributes as optional
 [x] add() adds the regexp used for the "id" attribute to the list of attribute preprocessors
 [x] add() accepts multiple "extract" elements
 [x] add() accepts multiple "host" elements
 [x] add() accepts multiple "scrape" elements
 [x] add() accepts multiple "match" elements in "scrape"
 [x] add() accepts multiple "extract" elements in "scrape"
 [x] add() sets the tag's default template to the "template" element if available
 [x] add() sets the tag's default template to the iframe defined in the "iframe" element if available
 [x] add() sets the tag's default template to the object defined in the "flash" element if available
 [x] add() checks the tag's safety before adding it
 [x] asConfig() returns false if no site was added
 [x] asConfig() returns a an array containing a "regexp" element by default, if any site was added
 [x] asConfig() returns false if captureURLs is false

s9e\TextFormatter\Tests\Plugins\MediaEmbed\Parser
 [x] Scraping tests
 [x] Parsing tests
 [x] Parsing tests (JavaScript)
 [x] Parsing+rendering tests

s9e\TextFormatter\Tests\Configurator\RendererGenerators\PHP
 [x] Returns an instance of Renderer
 [x] get() can be called multiple times with the same stylesheet
 [x] The returned instance contains its own source code in $renderer->source
 [x] If no class name is set, a class name is generated based on the renderer's source
 [x] The prefix used for generated class names can be changed in $rendererGenerator->defaultClassPrefix
 [x] The class name can be set in $rendererGenerator->className
 [x] The class name can be namespaced
 [x] If $rendererGenerator->filepath is set, the renderer is saved to this file
 [x] A path to a cache dir can be passed to the constructor
 [x] If $rendererGenerator->filepath is not set, and $rendererGenerator->cacheDir is set, the renderer is saved to the cache dir using the renderer's class name + '.php' as file name
 [x] When saving the renderer to the cache dir, backslashes in the class name are replaced with underscores
 [x] If $rendererGenerator->filepath and $rendererGenerator->cacheDir are set, the renderer is saved to $rendererGenerator->filepath
 [x] The name of the class of the last generated renderer is available in $rendererGenerator->lastClassName
 [x] The name of the class of the last saved renderer is available in $rendererGenerator->lastFilepath
 [x] Ignores comments
 [x] Throws an exception if a template contains a processing instruction
 [x] Throws an exception when encountering unsupported XSL elements
 [x] Throws an exception when encountering namespaced elements
 [x] Throws an exception on <xsl:copy-of/> that does not copy an attribute
 [x] Throws an exception on unterminated strings in XPath expressions
 [x] setParameter() accepts values that contain both types of quotes
 [x] Correctly handles dynamic stylesheet parameters
 [x] Elements found to be empty at runtime use the empty-elements tag syntax in XML mode by default
 [x] Elements found to be empty at runtime are not minimized if forceEmptyElements is FALSE
 [x] Elements found to be empty at runtime are not minimized if useEmptyElements is FALSE
 [x] Empty elements use the empty-elements tag syntax in XML mode by default
 [x] Empty elements do not use the empty-elements tag syntax in XML mode if useEmptyElements is FALSE
 [x] Empty void elements use the empty-elements tag syntax in XML mode even if useEmptyElements is FALSE
 [x] HTML rendering
 [x] XHTML rendering
 [x] Rendering of void and empty elements in HTML
 [x] Rendering of void and empty elements in XHTML
 [x] Rendering tests from plugins
 [x] Matches the reference rendering in edge cases
 [x] XPath expressions are inlined as PHP whenever possible
 [x] mbstring functions are not used if $useMultibyteStringFunctions is FALSE
 [x] Code optimization tests

s9e\TextFormatter\Tests\Configurator\RendererGenerators\Unformatted
 [x] Returns an instance of Renderer
 [x] Configures the renderer for HTML output if applicable
 [x] Configures the renderer for XML output if applicable

s9e\TextFormatter\Tests\Configurator\RendererGenerators\XSLCache
 [x] Returns an instance of Renderer
 [x] The path given to the constructor is canonicalized
 [x] The constructor throws an exception if the given path does not exist

s9e\TextFormatter\Tests\Configurator\RendererGenerators\XSLT
 [x] Returns an instance of Renderer

s9e\TextFormatter\Tests\Renderer
 [x] loadXML() returns a DOMDocument

s9e\TextFormatter\Tests\Renderers\XSLT
 [x] Is serializable
 [x] Does not serialize the XSLTProcessor instance
 [x] Preserves other properties during serialization
 [x] Renders multi-line text in HTML after un/serialization
 [x] Renders multi-line text in XHTML after un/serialization
 [x] setParameter() accepts values that contain both types of quotes but replaces ASCII character " with Unicode character 0xFF02 because of https://bugs.php.net/64137
 [x] Does not output </embed> end tags
 [x] Renders plain text
 [x] Renders multi-line text in HTML
 [x] Renders multi-line text in XHTML
 [x] Renders rich text
 [x] renderMulti() renders multiple messages at once
 [x] renderMulti() preserves keys and order
 [x] renderMulti() renders multi-line text in HTML
 [x] renderMulti() renders multi-line text in XHTML
 [x] setParameter() sets the value of a parameter
 [x] setParameters() sets the values of any number of parameters in an associative array

s9e\TextFormatter\Tests\Renderers\XSLCache
 [x] getFilepath() returns the path to the stylesheet file
 [x] Is serializable
 [x] Does not serialize the XSLTProcessor instance
 [x] Preserves other properties during serialization
 [x] Renders multi-line text in HTML after un/serialization
 [x] Renders multi-line text in XHTML after un/serialization
 [x] setParameter() accepts values that contain both types of quotes but replaces ASCII character " with Unicode character 0xFF02 because of https://bugs.php.net/64137
 [x] Does not output </embed> end tags
 [x] Renders plain text
 [x] Renders multi-line text in HTML
 [x] Renders multi-line text in XHTML
 [x] Renders rich text
 [x] renderMulti() renders multiple messages at once
 [x] renderMulti() preserves keys and order
 [x] renderMulti() renders multi-line text in HTML
 [x] renderMulti() renders multi-line text in XHTML
 [x] setParameter() sets the value of a parameter
 [x] setParameters() sets the values of any number of parameters in an associative array

s9e\TextFormatter\Tests\Renderers\PHP
 [x] Is serializable
 [x] The source of the renderer is omitted for serialization
 [x] The last output of the renderer is omitted for serialization
 [x] Custom properties are preserved during serialization
 [x] Renders plain text
 [x] Renders multi-line text in HTML
 [x] Renders multi-line text in XHTML
 [x] Renders rich text
 [x] renderMulti() renders multiple messages at once
 [x] renderMulti() preserves keys and order
 [x] renderMulti() renders multi-line text in HTML
 [x] renderMulti() renders multi-line text in XHTML
 [x] setParameter() sets the value of a parameter
 [x] setParameters() sets the values of any number of parameters in an associative array
 [x] setParameter() accepts values that contain both types of quotes

s9e\TextFormatter\Tests\Renderers\Unformatted
 [x] Returns unformatted version of rich text
 [x] Converts newlines to <br>
 [x] Converts newlines to <br/> if output is set to xml
 [x] Keeps HTML's special characters escaped
 [x] setParameter() doesn't do anything

s9e\TextFormatter\Tests\Unparser
 [x] unparse('<pt>Plain text</pt>') returns 'Plain text'
 [x] removeFormatting('<pt>Plain text</pt>') returns 'Plain text'
 [x] unparse('<pt>&lt;Plain text&gt;</pt>') returns '<Plain text>'
 [x] removeFormatting('<pt>&lt;Plain text&gt;</pt>') returns '<Plain text>'
 [x] unparse("<mt>a<br />\nb</mt>") returns "a\nb"
 [x] removeFormatting("<mt>a<br />\nb</mt>") returns "a\nb"
 [x] unparse('<rt><B><st>[b]</st>Rich<et>[/b]</et></B> text <E>:)</E></rt>') returns '[b]Rich[/b] text :)'
 [x] removeFormatting('<rt><B><st>[b]</st>Rich<et>[/b]</et></B> text <E>:)</E></rt>') returns 'Rich text :)'
 [x] Can unparse representations that were over-escaped

s9e\TextFormatter\Tests\Bundle
 [x] parse() creates a parser, parses the input and returns the output
 [x] parse() reuses the same parser on consecutive calls
 [x] parse() executes static::$beforeParse before calling the parser's parse() method
 [x] parse() executes static::$afterParse after calling the parser's parse() method
 [x] render() creates a renderer, renders the input and returns the result
 [x] render() reuses the same renderer on consecutive calls
 [x] render() calls setParameters() with its second argument
 [x] render() executes static::$beforeRender before calling the renderer's render() method
 [x] render() executes static::$afterRender after calling the renderer's render() method
 [x] renderMulti() creates a renderer, renders the input and returns the result
 [x] renderMulti() reuses the same renderer on consecutive calls
 [x] renderMulti() calls setParameters() with its second argument
 [x] renderMulti() executes static::$beforeRender on every entry before calling the renderer's renderMulti() method
 [x] renderMulti() executes static::$afterRender on every entry after calling the renderer's renderMulti() method
 [x] unparse() takes the XML representation and returns the original text
 [x] unparse() executes static::$beforeUnparse before calling the parser's unparse() method
 [x] unparse() executes static::$afterUnparse after calling the parser's unparse() method
 [x] reset() removes the cached parser and renderer

s9e\TextFormatter\Tests\Bundles\F5
 [x] Rendering tests

s9e\TextFormatter\Tests\Bundles\Forum
 [x] Rendering tests

s9e\TextFormatter\Tests\Bundles\S18
 [x] Rendering tests

s9e\TextFormatter\Tests\Bundles\S18\Helper
 [x] configure() has no effect if SMF is not loaded
 [x] configure() set lang strings and parameters if SMF is loaded
 [x] applyTimeformat() replaces numeric timestamps in [quote] with a human-readable date
 [x] s9e\TextFormatter\Bundles\S18\Helper::timeformat() replaces numeric timestamps in [time] with a human-readable date
 [x] prependFtp() returns ftp:// URLs as-is
 [x] prependFtp() returns ftps:// URLs as-is
 [x] prependFtp() prepends ftp:// to non-ftp, non-ftps URLs
 [x] prependHttp() returns http:// URLs as-is
 [x] prependHttp() returns https:// URLs as-is
 [x] prependHttp() prepends http:// to non-http, non-https URLs
 [x] filterIurl() returns URL fragments as-is
 [x] filterIurl() returns valid http:// URLs as-is
 [x] filterIurl() returns valid https:// URLs as-is
 [x] filterIurl() prepends http:// to non-http, non-https URLs

