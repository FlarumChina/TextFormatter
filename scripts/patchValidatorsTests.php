#!/usr/bin/php
<?php

namespace s9e\TextFormatter\Tests;

class Test {}

foreach (array('AttributeName', 'TagName')  as $type)
{
	$filepath = __DIR__ . '/../tests/ConfigBuilder/Validators/' . $type . 'Test.php';
	$class    = 's9e\\TextFormatter\\Tests\\ConfigBuilder\\Validators\\' . $type . 'Test';

	include $filepath;

	$php = '';
	foreach ($class::getNames() as $input => $expected)
	{
		if (preg_match('#^Invalid#', $expected))
		{
			$status = 'invalid (' . substr($expected, 9) . ')';
			$method = 'assertFalse';
		}
		else
		{
			$status = 'valid';
			$method = 'assertTrue';
		}

		$php .= '
			/**
			* @testdox ' . json_encode($input) . ' is ' . $status . '
			*/
			public function testValid' . strtoupper(dechex(crc32($input))) . '()
			{
				$this->' . $method . '(' . $type . '::isValid(' . json_encode($input) . '));
			}
		';

		if ($status !== 'valid')
		{
			continue;
		}

		$php .= '
			/**
			* @testdox ' . json_encode($input) . ' is normalized to ' . json_encode($expected) . '
			*/
			public function testNormalize' . strtoupper(dechex(crc32($input))) . '()
			{
				$this->assertSame(' . json_encode($expected) . ', ' . $type . '::normalize(' . json_encode($input) . '));
			}
		';
	}

	$file = file_get_contents($filepath);

	$startComment = '// Start of content generated by ../scripts/patchValidatorsTests.php';
	$endComment = "\t// End of content generated by ../scripts/patchValidatorsTests.php";

	$file = substr($file, 0, strpos($file, $startComment) + strlen($startComment))
		  . str_replace("\n\t\t", "\n", $php)
		  . substr($file, strpos($file, $endComment));

	file_put_contents($filepath, $file);
}

die("Done.\n");