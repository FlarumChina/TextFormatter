#!/usr/bin/php
<?php

class PHPUnit_Framework_TestCase {}

function _array(array $arr)
{
	$i = -1;

	$php = 'array(';
	foreach ($arr as $k => $v)
	{
		if (++$i)
		{
			$php .= ', ';
		}

		if (!is_numeric($k))
		{
			$php .= var_export($k, true) . ' => ';
		}

		$php .= var_export($v, true);
	}

	$php .= ')';

	return $php;
}


include __DIR__ . '/../tests/RegexpMasterTest.php';

$test = new s9e\TextFormatter\Tests\RegexpMasterTest;

$php = '';
foreach ($test->getWordsLists() as $case)
{
	$regexp   = var_export($case[0], true);
	$wordlist = _array($case[1]);

	$php .= "\n\t/**\n\t* @testdox buildRegexpFromList([" . substr($wordlist, 6, -1) . "]";

	if (isset($case[2]))
	{
		$options = strtr(json_encode($case[2]), array(
			'{' => '[',
			'}' => ']',
			',' => ', ',
			':' => ' => '
		));

		$php .= ', ' . $options . '';
	}

	$php .= ") returns " . $regexp . "\n\t*/\n\tpublic function test_buildRegexpFromList_" . dechex(crc32(serialize($case))) . "()\n\t{\n\t\t\$this->assertSame(\n\t\t\t" . $regexp . ",\n\t\t\t\$this->rm->buildRegexpFromList(";

	if (isset($case[2]))
	{
		$php .= "\n\t\t\t\t" . $wordlist . ",\n\t\t\t\t" . _array($case[2]) . "\n\t\t\t";
	}
	else
	{
		$php .= $wordlist;
	}

	$php .= ")\n\t\t);\n\t}\n";
}

$filepath = __DIR__ . '/../tests/RegexpMasterTest.php';
$file = file_get_contents($filepath);

$startComment = '// Start of content generated by ../scripts/patchRegexpMasterTest.php';
$endComment = "\t// End of content generated by ../scripts/patchRegexpMasterTest.php";

$file = substr($file, 0, strpos($file, $startComment) + strlen($startComment))
      . $php
      . substr($file, strpos($file, $endComment));

file_put_contents($filepath, $file);

die("Done.\n");