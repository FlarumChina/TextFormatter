#!/usr/bin/php
<?php

$filters = array(
	'int'     => '1010010000',
	'integer' => '1010010000',
	'uint'    => '1010000000',
	'number'  => '1011000010',
	'float'   => '1011111110'
);

$values = array(
	'WholeNumbers'
		=> '123',
	'PartialNumbers'
		=> '123abc',
	'Integers'
		=> 123,
	'NumbersThatStartWithAZero'
		=> '0123',
	'NumbersInScientificNotation'
		=> '12e3',
	'NegativeNumbers'
		=> '-123',
	'DecimalNumbers'
		=> '12.3',
	'Floats'
		=> 12.3,
	'NumbersTooBigForThePhpIntegerType'
		=> '9999999999999999999',
	'NumbersInHexNotation'
		=> '0x123',
);

$output = array();
$output['float']['NumbersThatStartWithAZero'] = '123';
$output['float']['NumbersInScientificNotation'] = '12000';
$output['float']['NumbersTooBigForThePhpIntegerType'] = '1.0E+19';

$php = '';

foreach ($filters as $filter => $mask)
{
	$i = 0;
	foreach ($values as $name => $value)
	{
		$php .= "\n\tpublic function test"
		      . ucfirst($filter)
		      . 'Filter'
		      . (($mask[$i]) ? 'Accepts' : 'Rejects')
		      . $name
		      . "()\n\t{\n\t\t\$this->assertAttribute"
		      . (($mask[$i]) ? 'Valid' : 'Invalid')
		      . "('$filter', "
		      . var_export($value, true)
		      . ((isset($output[$filter][$name])) ? ', ' . var_export($output[$filter][$name], true) : '')
		      . ");\n\t}\n";

		++$i;
	}
}

$filepath = __DIR__ . '/../tests/TextFormatter/ParserTest.php';
$file = file_get_contents($filepath);

$startComment = preg_quote('// Start of content generated by ../../scripts/patchTextFormatterParserTest.php');

$endComment = preg_quote("\t// End of content generated by ../../scripts/patchTextFormatterParserTest.php");

$file = preg_replace(
	'#(?<=' . $startComment . ')(.*?)(?=' . $endComment . ')#s',
	$php,
	$file
);

file_put_contents($filepath, $file);
