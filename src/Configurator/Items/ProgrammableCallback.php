<?php

/**
* @package   s9e\TextFormatter
* @copyright Copyright (c) 2010-2013 The s9e Authors
* @license   http://www.opensource.org/licenses/mit-license.php The MIT License
*/
namespace s9e\TextFormatter\Configurator\Items;

use InvalidArgumentException;
use s9e\TextFormatter\Configurator\ConfigProvider;
use s9e\TextFormatter\Configurator\Items\CallbackPlaceholder;
use s9e\TextFormatter\Configurator\Javascript\Code;

class ProgrammableCallback implements ConfigProvider
{
	/**
	* @var callback Callback
	*/
	protected $callback;

	/**
	* @var Code Javascript source code for this callback
	*/
	protected $js = null;

	/**
	* @var array List of params to be passed to the callback
	*/
	protected $params = array();

	/**
	* @var array Variables associated with this instance
	*/
	protected $vars = array();

	/**
	* @param callable $callback
	*/
	public function __construct($callback)
	{
		if (!is_callable($callback))
		{
			throw new InvalidArgumentException(__METHOD__ . '() expects a callback');
		}

		// Normalize ['foo', 'bar'] to 'foo::bar'
		if (is_array($callback) && is_string($callback[0]))
		{
			$callback = $callback[0] . '::' . $callback[1];
		}

		$this->callback = $callback;
	}

	/**
	* Add a parameter by value
	*
	* @param mixed $paramValue
	*/
	public function addParameterByValue($paramValue)
	{
		$this->params[] = $paramValue;
	}

	/**
	* Add a parameter by name
	*
	* The value will be dynamically generated by the caller
	*
	* @param mixed $paramName
	*/
	public function addParameterByName($paramName)
	{
		$this->params[$paramName] = null;
	}

	/**
	* Get this object's callback
	*
	* @return callback
	*/
	public function getCallback()
	{
		return $this->callback;
	}

	/**
	* Set this callback's Javascript
	*
	* @param  string $js Javascript source code for this callback
	* @return mixed      Instance of Code if available, NULL otherwise
	*/
	public function getJS()
	{
		return $this->js;
	}

	/**
	* Get this object's variables
	*
	* @return array
	*/
	public function getVars()
	{
		return $this->vars;
	}

	/**
	* Set this callback's Javascript
	*
	* @param  Code|string $js Javascript source code for this callback
	* @return void
	*/
	public function setJS($js)
	{
		if (!($js instanceof Code))
		{
			$js = new Code($js);
		}

		$this->js = $js;
	}

	/**
	* Set this callback's variables
	*
	* @param  array $vars Associative array of values
	* @return void
	*/
	public function setVars(array $vars)
	{
		$this->vars = $vars;
	}

	/**
	* Create an instance of this class based on an array
	*
	* @param  array  $arr Callback's config array
	* @return static
	*/
	public static function fromArray(array $arr)
	{
		// Replace the name of a built-in filter with a CallbackPlaceholder
		if (is_string($arr['callback'])
		 && substr($arr['callback'], 0, 1) === '#')
		{
			$arr['callback'] = new CallbackPlaceholder($arr['callback']);
		}

		$obj = new static($arr['callback']);

		if (isset($arr['params']))
		{
			foreach ($arr['params'] as $k => $v)
			{
				if (is_numeric($k))
				{
					$obj->addParameterByValue($v);
				}
				else
				{
					$obj->addParameterByName($k);
				}
			}
		}

		if (isset($arr['vars']))
		{
			$obj->setVars($arr['vars']);
		}

		if (isset($arr['js']))
		{
			$obj->setJS($arr['js']);
		}

		return $obj;
	}

	/**
	* {@inheritdoc}
	*/
	public function asConfig()
	{
		$config = array();

		if ($this->callback instanceof CallbackPlaceholder)
		{
			// Keep the vars if the callback is a placeholder
			$config['callback'] = $this->callback->asConfig();
			$config['vars']     = $this->vars;
		}
		else
		{
			$config['callback'] = $this->callback;
		}

		foreach ($this->params as $k => $v)
		{
			if (is_numeric($k))
			{
				// By value
				$config['params'][] = $v;
			}
			elseif (isset($this->vars[$k]))
			{
				// By name, but the value is readily available in $this->vars
				$config['params'][] = $this->vars[$k];
			}
			else
			{
				// By name
				$config['params'][$k] = null;
			}
		}

		if (isset($this->js))
		{
			$config['js'] = $this->js;
		}

		return $config;
	}
}